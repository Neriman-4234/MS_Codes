
MS_HW_t03.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009fc4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  0800a154  0800a154  0001a154  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a21c  0800a21c  000201cc  2**0
                  CONTENTS
  4 .ARM          00000008  0800a21c  0800a21c  0001a21c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a224  0800a224  000201cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a224  0800a224  0001a224  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a228  0800a228  0001a228  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001cc  20000000  0800a22c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201cc  2**0
                  CONTENTS
 10 .bss          00001e08  200001cc  200001cc  000201cc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001fd4  20001fd4  000201cc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201cc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017c24  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003eae  00000000  00000000  00037e20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013f0  00000000  00000000  0003bcd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001230  00000000  00000000  0003d0c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025b91  00000000  00000000  0003e2f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a633  00000000  00000000  00063e81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cdf10  00000000  00000000  0007e4b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014c3c4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005584  00000000  00000000  0014c414  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001cc 	.word	0x200001cc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a13c 	.word	0x0800a13c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d0 	.word	0x200001d0
 80001cc:	0800a13c 	.word	0x0800a13c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <LIS302DL_Init>:
  * @brief  Set LIS302DL Initialization.
  * @param  InitStruct: contains mask of different init parameters
  * @retval None
  */
void LIS302DL_Init(uint16_t InitStruct)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b084      	sub	sp, #16
 8000588:	af00      	add	r7, sp, #0
 800058a:	4603      	mov	r3, r0
 800058c:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800058e:	2300      	movs	r3, #0
 8000590:	73fb      	strb	r3, [r7, #15]
  
  /* Configure the low level interface */
  ACCELERO_IO_Init();
 8000592:	f000 fe39 	bl	8001208 <ACCELERO_IO_Init>

  ctrl = (uint8_t) InitStruct;
 8000596:	88fb      	ldrh	r3, [r7, #6]
 8000598:	b2db      	uxtb	r3, r3
 800059a:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG1 register */
  ACCELERO_IO_Write(&ctrl, LIS302DL_CTRL_REG1_ADDR, 1);
 800059c:	f107 030f 	add.w	r3, r7, #15
 80005a0:	2201      	movs	r2, #1
 80005a2:	2120      	movs	r1, #32
 80005a4:	4618      	mov	r0, r3
 80005a6:	f000 fe8d 	bl	80012c4 <ACCELERO_IO_Write>
}
 80005aa:	bf00      	nop
 80005ac:	3710      	adds	r7, #16
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}

080005b2 <LIS302DL_DeInit>:
  * @brief  LIS302DL De-Initialization.
  * @param  None
  * @retval None.
  */
void LIS302DL_DeInit(void)
{
 80005b2:	b480      	push	{r7}
 80005b4:	af00      	add	r7, sp, #0
  
}
 80005b6:	bf00      	nop
 80005b8:	46bd      	mov	sp, r7
 80005ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005be:	4770      	bx	lr

080005c0 <LIS302DL_ReadID>:
  * @brief  Read LIS302DL device ID.
  * @param  None
  * @retval The Device ID (two bytes).
  */
uint8_t LIS302DL_ReadID(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b082      	sub	sp, #8
 80005c4:	af00      	add	r7, sp, #0
  uint8_t tmp = 0;
 80005c6:	2300      	movs	r3, #0
 80005c8:	71fb      	strb	r3, [r7, #7]

  /* Configure the low level interface */
  ACCELERO_IO_Init();
 80005ca:	f000 fe1d 	bl	8001208 <ACCELERO_IO_Init>

  /* Read WHO_AM_I register */
  ACCELERO_IO_Read(&tmp, LIS302DL_WHO_AM_I_ADDR, 1);
 80005ce:	1dfb      	adds	r3, r7, #7
 80005d0:	2201      	movs	r2, #1
 80005d2:	210f      	movs	r1, #15
 80005d4:	4618      	mov	r0, r3
 80005d6:	f000 fea7 	bl	8001328 <ACCELERO_IO_Read>
  
  /* Return the ID */
  return (uint16_t)tmp;
 80005da:	79fb      	ldrb	r3, [r7, #7]
}
 80005dc:	4618      	mov	r0, r3
 80005de:	3708      	adds	r7, #8
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}

080005e4 <LIS302DL_FilterConfig>:
  * @brief  Set LIS302DL Internal High Pass Filter configuration.
  * @param  FilterStruct: contains data for filter config
  * @retval None
  */
void LIS302DL_FilterConfig(uint8_t FilterStruct)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b084      	sub	sp, #16
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	4603      	mov	r3, r0
 80005ec:	71fb      	strb	r3, [r7, #7]
  uint8_t ctrl = 0x00;
 80005ee:	2300      	movs	r3, #0
 80005f0:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG2 register */
  ACCELERO_IO_Read(&ctrl, LIS302DL_CTRL_REG2_ADDR, 1);
 80005f2:	f107 030f 	add.w	r3, r7, #15
 80005f6:	2201      	movs	r2, #1
 80005f8:	2121      	movs	r1, #33	; 0x21
 80005fa:	4618      	mov	r0, r3
 80005fc:	f000 fe94 	bl	8001328 <ACCELERO_IO_Read>

  /* Clear high pass filter cut-off level, interrupt and data selection bits */
  ctrl &= (uint8_t)~(LIS302DL_FILTEREDDATASELECTION_OUTPUTREGISTER | \
 8000600:	7bfb      	ldrb	r3, [r7, #15]
 8000602:	f023 032f 	bic.w	r3, r3, #47	; 0x2f
 8000606:	b2db      	uxtb	r3, r3
 8000608:	73fb      	strb	r3, [r7, #15]
                     LIS302DL_HIGHPASSFILTER_LEVEL_3 | \
                     LIS302DL_HIGHPASSFILTERINTERRUPT_1_2);

  ctrl |= FilterStruct;
 800060a:	7bfa      	ldrb	r2, [r7, #15]
 800060c:	79fb      	ldrb	r3, [r7, #7]
 800060e:	4313      	orrs	r3, r2
 8000610:	b2db      	uxtb	r3, r3
 8000612:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG2 register */
  ACCELERO_IO_Write(&ctrl, LIS302DL_CTRL_REG2_ADDR, 1);
 8000614:	f107 030f 	add.w	r3, r7, #15
 8000618:	2201      	movs	r2, #1
 800061a:	2121      	movs	r1, #33	; 0x21
 800061c:	4618      	mov	r0, r3
 800061e:	f000 fe51 	bl	80012c4 <ACCELERO_IO_Write>
}
 8000622:	bf00      	nop
 8000624:	3710      	adds	r7, #16
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}

0800062a <LIS302DL_InterruptConfig>:
  * @param  LIS302DL_InterruptConfig_TypeDef: pointer to a LIS302DL_InterruptConfig_TypeDef 
  *         structure that contains the configuration setting for the LIS302DL Interrupt.
  * @retval None
  */
void LIS302DL_InterruptConfig(LIS302DL_InterruptConfigTypeDef *LIS302DL_IntConfigStruct)
{
 800062a:	b580      	push	{r7, lr}
 800062c:	b084      	sub	sp, #16
 800062e:	af00      	add	r7, sp, #0
 8000630:	6078      	str	r0, [r7, #4]
  uint8_t ctrl = 0x00;
 8000632:	2300      	movs	r3, #0
 8000634:	73fb      	strb	r3, [r7, #15]
  
  /* Read CLICK_CFG register */
  ACCELERO_IO_Read(&ctrl, LIS302DL_CLICK_CFG_REG_ADDR, 1);
 8000636:	f107 030f 	add.w	r3, r7, #15
 800063a:	2201      	movs	r2, #1
 800063c:	2138      	movs	r1, #56	; 0x38
 800063e:	4618      	mov	r0, r3
 8000640:	f000 fe72 	bl	8001328 <ACCELERO_IO_Read>
  
  /* Configure latch Interrupt request, click interrupts and double click interrupts */                   
  ctrl = (uint8_t)(LIS302DL_IntConfigStruct->Latch_Request| \
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	781a      	ldrb	r2, [r3, #0]
                   LIS302DL_IntConfigStruct->SingleClick_Axes | \
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	785b      	ldrb	r3, [r3, #1]
  ctrl = (uint8_t)(LIS302DL_IntConfigStruct->Latch_Request| \
 800064c:	4313      	orrs	r3, r2
 800064e:	b2da      	uxtb	r2, r3
                   LIS302DL_IntConfigStruct->DoubleClick_Axes);
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	789b      	ldrb	r3, [r3, #2]
  ctrl = (uint8_t)(LIS302DL_IntConfigStruct->Latch_Request| \
 8000654:	4313      	orrs	r3, r2
 8000656:	b2db      	uxtb	r3, r3
 8000658:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CLICK_CFG register */
  ACCELERO_IO_Write(&ctrl, LIS302DL_CLICK_CFG_REG_ADDR, 1);
 800065a:	f107 030f 	add.w	r3, r7, #15
 800065e:	2201      	movs	r2, #1
 8000660:	2138      	movs	r1, #56	; 0x38
 8000662:	4618      	mov	r0, r3
 8000664:	f000 fe2e 	bl	80012c4 <ACCELERO_IO_Write>
}
 8000668:	bf00      	nop
 800066a:	3710      	adds	r7, #16
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}

08000670 <LIS302DL_Click_IntConfig>:
  * @brief  Set LIS302DL Interrupt configuration
  * @param  None
  * @retval None
  */
void LIS302DL_Click_IntConfig(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8000676:	2300      	movs	r3, #0
 8000678:	71fb      	strb	r3, [r7, #7]
  LIS302DL_InterruptConfigTypeDef   LIS302DL_InterruptStruct;
  
  ACCELERO_IO_ITConfig();
 800067a:	f000 fdf3 	bl	8001264 <ACCELERO_IO_ITConfig>
  
  /* Set configuration of Internal High Pass Filter of LIS302DL */
  LIS302DL_InterruptStruct.Latch_Request = LIS302DL_INTERRUPTREQUEST_LATCHED;
 800067e:	2340      	movs	r3, #64	; 0x40
 8000680:	713b      	strb	r3, [r7, #4]
  LIS302DL_InterruptStruct.SingleClick_Axes = LIS302DL_CLICKINTERRUPT_Z_ENABLE;
 8000682:	2310      	movs	r3, #16
 8000684:	717b      	strb	r3, [r7, #5]
  LIS302DL_InterruptStruct.DoubleClick_Axes = LIS302DL_DOUBLECLICKINTERRUPT_Z_ENABLE;
 8000686:	2320      	movs	r3, #32
 8000688:	71bb      	strb	r3, [r7, #6]
  LIS302DL_InterruptConfig(&LIS302DL_InterruptStruct);
 800068a:	1d3b      	adds	r3, r7, #4
 800068c:	4618      	mov	r0, r3
 800068e:	f7ff ffcc 	bl	800062a <LIS302DL_InterruptConfig>
  
  /* Configure Interrupt control register: enable Click interrupt on INT1 and
  INT2 on Z axis high event */
  ctrl = 0x3F;
 8000692:	233f      	movs	r3, #63	; 0x3f
 8000694:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS302DL_CTRL_REG3_ADDR, 1);
 8000696:	1dfb      	adds	r3, r7, #7
 8000698:	2201      	movs	r2, #1
 800069a:	2122      	movs	r1, #34	; 0x22
 800069c:	4618      	mov	r0, r3
 800069e:	f000 fe11 	bl	80012c4 <ACCELERO_IO_Write>
  
  /* Enable Interrupt generation on click on Z axis */
  ctrl = 0x50;
 80006a2:	2350      	movs	r3, #80	; 0x50
 80006a4:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS302DL_CLICK_CFG_REG_ADDR, 1);
 80006a6:	1dfb      	adds	r3, r7, #7
 80006a8:	2201      	movs	r2, #1
 80006aa:	2138      	movs	r1, #56	; 0x38
 80006ac:	4618      	mov	r0, r3
 80006ae:	f000 fe09 	bl	80012c4 <ACCELERO_IO_Write>
  
  /* Configure Click Threshold on X/Y axis (10 x 0.5g) */
  ctrl = 0xAA;
 80006b2:	23aa      	movs	r3, #170	; 0xaa
 80006b4:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS302DL_CLICK_THSY_X_REG_ADDR, 1);
 80006b6:	1dfb      	adds	r3, r7, #7
 80006b8:	2201      	movs	r2, #1
 80006ba:	213b      	movs	r1, #59	; 0x3b
 80006bc:	4618      	mov	r0, r3
 80006be:	f000 fe01 	bl	80012c4 <ACCELERO_IO_Write>
  
  /* Configure Click Threshold on Z axis (10 x 0.5g) */
  ctrl = 0x0A;
 80006c2:	230a      	movs	r3, #10
 80006c4:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS302DL_CLICK_THSZ_REG_ADDR, 1);
 80006c6:	1dfb      	adds	r3, r7, #7
 80006c8:	2201      	movs	r2, #1
 80006ca:	213c      	movs	r1, #60	; 0x3c
 80006cc:	4618      	mov	r0, r3
 80006ce:	f000 fdf9 	bl	80012c4 <ACCELERO_IO_Write>
  
  /* Enable interrupt on Y axis high event */
  ctrl = 0x4C;
 80006d2:	234c      	movs	r3, #76	; 0x4c
 80006d4:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS302DL_FF_WU_CFG1_REG_ADDR, 1);
 80006d6:	1dfb      	adds	r3, r7, #7
 80006d8:	2201      	movs	r2, #1
 80006da:	2130      	movs	r1, #48	; 0x30
 80006dc:	4618      	mov	r0, r3
 80006de:	f000 fdf1 	bl	80012c4 <ACCELERO_IO_Write>
  
  /* Configure Time Limit */
  ctrl = 0x03;
 80006e2:	2303      	movs	r3, #3
 80006e4:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS302DL_CLICK_TIMELIMIT_REG_ADDR, 1);
 80006e6:	1dfb      	adds	r3, r7, #7
 80006e8:	2201      	movs	r2, #1
 80006ea:	213d      	movs	r1, #61	; 0x3d
 80006ec:	4618      	mov	r0, r3
 80006ee:	f000 fde9 	bl	80012c4 <ACCELERO_IO_Write>
  
  /* Configure Latency */
  ctrl = 0x7F;
 80006f2:	237f      	movs	r3, #127	; 0x7f
 80006f4:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS302DL_CLICK_LATENCY_REG_ADDR, 1);
 80006f6:	1dfb      	adds	r3, r7, #7
 80006f8:	2201      	movs	r2, #1
 80006fa:	213e      	movs	r1, #62	; 0x3e
 80006fc:	4618      	mov	r0, r3
 80006fe:	f000 fde1 	bl	80012c4 <ACCELERO_IO_Write>
  
  /* Configure Click Window */
  ctrl = 0x7F;
 8000702:	237f      	movs	r3, #127	; 0x7f
 8000704:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS302DL_CLICK_WINDOW_REG_ADDR, 1);
 8000706:	1dfb      	adds	r3, r7, #7
 8000708:	2201      	movs	r2, #1
 800070a:	213f      	movs	r1, #63	; 0x3f
 800070c:	4618      	mov	r0, r3
 800070e:	f000 fdd9 	bl	80012c4 <ACCELERO_IO_Write>
}
 8000712:	bf00      	nop
 8000714:	3708      	adds	r7, #8
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}

0800071a <LIS302DL_Click_IntClear>:
  * @brief  Clear LIS302DL click Interrupt 
  * @param  None
  * @retval None
  */
void LIS302DL_Click_IntClear(void)
{
 800071a:	b580      	push	{r7, lr}
 800071c:	b084      	sub	sp, #16
 800071e:	af00      	add	r7, sp, #0
  uint8_t buffer[6], clickreg = 0;
 8000720:	2300      	movs	r3, #0
 8000722:	71fb      	strb	r3, [r7, #7]

  /* Read click and status registers if the available MEMS Accelerometer is LIS302DL */
  ACCELERO_IO_Read(&clickreg, LIS302DL_CLICK_SRC_REG_ADDR, 1); 
 8000724:	1dfb      	adds	r3, r7, #7
 8000726:	2201      	movs	r2, #1
 8000728:	2139      	movs	r1, #57	; 0x39
 800072a:	4618      	mov	r0, r3
 800072c:	f000 fdfc 	bl	8001328 <ACCELERO_IO_Read>
  ACCELERO_IO_Read(buffer, LIS302DL_STATUS_REG_ADDR, 6);
 8000730:	f107 0308 	add.w	r3, r7, #8
 8000734:	2206      	movs	r2, #6
 8000736:	2127      	movs	r1, #39	; 0x27
 8000738:	4618      	mov	r0, r3
 800073a:	f000 fdf5 	bl	8001328 <ACCELERO_IO_Read>
}
 800073e:	bf00      	nop
 8000740:	3710      	adds	r7, #16
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}

08000746 <LIS302DL_RebootCmd>:
  * @brief  Reboot memory content of LIS302DL.
  * @param  None
  * @retval None
  */
void LIS302DL_RebootCmd(void)
{
 8000746:	b580      	push	{r7, lr}
 8000748:	b082      	sub	sp, #8
 800074a:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  /* Read CTRL_REG2 register */
  ACCELERO_IO_Read(&tmpreg, LIS302DL_CTRL_REG2_ADDR, 1);
 800074c:	1dfb      	adds	r3, r7, #7
 800074e:	2201      	movs	r2, #1
 8000750:	2121      	movs	r1, #33	; 0x21
 8000752:	4618      	mov	r0, r3
 8000754:	f000 fde8 	bl	8001328 <ACCELERO_IO_Read>
  
  /* Enable or Disable the reboot memory */
  tmpreg |= LIS302DL_BOOT_REBOOTMEMORY;
 8000758:	79fb      	ldrb	r3, [r7, #7]
 800075a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800075e:	b2db      	uxtb	r3, r3
 8000760:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to MEMS CTRL_REG2 register */
  ACCELERO_IO_Write(&tmpreg, LIS302DL_CTRL_REG2_ADDR, 1);
 8000762:	1dfb      	adds	r3, r7, #7
 8000764:	2201      	movs	r2, #1
 8000766:	2121      	movs	r1, #33	; 0x21
 8000768:	4618      	mov	r0, r3
 800076a:	f000 fdab 	bl	80012c4 <ACCELERO_IO_Write>
}
 800076e:	bf00      	nop
 8000770:	3708      	adds	r7, #8
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}

08000776 <LIS302DL_ReadACC>:
  *         ACC[mg]=SENSITIVITY* (out_h*256+out_l)/16 (12 bit rappresentation)
  * @param  pfData: Data out pointer
  * @retval None
  */
void LIS302DL_ReadACC(int16_t *pData)
{
 8000776:	b580      	push	{r7, lr}
 8000778:	b088      	sub	sp, #32
 800077a:	af00      	add	r7, sp, #0
 800077c:	6078      	str	r0, [r7, #4]
  int8_t buffer[6];
  int16_t pnRawData[3];
  uint8_t sensitivity = LIS302DL_SENSITIVITY_2_3G;
 800077e:	2312      	movs	r3, #18
 8000780:	77fb      	strb	r3, [r7, #31]
  uint8_t crtl, i = 0x00;
 8000782:	2300      	movs	r3, #0
 8000784:	77bb      	strb	r3, [r7, #30]
  
  ACCELERO_IO_Read(&crtl, LIS302DL_CTRL_REG1_ADDR, 1);
 8000786:	f107 030f 	add.w	r3, r7, #15
 800078a:	2201      	movs	r2, #1
 800078c:	2120      	movs	r1, #32
 800078e:	4618      	mov	r0, r3
 8000790:	f000 fdca 	bl	8001328 <ACCELERO_IO_Read>
  ACCELERO_IO_Read((uint8_t*)buffer, LIS302DL_OUT_X_ADDR, 6);
 8000794:	f107 0318 	add.w	r3, r7, #24
 8000798:	2206      	movs	r2, #6
 800079a:	2129      	movs	r1, #41	; 0x29
 800079c:	4618      	mov	r0, r3
 800079e:	f000 fdc3 	bl	8001328 <ACCELERO_IO_Read>
  
  for(i=0; i<3; i++)
 80007a2:	2300      	movs	r3, #0
 80007a4:	77bb      	strb	r3, [r7, #30]
 80007a6:	e00f      	b.n	80007c8 <LIS302DL_ReadACC+0x52>
  {
    pnRawData[i] = buffer[2*i];
 80007a8:	7fbb      	ldrb	r3, [r7, #30]
 80007aa:	005b      	lsls	r3, r3, #1
 80007ac:	3320      	adds	r3, #32
 80007ae:	443b      	add	r3, r7
 80007b0:	f913 2c08 	ldrsb.w	r2, [r3, #-8]
 80007b4:	7fbb      	ldrb	r3, [r7, #30]
 80007b6:	b212      	sxth	r2, r2
 80007b8:	005b      	lsls	r3, r3, #1
 80007ba:	3320      	adds	r3, #32
 80007bc:	443b      	add	r3, r7
 80007be:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 80007c2:	7fbb      	ldrb	r3, [r7, #30]
 80007c4:	3301      	adds	r3, #1
 80007c6:	77bb      	strb	r3, [r7, #30]
 80007c8:	7fbb      	ldrb	r3, [r7, #30]
 80007ca:	2b02      	cmp	r3, #2
 80007cc:	d9ec      	bls.n	80007a8 <LIS302DL_ReadACC+0x32>
  }
  
  switch(crtl & LIS302DL_FULLSCALE_9_2) 
 80007ce:	7bfb      	ldrb	r3, [r7, #15]
 80007d0:	f003 0320 	and.w	r3, r3, #32
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d002      	beq.n	80007de <LIS302DL_ReadACC+0x68>
 80007d8:	2b20      	cmp	r3, #32
 80007da:	d003      	beq.n	80007e4 <LIS302DL_ReadACC+0x6e>
  case LIS302DL_FULLSCALE_9_2:
    sensitivity = LIS302DL_SENSITIVITY_9_2G;
    break;
    
  default:
    break;
 80007dc:	e005      	b.n	80007ea <LIS302DL_ReadACC+0x74>
    sensitivity = LIS302DL_SENSITIVITY_2_3G;
 80007de:	2312      	movs	r3, #18
 80007e0:	77fb      	strb	r3, [r7, #31]
    break;
 80007e2:	e002      	b.n	80007ea <LIS302DL_ReadACC+0x74>
    sensitivity = LIS302DL_SENSITIVITY_9_2G;
 80007e4:	2348      	movs	r3, #72	; 0x48
 80007e6:	77fb      	strb	r3, [r7, #31]
    break;
 80007e8:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 80007ea:	2300      	movs	r3, #0
 80007ec:	77bb      	strb	r3, [r7, #30]
 80007ee:	e014      	b.n	800081a <LIS302DL_ReadACC+0xa4>
  {
    pData[i]=(pnRawData[i] * sensitivity);
 80007f0:	7fbb      	ldrb	r3, [r7, #30]
 80007f2:	005b      	lsls	r3, r3, #1
 80007f4:	3320      	adds	r3, #32
 80007f6:	443b      	add	r3, r7
 80007f8:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 80007fc:	b29a      	uxth	r2, r3
 80007fe:	7ffb      	ldrb	r3, [r7, #31]
 8000800:	b29b      	uxth	r3, r3
 8000802:	fb12 f303 	smulbb	r3, r2, r3
 8000806:	b299      	uxth	r1, r3
 8000808:	7fbb      	ldrb	r3, [r7, #30]
 800080a:	005b      	lsls	r3, r3, #1
 800080c:	687a      	ldr	r2, [r7, #4]
 800080e:	4413      	add	r3, r2
 8000810:	b20a      	sxth	r2, r1
 8000812:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8000814:	7fbb      	ldrb	r3, [r7, #30]
 8000816:	3301      	adds	r3, #1
 8000818:	77bb      	strb	r3, [r7, #30]
 800081a:	7fbb      	ldrb	r3, [r7, #30]
 800081c:	2b02      	cmp	r3, #2
 800081e:	d9e7      	bls.n	80007f0 <LIS302DL_ReadACC+0x7a>
  }
}
 8000820:	bf00      	nop
 8000822:	bf00      	nop
 8000824:	3720      	adds	r7, #32
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}

0800082a <LIS3DSH_Init>:
  * @brief  Set LIS3DSH Initialization.
  * @param  InitStruct: contains mask of different init parameters
  * @retval None
  */
void LIS3DSH_Init(uint16_t InitStruct)
{
 800082a:	b580      	push	{r7, lr}
 800082c:	b084      	sub	sp, #16
 800082e:	af00      	add	r7, sp, #0
 8000830:	4603      	mov	r3, r0
 8000832:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8000834:	2300      	movs	r3, #0
 8000836:	73fb      	strb	r3, [r7, #15]
  
  /* Configure the low level interface */
  ACCELERO_IO_Init();
 8000838:	f000 fce6 	bl	8001208 <ACCELERO_IO_Init>

  /* Configure MEMS: power mode(ODR) and axes enable */
  ctrl = (uint8_t) (InitStruct);
 800083c:	88fb      	ldrh	r3, [r7, #6]
 800083e:	b2db      	uxtb	r3, r3
 8000840:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG4 register */
  ACCELERO_IO_Write(&ctrl, LIS3DSH_CTRL_REG4_ADDR, 1);
 8000842:	f107 030f 	add.w	r3, r7, #15
 8000846:	2201      	movs	r2, #1
 8000848:	2120      	movs	r1, #32
 800084a:	4618      	mov	r0, r3
 800084c:	f000 fd3a 	bl	80012c4 <ACCELERO_IO_Write>
  
  /* Configure MEMS: full scale and self test */
  ctrl = (uint8_t) (InitStruct >> 8);
 8000850:	88fb      	ldrh	r3, [r7, #6]
 8000852:	0a1b      	lsrs	r3, r3, #8
 8000854:	b29b      	uxth	r3, r3
 8000856:	b2db      	uxtb	r3, r3
 8000858:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG5 register */
  ACCELERO_IO_Write(&ctrl, LIS3DSH_CTRL_REG5_ADDR, 1);
 800085a:	f107 030f 	add.w	r3, r7, #15
 800085e:	2201      	movs	r2, #1
 8000860:	2124      	movs	r1, #36	; 0x24
 8000862:	4618      	mov	r0, r3
 8000864:	f000 fd2e 	bl	80012c4 <ACCELERO_IO_Write>
}
 8000868:	bf00      	nop
 800086a:	3710      	adds	r7, #16
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}

08000870 <LIS3DSH_DeInit>:
  * @brief  LIS3DSH De-Initialization.
  * @param  None
  * @retval None.
  */
void LIS3DSH_DeInit(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  
}
 8000874:	bf00      	nop
 8000876:	46bd      	mov	sp, r7
 8000878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087c:	4770      	bx	lr

0800087e <LIS3DSH_ReadID>:
  * @brief  Read LIS3DSH device ID.
  * @param  None
  * @retval The Device ID (two bytes).
  */
uint8_t LIS3DSH_ReadID(void)
{
 800087e:	b580      	push	{r7, lr}
 8000880:	b082      	sub	sp, #8
 8000882:	af00      	add	r7, sp, #0
  uint8_t tmp = 0;
 8000884:	2300      	movs	r3, #0
 8000886:	71fb      	strb	r3, [r7, #7]

  /* Configure the low level interface */
  ACCELERO_IO_Init();
 8000888:	f000 fcbe 	bl	8001208 <ACCELERO_IO_Init>

  /* Read WHO_AM_I register */
  ACCELERO_IO_Read(&tmp, LIS3DSH_WHO_AM_I_ADDR, 1);
 800088c:	1dfb      	adds	r3, r7, #7
 800088e:	2201      	movs	r2, #1
 8000890:	210f      	movs	r1, #15
 8000892:	4618      	mov	r0, r3
 8000894:	f000 fd48 	bl	8001328 <ACCELERO_IO_Read>
  
  /* Return the ID */
  return (uint16_t)tmp;
 8000898:	79fb      	ldrb	r3, [r7, #7]
}
 800089a:	4618      	mov	r0, r3
 800089c:	3708      	adds	r7, #8
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}

080008a2 <LIS3DSH_InterruptConfig>:
  * @param  LIS3DSH_InterruptConfig_TypeDef: pointer to a LIS3DSH_InterruptConfig_TypeDef 
  *         structure that contains the configuration setting for the LIS3DSH Interrupt.
  * @retval None
  */
void LIS3DSH_InterruptConfig(LIS3DSH_InterruptConfigTypeDef *LIS3DSH_IntConfigStruct)
{
 80008a2:	b580      	push	{r7, lr}
 80008a4:	b084      	sub	sp, #16
 80008a6:	af00      	add	r7, sp, #0
 80008a8:	6078      	str	r0, [r7, #4]
  uint8_t ctrl = 0x00;
 80008aa:	2300      	movs	r3, #0
 80008ac:	73fb      	strb	r3, [r7, #15]
  
  /* Configure Interrupt Selection , Request and Signal */                   
  ctrl = (uint8_t)(LIS3DSH_IntConfigStruct->Interrupt_Selection_Enable | \
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	785a      	ldrb	r2, [r3, #1]
                   LIS3DSH_IntConfigStruct->Interrupt_Request | \
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	781b      	ldrb	r3, [r3, #0]
  ctrl = (uint8_t)(LIS3DSH_IntConfigStruct->Interrupt_Selection_Enable | \
 80008b6:	4313      	orrs	r3, r2
 80008b8:	b2da      	uxtb	r2, r3
                   LIS3DSH_IntConfigStruct->Interrupt_Signal);
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	789b      	ldrb	r3, [r3, #2]
  ctrl = (uint8_t)(LIS3DSH_IntConfigStruct->Interrupt_Selection_Enable | \
 80008be:	4313      	orrs	r3, r2
 80008c0:	b2db      	uxtb	r3, r3
 80008c2:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG3 register */
  ACCELERO_IO_Write(&ctrl, LIS3DSH_CTRL_REG3_ADDR, 1);
 80008c4:	f107 030f 	add.w	r3, r7, #15
 80008c8:	2201      	movs	r2, #1
 80008ca:	2123      	movs	r1, #35	; 0x23
 80008cc:	4618      	mov	r0, r3
 80008ce:	f000 fcf9 	bl	80012c4 <ACCELERO_IO_Write>
  
  /* Configure State Machine 1 */                   
  ctrl = (uint8_t)(LIS3DSH_IntConfigStruct->State_Machine1_Enable | \
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	78da      	ldrb	r2, [r3, #3]
                   LIS3DSH_IntConfigStruct->State_Machine1_Interrupt);
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	791b      	ldrb	r3, [r3, #4]
  ctrl = (uint8_t)(LIS3DSH_IntConfigStruct->State_Machine1_Enable | \
 80008da:	4313      	orrs	r3, r2
 80008dc:	b2db      	uxtb	r3, r3
 80008de:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG1 register */
  ACCELERO_IO_Write(&ctrl, LIS3DSH_CTRL_REG1_ADDR, 1);
 80008e0:	f107 030f 	add.w	r3, r7, #15
 80008e4:	2201      	movs	r2, #1
 80008e6:	2121      	movs	r1, #33	; 0x21
 80008e8:	4618      	mov	r0, r3
 80008ea:	f000 fceb 	bl	80012c4 <ACCELERO_IO_Write>
  
  /* Configure State Machine 2 */                   
  ctrl = (uint8_t)(LIS3DSH_IntConfigStruct->State_Machine2_Enable | \
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	795a      	ldrb	r2, [r3, #5]
                   LIS3DSH_IntConfigStruct->State_Machine2_Interrupt);
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	799b      	ldrb	r3, [r3, #6]
  ctrl = (uint8_t)(LIS3DSH_IntConfigStruct->State_Machine2_Enable | \
 80008f6:	4313      	orrs	r3, r2
 80008f8:	b2db      	uxtb	r3, r3
 80008fa:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG2 register */
  ACCELERO_IO_Write(&ctrl, LIS3DSH_CTRL_REG2_ADDR, 1);
 80008fc:	f107 030f 	add.w	r3, r7, #15
 8000900:	2201      	movs	r2, #1
 8000902:	2122      	movs	r1, #34	; 0x22
 8000904:	4618      	mov	r0, r3
 8000906:	f000 fcdd 	bl	80012c4 <ACCELERO_IO_Write>
}
 800090a:	bf00      	nop
 800090c:	3710      	adds	r7, #16
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}

08000912 <LIS3DSH_Click_IntConfig>:
  * @brief  Set LIS3DSH for click detection
  * @param  None
  * @retval None
  */
void LIS3DSH_Click_IntConfig(void)
{
 8000912:	b580      	push	{r7, lr}
 8000914:	b082      	sub	sp, #8
 8000916:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8000918:	2300      	movs	r3, #0
 800091a:	71fb      	strb	r3, [r7, #7]
  LIS3DSH_InterruptConfigTypeDef   LIS3DSH_InterruptStruct; 

  ACCELERO_IO_ITConfig();
 800091c:	f000 fca2 	bl	8001264 <ACCELERO_IO_ITConfig>

  /* Set LIS3DSH Interrupt configuration */
  LIS3DSH_InterruptStruct.Interrupt_Selection_Enable = LIS3DSH_INTERRUPT_2_ENABLE;
 8000920:	2300      	movs	r3, #0
 8000922:	707b      	strb	r3, [r7, #1]
  LIS3DSH_InterruptStruct.Interrupt_Request = LIS3DSH_INTERRUPT_REQUEST_LATCHED;
 8000924:	2300      	movs	r3, #0
 8000926:	703b      	strb	r3, [r7, #0]
  LIS3DSH_InterruptStruct.Interrupt_Signal = LIS3DSH_INTERRUPT_SIGNAL_HIGH;
 8000928:	2340      	movs	r3, #64	; 0x40
 800092a:	70bb      	strb	r3, [r7, #2]
  LIS3DSH_InterruptStruct.State_Machine1_Enable = LIS3DSH_SM_DISABLE;
 800092c:	2300      	movs	r3, #0
 800092e:	70fb      	strb	r3, [r7, #3]
  LIS3DSH_InterruptStruct.State_Machine2_Enable = LIS3DSH_SM_ENABLE;
 8000930:	2301      	movs	r3, #1
 8000932:	717b      	strb	r3, [r7, #5]
  LIS3DSH_InterruptStruct.State_Machine2_Interrupt = LIS3DSH_SM_INT1;
 8000934:	2300      	movs	r3, #0
 8000936:	71bb      	strb	r3, [r7, #6]
  LIS3DSH_InterruptConfig(&LIS3DSH_InterruptStruct);
 8000938:	463b      	mov	r3, r7
 800093a:	4618      	mov	r0, r3
 800093c:	f7ff ffb1 	bl	80008a2 <LIS3DSH_InterruptConfig>
    
  /* Set LIS3DSH State Machines configuration */
  ctrl=0x03; 
 8000940:	2303      	movs	r3, #3
 8000942:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_TIM2_1_L_ADDR,1);
 8000944:	1dfb      	adds	r3, r7, #7
 8000946:	2201      	movs	r2, #1
 8000948:	2152      	movs	r1, #82	; 0x52
 800094a:	4618      	mov	r0, r3
 800094c:	f000 fcba 	bl	80012c4 <ACCELERO_IO_Write>
  ctrl=0xC8; 
 8000950:	23c8      	movs	r3, #200	; 0xc8
 8000952:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_TIM1_1_L_ADDR,1);
 8000954:	1dfb      	adds	r3, r7, #7
 8000956:	2201      	movs	r2, #1
 8000958:	2154      	movs	r1, #84	; 0x54
 800095a:	4618      	mov	r0, r3
 800095c:	f000 fcb2 	bl	80012c4 <ACCELERO_IO_Write>
  ctrl=0x45; 
 8000960:	2345      	movs	r3, #69	; 0x45
 8000962:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_THRS2_1_ADDR,1);
 8000964:	1dfb      	adds	r3, r7, #7
 8000966:	2201      	movs	r2, #1
 8000968:	2156      	movs	r1, #86	; 0x56
 800096a:	4618      	mov	r0, r3
 800096c:	f000 fcaa 	bl	80012c4 <ACCELERO_IO_Write>
  ctrl=0xFC; 
 8000970:	23fc      	movs	r3, #252	; 0xfc
 8000972:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_MASK1_A_ADDR,1);
 8000974:	1dfb      	adds	r3, r7, #7
 8000976:	2201      	movs	r2, #1
 8000978:	215a      	movs	r1, #90	; 0x5a
 800097a:	4618      	mov	r0, r3
 800097c:	f000 fca2 	bl	80012c4 <ACCELERO_IO_Write>
  ctrl=0xA1; 
 8000980:	23a1      	movs	r3, #161	; 0xa1
 8000982:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_SETT1_ADDR,1);
 8000984:	1dfb      	adds	r3, r7, #7
 8000986:	2201      	movs	r2, #1
 8000988:	215b      	movs	r1, #91	; 0x5b
 800098a:	4618      	mov	r0, r3
 800098c:	f000 fc9a 	bl	80012c4 <ACCELERO_IO_Write>
  ctrl=0x01; 
 8000990:	2301      	movs	r3, #1
 8000992:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_PR1_ADDR,1);
 8000994:	1dfb      	adds	r3, r7, #7
 8000996:	2201      	movs	r2, #1
 8000998:	215c      	movs	r1, #92	; 0x5c
 800099a:	4618      	mov	r0, r3
 800099c:	f000 fc92 	bl	80012c4 <ACCELERO_IO_Write>

  ACCELERO_IO_Write(&ctrl, LIS3DSH_SETT2_ADDR,1);
 80009a0:	1dfb      	adds	r3, r7, #7
 80009a2:	2201      	movs	r2, #1
 80009a4:	217b      	movs	r1, #123	; 0x7b
 80009a6:	4618      	mov	r0, r3
 80009a8:	f000 fc8c 	bl	80012c4 <ACCELERO_IO_Write>
  
  /* Configure State Machine 2 to detect single click */
  ACCELERO_IO_Write(&ctrl, LIS3DSH_ST2_1_ADDR,1);
 80009ac:	1dfb      	adds	r3, r7, #7
 80009ae:	2201      	movs	r2, #1
 80009b0:	2160      	movs	r1, #96	; 0x60
 80009b2:	4618      	mov	r0, r3
 80009b4:	f000 fc86 	bl	80012c4 <ACCELERO_IO_Write>
  ctrl=0x06; 
 80009b8:	2306      	movs	r3, #6
 80009ba:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_ST2_2_ADDR,1);
 80009bc:	1dfb      	adds	r3, r7, #7
 80009be:	2201      	movs	r2, #1
 80009c0:	2161      	movs	r1, #97	; 0x61
 80009c2:	4618      	mov	r0, r3
 80009c4:	f000 fc7e 	bl	80012c4 <ACCELERO_IO_Write>
  ctrl=0x28; 
 80009c8:	2328      	movs	r3, #40	; 0x28
 80009ca:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_ST2_3_ADDR,1);
 80009cc:	1dfb      	adds	r3, r7, #7
 80009ce:	2201      	movs	r2, #1
 80009d0:	2162      	movs	r1, #98	; 0x62
 80009d2:	4618      	mov	r0, r3
 80009d4:	f000 fc76 	bl	80012c4 <ACCELERO_IO_Write>
  ctrl=0x11; 
 80009d8:	2311      	movs	r3, #17
 80009da:	71fb      	strb	r3, [r7, #7]
  ACCELERO_IO_Write(&ctrl, LIS3DSH_ST2_4_ADDR,1);
 80009dc:	1dfb      	adds	r3, r7, #7
 80009de:	2201      	movs	r2, #1
 80009e0:	2163      	movs	r1, #99	; 0x63
 80009e2:	4618      	mov	r0, r3
 80009e4:	f000 fc6e 	bl	80012c4 <ACCELERO_IO_Write>
}
 80009e8:	bf00      	nop
 80009ea:	3708      	adds	r7, #8
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}

080009f0 <LIS3DSH_RebootCmd>:
  * @brief  Reboot memory content of LIS3DSH.
  * @param  None
  * @retval None
  */
void LIS3DSH_RebootCmd(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  /* Read CTRL_REG6 register */
  ACCELERO_IO_Read(&tmpreg, LIS3DSH_CTRL_REG6_ADDR, 1);
 80009f6:	1dfb      	adds	r3, r7, #7
 80009f8:	2201      	movs	r2, #1
 80009fa:	2125      	movs	r1, #37	; 0x25
 80009fc:	4618      	mov	r0, r3
 80009fe:	f000 fc93 	bl	8001328 <ACCELERO_IO_Read>
  
  /* Enable or Disable the reboot memory */
  tmpreg |= LIS3DSH_BOOT_FORCED;
 8000a02:	79fb      	ldrb	r3, [r7, #7]
 8000a04:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000a08:	b2db      	uxtb	r3, r3
 8000a0a:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to MEMS CTRL_REG6 register */
  ACCELERO_IO_Write(&tmpreg, LIS3DSH_CTRL_REG6_ADDR, 1);
 8000a0c:	1dfb      	adds	r3, r7, #7
 8000a0e:	2201      	movs	r2, #1
 8000a10:	2125      	movs	r1, #37	; 0x25
 8000a12:	4618      	mov	r0, r3
 8000a14:	f000 fc56 	bl	80012c4 <ACCELERO_IO_Write>
}
 8000a18:	bf00      	nop
 8000a1a:	3708      	adds	r7, #8
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}

08000a20 <LIS3DSH_ReadACC>:
  *         ACC[mg]=SENSITIVITY* (out_h*256+out_l)/16 (12 bit representation).
  * @param  pointer on floating buffer.
  * @retval None
  */
void LIS3DSH_ReadACC(int16_t *pData)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b088      	sub	sp, #32
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  int8_t buffer[6];
  uint8_t crtl, i = 0x00;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	77fb      	strb	r3, [r7, #31]
  float sensitivity = LIS3DSH_SENSITIVITY_0_06G;
 8000a2c:	4b64      	ldr	r3, [pc, #400]	; (8000bc0 <LIS3DSH_ReadACC+0x1a0>)
 8000a2e:	61bb      	str	r3, [r7, #24]
  float valueinfloat = 0;
 8000a30:	f04f 0300 	mov.w	r3, #0
 8000a34:	617b      	str	r3, [r7, #20]
  
  ACCELERO_IO_Read(&crtl, LIS3DSH_CTRL_REG5_ADDR, 1);  
 8000a36:	f107 030b 	add.w	r3, r7, #11
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	2124      	movs	r1, #36	; 0x24
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f000 fc72 	bl	8001328 <ACCELERO_IO_Read>
  ACCELERO_IO_Read((uint8_t*)&buffer[0], LIS3DSH_OUT_X_L_ADDR, 1);
 8000a44:	f107 030c 	add.w	r3, r7, #12
 8000a48:	2201      	movs	r2, #1
 8000a4a:	2128      	movs	r1, #40	; 0x28
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f000 fc6b 	bl	8001328 <ACCELERO_IO_Read>
  ACCELERO_IO_Read((uint8_t*)&buffer[1], LIS3DSH_OUT_X_H_ADDR, 1);
 8000a52:	f107 030c 	add.w	r3, r7, #12
 8000a56:	3301      	adds	r3, #1
 8000a58:	2201      	movs	r2, #1
 8000a5a:	2129      	movs	r1, #41	; 0x29
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f000 fc63 	bl	8001328 <ACCELERO_IO_Read>
  ACCELERO_IO_Read((uint8_t*)&buffer[2], LIS3DSH_OUT_Y_L_ADDR, 1);
 8000a62:	f107 030c 	add.w	r3, r7, #12
 8000a66:	3302      	adds	r3, #2
 8000a68:	2201      	movs	r2, #1
 8000a6a:	212a      	movs	r1, #42	; 0x2a
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f000 fc5b 	bl	8001328 <ACCELERO_IO_Read>
  ACCELERO_IO_Read((uint8_t*)&buffer[3], LIS3DSH_OUT_Y_H_ADDR, 1);
 8000a72:	f107 030c 	add.w	r3, r7, #12
 8000a76:	3303      	adds	r3, #3
 8000a78:	2201      	movs	r2, #1
 8000a7a:	212b      	movs	r1, #43	; 0x2b
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f000 fc53 	bl	8001328 <ACCELERO_IO_Read>
  ACCELERO_IO_Read((uint8_t*)&buffer[4], LIS3DSH_OUT_Z_L_ADDR, 1);
 8000a82:	f107 030c 	add.w	r3, r7, #12
 8000a86:	3304      	adds	r3, #4
 8000a88:	2201      	movs	r2, #1
 8000a8a:	212c      	movs	r1, #44	; 0x2c
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f000 fc4b 	bl	8001328 <ACCELERO_IO_Read>
  ACCELERO_IO_Read((uint8_t*)&buffer[5], LIS3DSH_OUT_Z_H_ADDR, 1);
 8000a92:	f107 030c 	add.w	r3, r7, #12
 8000a96:	3305      	adds	r3, #5
 8000a98:	2201      	movs	r2, #1
 8000a9a:	212d      	movs	r1, #45	; 0x2d
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f000 fc43 	bl	8001328 <ACCELERO_IO_Read>
  
  switch(crtl & LIS3DSH__FULLSCALE_SELECTION) 
 8000aa2:	7afb      	ldrb	r3, [r7, #11]
 8000aa4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8000aa8:	2b20      	cmp	r3, #32
 8000aaa:	d854      	bhi.n	8000b56 <LIS3DSH_ReadACC+0x136>
 8000aac:	a201      	add	r2, pc, #4	; (adr r2, 8000ab4 <LIS3DSH_ReadACC+0x94>)
 8000aae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ab2:	bf00      	nop
 8000ab4:	08000b39 	.word	0x08000b39
 8000ab8:	08000b57 	.word	0x08000b57
 8000abc:	08000b57 	.word	0x08000b57
 8000ac0:	08000b57 	.word	0x08000b57
 8000ac4:	08000b57 	.word	0x08000b57
 8000ac8:	08000b57 	.word	0x08000b57
 8000acc:	08000b57 	.word	0x08000b57
 8000ad0:	08000b57 	.word	0x08000b57
 8000ad4:	08000b3f 	.word	0x08000b3f
 8000ad8:	08000b57 	.word	0x08000b57
 8000adc:	08000b57 	.word	0x08000b57
 8000ae0:	08000b57 	.word	0x08000b57
 8000ae4:	08000b57 	.word	0x08000b57
 8000ae8:	08000b57 	.word	0x08000b57
 8000aec:	08000b57 	.word	0x08000b57
 8000af0:	08000b57 	.word	0x08000b57
 8000af4:	08000b45 	.word	0x08000b45
 8000af8:	08000b57 	.word	0x08000b57
 8000afc:	08000b57 	.word	0x08000b57
 8000b00:	08000b57 	.word	0x08000b57
 8000b04:	08000b57 	.word	0x08000b57
 8000b08:	08000b57 	.word	0x08000b57
 8000b0c:	08000b57 	.word	0x08000b57
 8000b10:	08000b57 	.word	0x08000b57
 8000b14:	08000b4b 	.word	0x08000b4b
 8000b18:	08000b57 	.word	0x08000b57
 8000b1c:	08000b57 	.word	0x08000b57
 8000b20:	08000b57 	.word	0x08000b57
 8000b24:	08000b57 	.word	0x08000b57
 8000b28:	08000b57 	.word	0x08000b57
 8000b2c:	08000b57 	.word	0x08000b57
 8000b30:	08000b57 	.word	0x08000b57
 8000b34:	08000b51 	.word	0x08000b51
  {
    /* FS bit = 000 ==> Sensitivity typical value = 0.06milligals/digit */ 
  case LIS3DSH_FULLSCALE_2:
    sensitivity = LIS3DSH_SENSITIVITY_0_06G;
 8000b38:	4b21      	ldr	r3, [pc, #132]	; (8000bc0 <LIS3DSH_ReadACC+0x1a0>)
 8000b3a:	61bb      	str	r3, [r7, #24]
    break;
 8000b3c:	e00c      	b.n	8000b58 <LIS3DSH_ReadACC+0x138>
    
    /* FS bit = 001 ==> Sensitivity typical value = 0.12milligals/digit */ 
  case LIS3DSH_FULLSCALE_4:
    sensitivity = LIS3DSH_SENSITIVITY_0_12G;
 8000b3e:	4b21      	ldr	r3, [pc, #132]	; (8000bc4 <LIS3DSH_ReadACC+0x1a4>)
 8000b40:	61bb      	str	r3, [r7, #24]
    break;
 8000b42:	e009      	b.n	8000b58 <LIS3DSH_ReadACC+0x138>
    
    /* FS bit = 010 ==> Sensitivity typical value = 0.18milligals/digit */ 
  case LIS3DSH_FULLSCALE_6:
    sensitivity = LIS3DSH_SENSITIVITY_0_18G;
 8000b44:	4b20      	ldr	r3, [pc, #128]	; (8000bc8 <LIS3DSH_ReadACC+0x1a8>)
 8000b46:	61bb      	str	r3, [r7, #24]
    break;
 8000b48:	e006      	b.n	8000b58 <LIS3DSH_ReadACC+0x138>
    
    /* FS bit = 011 ==> Sensitivity typical value = 0.24milligals/digit */ 
  case LIS3DSH_FULLSCALE_8:
    sensitivity = LIS3DSH_SENSITIVITY_0_24G;
 8000b4a:	4b20      	ldr	r3, [pc, #128]	; (8000bcc <LIS3DSH_ReadACC+0x1ac>)
 8000b4c:	61bb      	str	r3, [r7, #24]
    break;
 8000b4e:	e003      	b.n	8000b58 <LIS3DSH_ReadACC+0x138>
    
    /* FS bit = 100 ==> Sensitivity typical value = 0.73milligals/digit */ 
  case LIS3DSH_FULLSCALE_16:
    sensitivity = LIS3DSH_SENSITIVITY_0_73G;
 8000b50:	4b1f      	ldr	r3, [pc, #124]	; (8000bd0 <LIS3DSH_ReadACC+0x1b0>)
 8000b52:	61bb      	str	r3, [r7, #24]
    break;
 8000b54:	e000      	b.n	8000b58 <LIS3DSH_ReadACC+0x138>
    
  default:
    break;
 8000b56:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8000b58:	2300      	movs	r3, #0
 8000b5a:	77fb      	strb	r3, [r7, #31]
 8000b5c:	e027      	b.n	8000bae <LIS3DSH_ReadACC+0x18e>
  {
    valueinfloat = ((buffer[2*i+1] << 8) + buffer[2*i]) * sensitivity;
 8000b5e:	7ffb      	ldrb	r3, [r7, #31]
 8000b60:	005b      	lsls	r3, r3, #1
 8000b62:	3301      	adds	r3, #1
 8000b64:	3320      	adds	r3, #32
 8000b66:	443b      	add	r3, r7
 8000b68:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8000b6c:	021b      	lsls	r3, r3, #8
 8000b6e:	7ffa      	ldrb	r2, [r7, #31]
 8000b70:	0052      	lsls	r2, r2, #1
 8000b72:	3220      	adds	r2, #32
 8000b74:	443a      	add	r2, r7
 8000b76:	f912 2c14 	ldrsb.w	r2, [r2, #-20]
 8000b7a:	4413      	add	r3, r2
 8000b7c:	ee07 3a90 	vmov	s15, r3
 8000b80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b84:	ed97 7a06 	vldr	s14, [r7, #24]
 8000b88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b8c:	edc7 7a05 	vstr	s15, [r7, #20]
    pData[i] = (int16_t)valueinfloat;
 8000b90:	7ffb      	ldrb	r3, [r7, #31]
 8000b92:	005b      	lsls	r3, r3, #1
 8000b94:	687a      	ldr	r2, [r7, #4]
 8000b96:	4413      	add	r3, r2
 8000b98:	edd7 7a05 	vldr	s15, [r7, #20]
 8000b9c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ba0:	ee17 2a90 	vmov	r2, s15
 8000ba4:	b212      	sxth	r2, r2
 8000ba6:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8000ba8:	7ffb      	ldrb	r3, [r7, #31]
 8000baa:	3301      	adds	r3, #1
 8000bac:	77fb      	strb	r3, [r7, #31]
 8000bae:	7ffb      	ldrb	r3, [r7, #31]
 8000bb0:	2b02      	cmp	r3, #2
 8000bb2:	d9d4      	bls.n	8000b5e <LIS3DSH_ReadACC+0x13e>
  }
}
 8000bb4:	bf00      	nop
 8000bb6:	bf00      	nop
 8000bb8:	3720      	adds	r7, #32
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	3d75c28f 	.word	0x3d75c28f
 8000bc4:	3df5c28f 	.word	0x3df5c28f
 8000bc8:	3e3851ec 	.word	0x3e3851ec
 8000bcc:	3e75c28f 	.word	0x3e75c28f
 8000bd0:	3f3ae148 	.word	0x3f3ae148

08000bd4 <USBRxHandler>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void USBRxHandler(uint8_t* buf, uint16_t len){
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
 8000bdc:	460b      	mov	r3, r1
 8000bde:	807b      	strh	r3, [r7, #2]
	if(strncmp(buf, "Hi", len) == 0){      // if it is 0, it means they are equal
 8000be0:	887b      	ldrh	r3, [r7, #2]
 8000be2:	461a      	mov	r2, r3
 8000be4:	4907      	ldr	r1, [pc, #28]	; (8000c04 <USBRxHandler+0x30>)
 8000be6:	6878      	ldr	r0, [r7, #4]
 8000be8:	f008 fe46 	bl	8009878 <strncmp>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d104      	bne.n	8000bfc <USBRxHandler+0x28>
		CDC_Transmit_FS("Welcome\r\n", 9);
 8000bf2:	2109      	movs	r1, #9
 8000bf4:	4804      	ldr	r0, [pc, #16]	; (8000c08 <USBRxHandler+0x34>)
 8000bf6:	f008 f983 	bl	8008f00 <CDC_Transmit_FS>
	}
	return;
 8000bfa:	bf00      	nop
 8000bfc:	bf00      	nop
}
 8000bfe:	3708      	adds	r7, #8
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	0800a154 	.word	0x0800a154
 8000c08:	0800a158 	.word	0x0800a158

08000c0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c12:	f000 fe77 	bl	8001904 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c16:	f000 f859 	bl	8000ccc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c1a:	f000 f955 	bl	8000ec8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000c1e:	f000 f8bf 	bl	8000da0 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000c22:	f000 f8eb 	bl	8000dfc <MX_I2S3_Init>
  MX_SPI1_Init();
 8000c26:	f000 f919 	bl	8000e5c <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8000c2a:	f008 f85f 	bl	8008cec <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
if (BSP_ACCELERO_Init() != ACCELERO_OK){
 8000c2e:	f000 fbb5 	bl	800139c <BSP_ACCELERO_Init>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d00d      	beq.n	8000c54 <main+0x48>
	while(1){
		CDC_Transmit_FS("Accelero error\r\n",16);
 8000c38:	2110      	movs	r1, #16
 8000c3a:	481d      	ldr	r0, [pc, #116]	; (8000cb0 <main+0xa4>)
 8000c3c:	f008 f960 	bl	8008f00 <CDC_Transmit_FS>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8000c40:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c44:	481b      	ldr	r0, [pc, #108]	; (8000cb4 <main+0xa8>)
 8000c46:	f001 face 	bl	80021e6 <HAL_GPIO_TogglePin>
		HAL_Delay(500);
 8000c4a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c4e:	f000 fecb 	bl	80019e8 <HAL_Delay>
	while(1){
 8000c52:	e7f1      	b.n	8000c38 <main+0x2c>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //HAL_ADC_Start_IT(&hadc1);
	  click = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8000c54:	2101      	movs	r1, #1
 8000c56:	4818      	ldr	r0, [pc, #96]	; (8000cb8 <main+0xac>)
 8000c58:	f001 fa94 	bl	8002184 <HAL_GPIO_ReadPin>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	461a      	mov	r2, r3
 8000c60:	4b16      	ldr	r3, [pc, #88]	; (8000cbc <main+0xb0>)
 8000c62:	701a      	strb	r2, [r3, #0]
	  BSP_ACCELERO_GetXYZ(accData);
 8000c64:	4816      	ldr	r0, [pc, #88]	; (8000cc0 <main+0xb4>)
 8000c66:	f000 fc25 	bl	80014b4 <BSP_ACCELERO_GetXYZ>

	  sprintf(strTemp,"%d,%d,%d,%d\r\n",accData[0],accData[1],accData[2],click);
 8000c6a:	4b15      	ldr	r3, [pc, #84]	; (8000cc0 <main+0xb4>)
 8000c6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c70:	4619      	mov	r1, r3
 8000c72:	4b13      	ldr	r3, [pc, #76]	; (8000cc0 <main+0xb4>)
 8000c74:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000c78:	4618      	mov	r0, r3
 8000c7a:	4b11      	ldr	r3, [pc, #68]	; (8000cc0 <main+0xb4>)
 8000c7c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000c80:	461a      	mov	r2, r3
 8000c82:	4b0e      	ldr	r3, [pc, #56]	; (8000cbc <main+0xb0>)
 8000c84:	781b      	ldrb	r3, [r3, #0]
 8000c86:	9301      	str	r3, [sp, #4]
 8000c88:	9200      	str	r2, [sp, #0]
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	460a      	mov	r2, r1
 8000c8e:	490d      	ldr	r1, [pc, #52]	; (8000cc4 <main+0xb8>)
 8000c90:	480d      	ldr	r0, [pc, #52]	; (8000cc8 <main+0xbc>)
 8000c92:	f008 fdd1 	bl	8009838 <siprintf>
	  CDC_Transmit_FS(strTemp, strlen(strTemp));
 8000c96:	480c      	ldr	r0, [pc, #48]	; (8000cc8 <main+0xbc>)
 8000c98:	f7ff fa9a 	bl	80001d0 <strlen>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	4809      	ldr	r0, [pc, #36]	; (8000cc8 <main+0xbc>)
 8000ca2:	f008 f92d 	bl	8008f00 <CDC_Transmit_FS>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	//  CDC_Transmit_FS("Hello\r\n",7);
	//  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
	  HAL_Delay(100);
 8000ca6:	2064      	movs	r0, #100	; 0x64
 8000ca8:	f000 fe9e 	bl	80019e8 <HAL_Delay>
  {
 8000cac:	e7d2      	b.n	8000c54 <main+0x48>
 8000cae:	bf00      	nop
 8000cb0:	0800a164 	.word	0x0800a164
 8000cb4:	40020c00 	.word	0x40020c00
 8000cb8:	40020000 	.word	0x40020000
 8000cbc:	20000348 	.word	0x20000348
 8000cc0:	200002dc 	.word	0x200002dc
 8000cc4:	0800a178 	.word	0x0800a178
 8000cc8:	200002e4 	.word	0x200002e4

08000ccc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b094      	sub	sp, #80	; 0x50
 8000cd0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cd2:	f107 0320 	add.w	r3, r7, #32
 8000cd6:	2230      	movs	r2, #48	; 0x30
 8000cd8:	2100      	movs	r1, #0
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f008 fda4 	bl	8009828 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ce0:	f107 030c 	add.w	r3, r7, #12
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	601a      	str	r2, [r3, #0]
 8000ce8:	605a      	str	r2, [r3, #4]
 8000cea:	609a      	str	r2, [r3, #8]
 8000cec:	60da      	str	r2, [r3, #12]
 8000cee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	60bb      	str	r3, [r7, #8]
 8000cf4:	4b28      	ldr	r3, [pc, #160]	; (8000d98 <SystemClock_Config+0xcc>)
 8000cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf8:	4a27      	ldr	r2, [pc, #156]	; (8000d98 <SystemClock_Config+0xcc>)
 8000cfa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cfe:	6413      	str	r3, [r2, #64]	; 0x40
 8000d00:	4b25      	ldr	r3, [pc, #148]	; (8000d98 <SystemClock_Config+0xcc>)
 8000d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d08:	60bb      	str	r3, [r7, #8]
 8000d0a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	607b      	str	r3, [r7, #4]
 8000d10:	4b22      	ldr	r3, [pc, #136]	; (8000d9c <SystemClock_Config+0xd0>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a21      	ldr	r2, [pc, #132]	; (8000d9c <SystemClock_Config+0xd0>)
 8000d16:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d1a:	6013      	str	r3, [r2, #0]
 8000d1c:	4b1f      	ldr	r3, [pc, #124]	; (8000d9c <SystemClock_Config+0xd0>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d24:	607b      	str	r3, [r7, #4]
 8000d26:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d28:	2301      	movs	r3, #1
 8000d2a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d2c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d30:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d32:	2302      	movs	r3, #2
 8000d34:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d36:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000d3c:	2308      	movs	r3, #8
 8000d3e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000d40:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000d44:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d46:	2302      	movs	r3, #2
 8000d48:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000d4a:	2307      	movs	r3, #7
 8000d4c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d4e:	f107 0320 	add.w	r3, r7, #32
 8000d52:	4618      	mov	r0, r3
 8000d54:	f003 fac4 	bl	80042e0 <HAL_RCC_OscConfig>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d001      	beq.n	8000d62 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000d5e:	f000 f9af 	bl	80010c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d62:	230f      	movs	r3, #15
 8000d64:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d66:	2302      	movs	r3, #2
 8000d68:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000d6e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000d72:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000d74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d78:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000d7a:	f107 030c 	add.w	r3, r7, #12
 8000d7e:	2105      	movs	r1, #5
 8000d80:	4618      	mov	r0, r3
 8000d82:	f003 fd25 	bl	80047d0 <HAL_RCC_ClockConfig>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d001      	beq.n	8000d90 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000d8c:	f000 f998 	bl	80010c0 <Error_Handler>
  }
}
 8000d90:	bf00      	nop
 8000d92:	3750      	adds	r7, #80	; 0x50
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	40023800 	.word	0x40023800
 8000d9c:	40007000 	.word	0x40007000

08000da0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000da4:	4b12      	ldr	r3, [pc, #72]	; (8000df0 <MX_I2C1_Init+0x50>)
 8000da6:	4a13      	ldr	r2, [pc, #76]	; (8000df4 <MX_I2C1_Init+0x54>)
 8000da8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000daa:	4b11      	ldr	r3, [pc, #68]	; (8000df0 <MX_I2C1_Init+0x50>)
 8000dac:	4a12      	ldr	r2, [pc, #72]	; (8000df8 <MX_I2C1_Init+0x58>)
 8000dae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000db0:	4b0f      	ldr	r3, [pc, #60]	; (8000df0 <MX_I2C1_Init+0x50>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000db6:	4b0e      	ldr	r3, [pc, #56]	; (8000df0 <MX_I2C1_Init+0x50>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000dbc:	4b0c      	ldr	r3, [pc, #48]	; (8000df0 <MX_I2C1_Init+0x50>)
 8000dbe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000dc2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000dc4:	4b0a      	ldr	r3, [pc, #40]	; (8000df0 <MX_I2C1_Init+0x50>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000dca:	4b09      	ldr	r3, [pc, #36]	; (8000df0 <MX_I2C1_Init+0x50>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000dd0:	4b07      	ldr	r3, [pc, #28]	; (8000df0 <MX_I2C1_Init+0x50>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000dd6:	4b06      	ldr	r3, [pc, #24]	; (8000df0 <MX_I2C1_Init+0x50>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ddc:	4804      	ldr	r0, [pc, #16]	; (8000df0 <MX_I2C1_Init+0x50>)
 8000dde:	f001 fa1d 	bl	800221c <HAL_I2C_Init>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000de8:	f000 f96a 	bl	80010c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000dec:	bf00      	nop
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	200001e8 	.word	0x200001e8
 8000df4:	40005400 	.word	0x40005400
 8000df8:	000186a0 	.word	0x000186a0

08000dfc <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000e00:	4b13      	ldr	r3, [pc, #76]	; (8000e50 <MX_I2S3_Init+0x54>)
 8000e02:	4a14      	ldr	r2, [pc, #80]	; (8000e54 <MX_I2S3_Init+0x58>)
 8000e04:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000e06:	4b12      	ldr	r3, [pc, #72]	; (8000e50 <MX_I2S3_Init+0x54>)
 8000e08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e0c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000e0e:	4b10      	ldr	r3, [pc, #64]	; (8000e50 <MX_I2S3_Init+0x54>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000e14:	4b0e      	ldr	r3, [pc, #56]	; (8000e50 <MX_I2S3_Init+0x54>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000e1a:	4b0d      	ldr	r3, [pc, #52]	; (8000e50 <MX_I2S3_Init+0x54>)
 8000e1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e20:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000e22:	4b0b      	ldr	r3, [pc, #44]	; (8000e50 <MX_I2S3_Init+0x54>)
 8000e24:	4a0c      	ldr	r2, [pc, #48]	; (8000e58 <MX_I2S3_Init+0x5c>)
 8000e26:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000e28:	4b09      	ldr	r3, [pc, #36]	; (8000e50 <MX_I2S3_Init+0x54>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000e2e:	4b08      	ldr	r3, [pc, #32]	; (8000e50 <MX_I2S3_Init+0x54>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000e34:	4b06      	ldr	r3, [pc, #24]	; (8000e50 <MX_I2S3_Init+0x54>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000e3a:	4805      	ldr	r0, [pc, #20]	; (8000e50 <MX_I2S3_Init+0x54>)
 8000e3c:	f001 fb32 	bl	80024a4 <HAL_I2S_Init>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000e46:	f000 f93b 	bl	80010c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000e4a:	bf00      	nop
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	2000023c 	.word	0x2000023c
 8000e54:	40003c00 	.word	0x40003c00
 8000e58:	00017700 	.word	0x00017700

08000e5c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000e60:	4b17      	ldr	r3, [pc, #92]	; (8000ec0 <MX_SPI1_Init+0x64>)
 8000e62:	4a18      	ldr	r2, [pc, #96]	; (8000ec4 <MX_SPI1_Init+0x68>)
 8000e64:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e66:	4b16      	ldr	r3, [pc, #88]	; (8000ec0 <MX_SPI1_Init+0x64>)
 8000e68:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000e6c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000e6e:	4b14      	ldr	r3, [pc, #80]	; (8000ec0 <MX_SPI1_Init+0x64>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e74:	4b12      	ldr	r3, [pc, #72]	; (8000ec0 <MX_SPI1_Init+0x64>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e7a:	4b11      	ldr	r3, [pc, #68]	; (8000ec0 <MX_SPI1_Init+0x64>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e80:	4b0f      	ldr	r3, [pc, #60]	; (8000ec0 <MX_SPI1_Init+0x64>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000e86:	4b0e      	ldr	r3, [pc, #56]	; (8000ec0 <MX_SPI1_Init+0x64>)
 8000e88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e8c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000e8e:	4b0c      	ldr	r3, [pc, #48]	; (8000ec0 <MX_SPI1_Init+0x64>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e94:	4b0a      	ldr	r3, [pc, #40]	; (8000ec0 <MX_SPI1_Init+0x64>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e9a:	4b09      	ldr	r3, [pc, #36]	; (8000ec0 <MX_SPI1_Init+0x64>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ea0:	4b07      	ldr	r3, [pc, #28]	; (8000ec0 <MX_SPI1_Init+0x64>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000ea6:	4b06      	ldr	r3, [pc, #24]	; (8000ec0 <MX_SPI1_Init+0x64>)
 8000ea8:	220a      	movs	r2, #10
 8000eaa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000eac:	4804      	ldr	r0, [pc, #16]	; (8000ec0 <MX_SPI1_Init+0x64>)
 8000eae:	f003 ffdb 	bl	8004e68 <HAL_SPI_Init>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d001      	beq.n	8000ebc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000eb8:	f000 f902 	bl	80010c0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000ebc:	bf00      	nop
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	20000284 	.word	0x20000284
 8000ec4:	40013000 	.word	0x40013000

08000ec8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b08c      	sub	sp, #48	; 0x30
 8000ecc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ece:	f107 031c 	add.w	r3, r7, #28
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	601a      	str	r2, [r3, #0]
 8000ed6:	605a      	str	r2, [r3, #4]
 8000ed8:	609a      	str	r2, [r3, #8]
 8000eda:	60da      	str	r2, [r3, #12]
 8000edc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ede:	2300      	movs	r3, #0
 8000ee0:	61bb      	str	r3, [r7, #24]
 8000ee2:	4b71      	ldr	r3, [pc, #452]	; (80010a8 <MX_GPIO_Init+0x1e0>)
 8000ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee6:	4a70      	ldr	r2, [pc, #448]	; (80010a8 <MX_GPIO_Init+0x1e0>)
 8000ee8:	f043 0310 	orr.w	r3, r3, #16
 8000eec:	6313      	str	r3, [r2, #48]	; 0x30
 8000eee:	4b6e      	ldr	r3, [pc, #440]	; (80010a8 <MX_GPIO_Init+0x1e0>)
 8000ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef2:	f003 0310 	and.w	r3, r3, #16
 8000ef6:	61bb      	str	r3, [r7, #24]
 8000ef8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000efa:	2300      	movs	r3, #0
 8000efc:	617b      	str	r3, [r7, #20]
 8000efe:	4b6a      	ldr	r3, [pc, #424]	; (80010a8 <MX_GPIO_Init+0x1e0>)
 8000f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f02:	4a69      	ldr	r2, [pc, #420]	; (80010a8 <MX_GPIO_Init+0x1e0>)
 8000f04:	f043 0304 	orr.w	r3, r3, #4
 8000f08:	6313      	str	r3, [r2, #48]	; 0x30
 8000f0a:	4b67      	ldr	r3, [pc, #412]	; (80010a8 <MX_GPIO_Init+0x1e0>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0e:	f003 0304 	and.w	r3, r3, #4
 8000f12:	617b      	str	r3, [r7, #20]
 8000f14:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f16:	2300      	movs	r3, #0
 8000f18:	613b      	str	r3, [r7, #16]
 8000f1a:	4b63      	ldr	r3, [pc, #396]	; (80010a8 <MX_GPIO_Init+0x1e0>)
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1e:	4a62      	ldr	r2, [pc, #392]	; (80010a8 <MX_GPIO_Init+0x1e0>)
 8000f20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f24:	6313      	str	r3, [r2, #48]	; 0x30
 8000f26:	4b60      	ldr	r3, [pc, #384]	; (80010a8 <MX_GPIO_Init+0x1e0>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f2e:	613b      	str	r3, [r7, #16]
 8000f30:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f32:	2300      	movs	r3, #0
 8000f34:	60fb      	str	r3, [r7, #12]
 8000f36:	4b5c      	ldr	r3, [pc, #368]	; (80010a8 <MX_GPIO_Init+0x1e0>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3a:	4a5b      	ldr	r2, [pc, #364]	; (80010a8 <MX_GPIO_Init+0x1e0>)
 8000f3c:	f043 0301 	orr.w	r3, r3, #1
 8000f40:	6313      	str	r3, [r2, #48]	; 0x30
 8000f42:	4b59      	ldr	r3, [pc, #356]	; (80010a8 <MX_GPIO_Init+0x1e0>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f46:	f003 0301 	and.w	r3, r3, #1
 8000f4a:	60fb      	str	r3, [r7, #12]
 8000f4c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f4e:	2300      	movs	r3, #0
 8000f50:	60bb      	str	r3, [r7, #8]
 8000f52:	4b55      	ldr	r3, [pc, #340]	; (80010a8 <MX_GPIO_Init+0x1e0>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f56:	4a54      	ldr	r2, [pc, #336]	; (80010a8 <MX_GPIO_Init+0x1e0>)
 8000f58:	f043 0302 	orr.w	r3, r3, #2
 8000f5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f5e:	4b52      	ldr	r3, [pc, #328]	; (80010a8 <MX_GPIO_Init+0x1e0>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f62:	f003 0302 	and.w	r3, r3, #2
 8000f66:	60bb      	str	r3, [r7, #8]
 8000f68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	607b      	str	r3, [r7, #4]
 8000f6e:	4b4e      	ldr	r3, [pc, #312]	; (80010a8 <MX_GPIO_Init+0x1e0>)
 8000f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f72:	4a4d      	ldr	r2, [pc, #308]	; (80010a8 <MX_GPIO_Init+0x1e0>)
 8000f74:	f043 0308 	orr.w	r3, r3, #8
 8000f78:	6313      	str	r3, [r2, #48]	; 0x30
 8000f7a:	4b4b      	ldr	r3, [pc, #300]	; (80010a8 <MX_GPIO_Init+0x1e0>)
 8000f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7e:	f003 0308 	and.w	r3, r3, #8
 8000f82:	607b      	str	r3, [r7, #4]
 8000f84:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000f86:	2200      	movs	r2, #0
 8000f88:	2108      	movs	r1, #8
 8000f8a:	4848      	ldr	r0, [pc, #288]	; (80010ac <MX_GPIO_Init+0x1e4>)
 8000f8c:	f001 f912 	bl	80021b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000f90:	2201      	movs	r2, #1
 8000f92:	2101      	movs	r1, #1
 8000f94:	4846      	ldr	r0, [pc, #280]	; (80010b0 <MX_GPIO_Init+0x1e8>)
 8000f96:	f001 f90d 	bl	80021b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000fa0:	4844      	ldr	r0, [pc, #272]	; (80010b4 <MX_GPIO_Init+0x1ec>)
 8000fa2:	f001 f907 	bl	80021b4 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000fa6:	2308      	movs	r3, #8
 8000fa8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000faa:	2301      	movs	r3, #1
 8000fac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000fb6:	f107 031c 	add.w	r3, r7, #28
 8000fba:	4619      	mov	r1, r3
 8000fbc:	483b      	ldr	r0, [pc, #236]	; (80010ac <MX_GPIO_Init+0x1e4>)
 8000fbe:	f000 fe49 	bl	8001c54 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000fd2:	f107 031c 	add.w	r3, r7, #28
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	4835      	ldr	r0, [pc, #212]	; (80010b0 <MX_GPIO_Init+0x1e8>)
 8000fda:	f000 fe3b 	bl	8001c54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000fde:	2308      	movs	r3, #8
 8000fe0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe2:	2302      	movs	r3, #2
 8000fe4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fea:	2300      	movs	r3, #0
 8000fec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000fee:	2305      	movs	r3, #5
 8000ff0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000ff2:	f107 031c 	add.w	r3, r7, #28
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	482d      	ldr	r0, [pc, #180]	; (80010b0 <MX_GPIO_Init+0x1e8>)
 8000ffa:	f000 fe2b 	bl	8001c54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ffe:	2301      	movs	r3, #1
 8001000:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001002:	2300      	movs	r3, #0
 8001004:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001006:	2300      	movs	r3, #0
 8001008:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800100a:	f107 031c 	add.w	r3, r7, #28
 800100e:	4619      	mov	r1, r3
 8001010:	4829      	ldr	r0, [pc, #164]	; (80010b8 <MX_GPIO_Init+0x1f0>)
 8001012:	f000 fe1f 	bl	8001c54 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001016:	2304      	movs	r3, #4
 8001018:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800101a:	2300      	movs	r3, #0
 800101c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101e:	2300      	movs	r3, #0
 8001020:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001022:	f107 031c 	add.w	r3, r7, #28
 8001026:	4619      	mov	r1, r3
 8001028:	4824      	ldr	r0, [pc, #144]	; (80010bc <MX_GPIO_Init+0x1f4>)
 800102a:	f000 fe13 	bl	8001c54 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800102e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001032:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001034:	2302      	movs	r3, #2
 8001036:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001038:	2300      	movs	r3, #0
 800103a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800103c:	2300      	movs	r3, #0
 800103e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001040:	2305      	movs	r3, #5
 8001042:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001044:	f107 031c 	add.w	r3, r7, #28
 8001048:	4619      	mov	r1, r3
 800104a:	481c      	ldr	r0, [pc, #112]	; (80010bc <MX_GPIO_Init+0x1f4>)
 800104c:	f000 fe02 	bl	8001c54 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001050:	f24f 0310 	movw	r3, #61456	; 0xf010
 8001054:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001056:	2301      	movs	r3, #1
 8001058:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105a:	2300      	movs	r3, #0
 800105c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800105e:	2300      	movs	r3, #0
 8001060:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001062:	f107 031c 	add.w	r3, r7, #28
 8001066:	4619      	mov	r1, r3
 8001068:	4812      	ldr	r0, [pc, #72]	; (80010b4 <MX_GPIO_Init+0x1ec>)
 800106a:	f000 fdf3 	bl	8001c54 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800106e:	2320      	movs	r3, #32
 8001070:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001072:	2300      	movs	r3, #0
 8001074:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001076:	2300      	movs	r3, #0
 8001078:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800107a:	f107 031c 	add.w	r3, r7, #28
 800107e:	4619      	mov	r1, r3
 8001080:	480c      	ldr	r0, [pc, #48]	; (80010b4 <MX_GPIO_Init+0x1ec>)
 8001082:	f000 fde7 	bl	8001c54 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001086:	2302      	movs	r3, #2
 8001088:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800108a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800108e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001090:	2300      	movs	r3, #0
 8001092:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001094:	f107 031c 	add.w	r3, r7, #28
 8001098:	4619      	mov	r1, r3
 800109a:	4804      	ldr	r0, [pc, #16]	; (80010ac <MX_GPIO_Init+0x1e4>)
 800109c:	f000 fdda 	bl	8001c54 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80010a0:	bf00      	nop
 80010a2:	3730      	adds	r7, #48	; 0x30
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	40023800 	.word	0x40023800
 80010ac:	40021000 	.word	0x40021000
 80010b0:	40020800 	.word	0x40020800
 80010b4:	40020c00 	.word	0x40020c00
 80010b8:	40020000 	.word	0x40020000
 80010bc:	40020400 	.word	0x40020400

080010c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010c4:	b672      	cpsid	i
}
 80010c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010c8:	e7fe      	b.n	80010c8 <Error_Handler+0x8>
	...

080010cc <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 80010d0:	4819      	ldr	r0, [pc, #100]	; (8001138 <SPIx_Init+0x6c>)
 80010d2:	f004 f91c 	bl	800530e <HAL_SPI_GetState>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d12a      	bne.n	8001132 <SPIx_Init+0x66>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 80010dc:	4b16      	ldr	r3, [pc, #88]	; (8001138 <SPIx_Init+0x6c>)
 80010de:	4a17      	ldr	r2, [pc, #92]	; (800113c <SPIx_Init+0x70>)
 80010e0:	601a      	str	r2, [r3, #0]
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80010e2:	4b15      	ldr	r3, [pc, #84]	; (8001138 <SPIx_Init+0x6c>)
 80010e4:	2218      	movs	r2, #24
 80010e6:	61da      	str	r2, [r3, #28]
    SpiHandle.Init.Direction = SPI_DIRECTION_2LINES;
 80010e8:	4b13      	ldr	r3, [pc, #76]	; (8001138 <SPIx_Init+0x6c>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010ee:	4b12      	ldr	r3, [pc, #72]	; (8001138 <SPIx_Init+0x6c>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010f4:	4b10      	ldr	r3, [pc, #64]	; (8001138 <SPIx_Init+0x6c>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 80010fa:	4b0f      	ldr	r3, [pc, #60]	; (8001138 <SPIx_Init+0x6c>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial = 7;
 8001100:	4b0d      	ldr	r3, [pc, #52]	; (8001138 <SPIx_Init+0x6c>)
 8001102:	2207      	movs	r2, #7
 8001104:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize = SPI_DATASIZE_8BIT;
 8001106:	4b0c      	ldr	r3, [pc, #48]	; (8001138 <SPIx_Init+0x6c>)
 8001108:	2200      	movs	r2, #0
 800110a:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800110c:	4b0a      	ldr	r3, [pc, #40]	; (8001138 <SPIx_Init+0x6c>)
 800110e:	2200      	movs	r2, #0
 8001110:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS = SPI_NSS_SOFT;
 8001112:	4b09      	ldr	r3, [pc, #36]	; (8001138 <SPIx_Init+0x6c>)
 8001114:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001118:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode = SPI_TIMODE_DISABLED;
 800111a:	4b07      	ldr	r3, [pc, #28]	; (8001138 <SPIx_Init+0x6c>)
 800111c:	2200      	movs	r2, #0
 800111e:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode = SPI_MODE_MASTER;
 8001120:	4b05      	ldr	r3, [pc, #20]	; (8001138 <SPIx_Init+0x6c>)
 8001122:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001126:	605a      	str	r2, [r3, #4]

    SPIx_MspInit();
 8001128:	f000 f836 	bl	8001198 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 800112c:	4802      	ldr	r0, [pc, #8]	; (8001138 <SPIx_Init+0x6c>)
 800112e:	f003 fe9b 	bl	8004e68 <HAL_SPI_Init>
  }
}
 8001132:	bf00      	nop
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	2000034c 	.word	0x2000034c
 800113c:	40013000 	.word	0x40013000

08001140 <SPIx_WriteRead>:
  *         from the SPI bus.
  * @param  Byte: Byte send.
  * @retval The received byte value
  */
static uint8_t SPIx_WriteRead(uint8_t Byte)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b086      	sub	sp, #24
 8001144:	af02      	add	r7, sp, #8
 8001146:	4603      	mov	r3, r0
 8001148:	71fb      	strb	r3, [r7, #7]
  uint8_t receivedbyte = 0;
 800114a:	2300      	movs	r3, #0
 800114c:	73fb      	strb	r3, [r7, #15]
  
  /* Send a Byte through the SPI peripheral */
  /* Read byte from the SPI bus */
  if(HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t*) &Byte, (uint8_t*) &receivedbyte, 1, SpixTimeout) != HAL_OK)
 800114e:	4b0a      	ldr	r3, [pc, #40]	; (8001178 <SPIx_WriteRead+0x38>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f107 020f 	add.w	r2, r7, #15
 8001156:	1df9      	adds	r1, r7, #7
 8001158:	9300      	str	r3, [sp, #0]
 800115a:	2301      	movs	r3, #1
 800115c:	4807      	ldr	r0, [pc, #28]	; (800117c <SPIx_WriteRead+0x3c>)
 800115e:	f003 ff34 	bl	8004fca <HAL_SPI_TransmitReceive>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <SPIx_WriteRead+0x2c>
  {
    SPIx_Error();
 8001168:	f000 f80a 	bl	8001180 <SPIx_Error>
  }
  
  return receivedbyte;
 800116c:	7bfb      	ldrb	r3, [r7, #15]
}
 800116e:	4618      	mov	r0, r3
 8001170:	3710      	adds	r7, #16
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	20000068 	.word	0x20000068
 800117c:	2000034c 	.word	0x2000034c

08001180 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication bus */
  HAL_SPI_DeInit(&SpiHandle);
 8001184:	4803      	ldr	r0, [pc, #12]	; (8001194 <SPIx_Error+0x14>)
 8001186:	f003 fef8 	bl	8004f7a <HAL_SPI_DeInit>
  
  /* Re-Initialize the SPI communication bus */
  SPIx_Init();
 800118a:	f7ff ff9f 	bl	80010cc <SPIx_Init>
}
 800118e:	bf00      	nop
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	2000034c 	.word	0x2000034c

08001198 <SPIx_MspInit>:

/**
  * @brief  SPI MSP Init.
  */
static void SPIx_MspInit(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b088      	sub	sp, #32
 800119c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable the SPI peripheral */
  DISCOVERY_SPIx_CLK_ENABLE();
 800119e:	2300      	movs	r3, #0
 80011a0:	60bb      	str	r3, [r7, #8]
 80011a2:	4b17      	ldr	r3, [pc, #92]	; (8001200 <SPIx_MspInit+0x68>)
 80011a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011a6:	4a16      	ldr	r2, [pc, #88]	; (8001200 <SPIx_MspInit+0x68>)
 80011a8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80011ac:	6453      	str	r3, [r2, #68]	; 0x44
 80011ae:	4b14      	ldr	r3, [pc, #80]	; (8001200 <SPIx_MspInit+0x68>)
 80011b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011b6:	60bb      	str	r3, [r7, #8]
 80011b8:	68bb      	ldr	r3, [r7, #8]
  
  /* Enable SCK, MOSI and MISO GPIO clocks */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 80011ba:	2300      	movs	r3, #0
 80011bc:	607b      	str	r3, [r7, #4]
 80011be:	4b10      	ldr	r3, [pc, #64]	; (8001200 <SPIx_MspInit+0x68>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c2:	4a0f      	ldr	r2, [pc, #60]	; (8001200 <SPIx_MspInit+0x68>)
 80011c4:	f043 0301 	orr.w	r3, r3, #1
 80011c8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ca:	4b0d      	ldr	r3, [pc, #52]	; (8001200 <SPIx_MspInit+0x68>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ce:	f003 0301 	and.w	r3, r3, #1
 80011d2:	607b      	str	r3, [r7, #4]
 80011d4:	687b      	ldr	r3, [r7, #4]
  
  /* SPI SCK, MOSI, MISO pin configuration */
  GPIO_InitStructure.Pin = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MISO_PIN | DISCOVERY_SPIx_MOSI_PIN);
 80011d6:	23e0      	movs	r3, #224	; 0xe0
 80011d8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 80011da:	2302      	movs	r3, #2
 80011dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull  = GPIO_PULLDOWN;
 80011de:	2302      	movs	r3, #2
 80011e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_MEDIUM;
 80011e2:	2301      	movs	r3, #1
 80011e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 80011e6:	2305      	movs	r3, #5
 80011e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);
 80011ea:	f107 030c 	add.w	r3, r7, #12
 80011ee:	4619      	mov	r1, r3
 80011f0:	4804      	ldr	r0, [pc, #16]	; (8001204 <SPIx_MspInit+0x6c>)
 80011f2:	f000 fd2f 	bl	8001c54 <HAL_GPIO_Init>
}
 80011f6:	bf00      	nop
 80011f8:	3720      	adds	r7, #32
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	40023800 	.word	0x40023800
 8001204:	40020000 	.word	0x40020000

08001208 <ACCELERO_IO_Init>:

/**
  * @brief  Configures the Accelerometer SPI interface.
  */
void ACCELERO_IO_Init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b086      	sub	sp, #24
 800120c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Configure the Accelerometer Control pins --------------------------------*/
  /* Enable CS GPIO clock and configure GPIO pin for Accelerometer Chip select */  
  ACCELERO_CS_GPIO_CLK_ENABLE();
 800120e:	2300      	movs	r3, #0
 8001210:	603b      	str	r3, [r7, #0]
 8001212:	4b12      	ldr	r3, [pc, #72]	; (800125c <ACCELERO_IO_Init+0x54>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001216:	4a11      	ldr	r2, [pc, #68]	; (800125c <ACCELERO_IO_Init+0x54>)
 8001218:	f043 0310 	orr.w	r3, r3, #16
 800121c:	6313      	str	r3, [r2, #48]	; 0x30
 800121e:	4b0f      	ldr	r3, [pc, #60]	; (800125c <ACCELERO_IO_Init+0x54>)
 8001220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001222:	f003 0310 	and.w	r3, r3, #16
 8001226:	603b      	str	r3, [r7, #0]
 8001228:	683b      	ldr	r3, [r7, #0]
  
  /* Configure GPIO PIN for LIS Chip select */
  GPIO_InitStructure.Pin = ACCELERO_CS_PIN;
 800122a:	2308      	movs	r3, #8
 800122c:	607b      	str	r3, [r7, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 800122e:	2301      	movs	r3, #1
 8001230:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8001232:	2300      	movs	r3, #0
 8001234:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Speed = GPIO_SPEED_MEDIUM;
 8001236:	2301      	movs	r3, #1
 8001238:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(ACCELERO_CS_GPIO_PORT, &GPIO_InitStructure);
 800123a:	1d3b      	adds	r3, r7, #4
 800123c:	4619      	mov	r1, r3
 800123e:	4808      	ldr	r0, [pc, #32]	; (8001260 <ACCELERO_IO_Init+0x58>)
 8001240:	f000 fd08 	bl	8001c54 <HAL_GPIO_Init>
  
  /* Deselect: Chip Select high */
  ACCELERO_CS_HIGH();
 8001244:	2201      	movs	r2, #1
 8001246:	2108      	movs	r1, #8
 8001248:	4805      	ldr	r0, [pc, #20]	; (8001260 <ACCELERO_IO_Init+0x58>)
 800124a:	f000 ffb3 	bl	80021b4 <HAL_GPIO_WritePin>
  
  SPIx_Init();
 800124e:	f7ff ff3d 	bl	80010cc <SPIx_Init>
}
 8001252:	bf00      	nop
 8001254:	3718      	adds	r7, #24
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	40023800 	.word	0x40023800
 8001260:	40021000 	.word	0x40021000

08001264 <ACCELERO_IO_ITConfig>:
/**
  * @brief  Configures the Accelerometer INT2.
  *         EXTI0 is already used by user button so INT1 is not configured here.
  */
void ACCELERO_IO_ITConfig(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b086      	sub	sp, #24
 8001268:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable INT2 GPIO clock and configure GPIO PINs to detect Interrupts */
  ACCELERO_INT_GPIO_CLK_ENABLE();
 800126a:	2300      	movs	r3, #0
 800126c:	603b      	str	r3, [r7, #0]
 800126e:	4b13      	ldr	r3, [pc, #76]	; (80012bc <ACCELERO_IO_ITConfig+0x58>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001272:	4a12      	ldr	r2, [pc, #72]	; (80012bc <ACCELERO_IO_ITConfig+0x58>)
 8001274:	f043 0310 	orr.w	r3, r3, #16
 8001278:	6313      	str	r3, [r2, #48]	; 0x30
 800127a:	4b10      	ldr	r3, [pc, #64]	; (80012bc <ACCELERO_IO_ITConfig+0x58>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127e:	f003 0310 	and.w	r3, r3, #16
 8001282:	603b      	str	r3, [r7, #0]
 8001284:	683b      	ldr	r3, [r7, #0]
  
  /* Configure GPIO PINs to detect Interrupts */
  GPIO_InitStructure.Pin = ACCELERO_INT2_PIN;
 8001286:	2302      	movs	r3, #2
 8001288:	607b      	str	r3, [r7, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
 800128a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800128e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8001290:	2302      	movs	r3, #2
 8001292:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8001294:	2300      	movs	r3, #0
 8001296:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 8001298:	1d3b      	adds	r3, r7, #4
 800129a:	4619      	mov	r1, r3
 800129c:	4808      	ldr	r0, [pc, #32]	; (80012c0 <ACCELERO_IO_ITConfig+0x5c>)
 800129e:	f000 fcd9 	bl	8001c54 <HAL_GPIO_Init>
  
  /* Enable and set Accelerometer INT2 to the lowest priority */
  HAL_NVIC_SetPriority((IRQn_Type)ACCELERO_INT2_EXTI_IRQn, 0x0F, 0);
 80012a2:	2200      	movs	r2, #0
 80012a4:	210f      	movs	r1, #15
 80012a6:	2007      	movs	r0, #7
 80012a8:	f000 fc9d 	bl	8001be6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)ACCELERO_INT2_EXTI_IRQn);
 80012ac:	2007      	movs	r0, #7
 80012ae:	f000 fcb6 	bl	8001c1e <HAL_NVIC_EnableIRQ>
}
 80012b2:	bf00      	nop
 80012b4:	3718      	adds	r7, #24
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	40023800 	.word	0x40023800
 80012c0:	40021000 	.word	0x40021000

080012c4 <ACCELERO_IO_Write>:
  * @param  pBuffer: pointer to the buffer containing the data to be written to the Accelerometer.
  * @param  WriteAddr: Accelerometer's internal address to write to.
  * @param  NumByteToWrite: Number of bytes to write.
  */
void ACCELERO_IO_Write(uint8_t *pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
 80012cc:	460b      	mov	r3, r1
 80012ce:	70fb      	strb	r3, [r7, #3]
 80012d0:	4613      	mov	r3, r2
 80012d2:	803b      	strh	r3, [r7, #0]
  /* Configure the MS bit: 
     - When 0, the address will remain unchanged in multiple read/write commands.
     - When 1, the address will be auto incremented in multiple read/write commands.
  */
  if(NumByteToWrite > 0x01)
 80012d4:	883b      	ldrh	r3, [r7, #0]
 80012d6:	2b01      	cmp	r3, #1
 80012d8:	d903      	bls.n	80012e2 <ACCELERO_IO_Write+0x1e>
  {
    WriteAddr |= (uint8_t)MULTIPLEBYTE_CMD;
 80012da:	78fb      	ldrb	r3, [r7, #3]
 80012dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012e0:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  ACCELERO_CS_LOW();
 80012e2:	2200      	movs	r2, #0
 80012e4:	2108      	movs	r1, #8
 80012e6:	480f      	ldr	r0, [pc, #60]	; (8001324 <ACCELERO_IO_Write+0x60>)
 80012e8:	f000 ff64 	bl	80021b4 <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(WriteAddr);
 80012ec:	78fb      	ldrb	r3, [r7, #3]
 80012ee:	4618      	mov	r0, r3
 80012f0:	f7ff ff26 	bl	8001140 <SPIx_WriteRead>
  
  /* Send the data that will be written into the device (MSB First) */
  while(NumByteToWrite >= 0x01)
 80012f4:	e00a      	b.n	800130c <ACCELERO_IO_Write+0x48>
  {
    SPIx_WriteRead(*pBuffer);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	4618      	mov	r0, r3
 80012fc:	f7ff ff20 	bl	8001140 <SPIx_WriteRead>
    NumByteToWrite--;
 8001300:	883b      	ldrh	r3, [r7, #0]
 8001302:	3b01      	subs	r3, #1
 8001304:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	3301      	adds	r3, #1
 800130a:	607b      	str	r3, [r7, #4]
  while(NumByteToWrite >= 0x01)
 800130c:	883b      	ldrh	r3, [r7, #0]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d1f1      	bne.n	80012f6 <ACCELERO_IO_Write+0x32>
  }
  
  /* Set chip select High at the end of the transmission */ 
  ACCELERO_CS_HIGH();
 8001312:	2201      	movs	r2, #1
 8001314:	2108      	movs	r1, #8
 8001316:	4803      	ldr	r0, [pc, #12]	; (8001324 <ACCELERO_IO_Write+0x60>)
 8001318:	f000 ff4c 	bl	80021b4 <HAL_GPIO_WritePin>
}
 800131c:	bf00      	nop
 800131e:	3708      	adds	r7, #8
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	40021000 	.word	0x40021000

08001328 <ACCELERO_IO_Read>:
  * @param  pBuffer: pointer to the buffer that receives the data read from the Accelerometer.
  * @param  ReadAddr: Accelerometer's internal address to read from.
  * @param  NumByteToRead: number of bytes to read from the Accelerometer.
  */
void ACCELERO_IO_Read(uint8_t *pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{  
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
 8001330:	460b      	mov	r3, r1
 8001332:	70fb      	strb	r3, [r7, #3]
 8001334:	4613      	mov	r3, r2
 8001336:	803b      	strh	r3, [r7, #0]
  if(NumByteToRead > 0x01)
 8001338:	883b      	ldrh	r3, [r7, #0]
 800133a:	2b01      	cmp	r3, #1
 800133c:	d904      	bls.n	8001348 <ACCELERO_IO_Read+0x20>
  {
    ReadAddr |= (uint8_t)(READWRITE_CMD | MULTIPLEBYTE_CMD);
 800133e:	78fb      	ldrb	r3, [r7, #3]
 8001340:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8001344:	70fb      	strb	r3, [r7, #3]
 8001346:	e003      	b.n	8001350 <ACCELERO_IO_Read+0x28>
  }
  else
  {
    ReadAddr |= (uint8_t)READWRITE_CMD;
 8001348:	78fb      	ldrb	r3, [r7, #3]
 800134a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800134e:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  ACCELERO_CS_LOW();
 8001350:	2200      	movs	r2, #0
 8001352:	2108      	movs	r1, #8
 8001354:	4810      	ldr	r0, [pc, #64]	; (8001398 <ACCELERO_IO_Read+0x70>)
 8001356:	f000 ff2d 	bl	80021b4 <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(ReadAddr);
 800135a:	78fb      	ldrb	r3, [r7, #3]
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff feef 	bl	8001140 <SPIx_WriteRead>
  
  /* Receive the data that will be read from the device (MSB First) */
  while(NumByteToRead > 0x00)
 8001362:	e00c      	b.n	800137e <ACCELERO_IO_Read+0x56>
  {
    /* Send dummy byte (0x00) to generate the SPI clock to ACCELEROMETER (Slave device) */
    *pBuffer = SPIx_WriteRead(DUMMY_BYTE);
 8001364:	2000      	movs	r0, #0
 8001366:	f7ff feeb 	bl	8001140 <SPIx_WriteRead>
 800136a:	4603      	mov	r3, r0
 800136c:	461a      	mov	r2, r3
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	701a      	strb	r2, [r3, #0]
    NumByteToRead--;
 8001372:	883b      	ldrh	r3, [r7, #0]
 8001374:	3b01      	subs	r3, #1
 8001376:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	3301      	adds	r3, #1
 800137c:	607b      	str	r3, [r7, #4]
  while(NumByteToRead > 0x00)
 800137e:	883b      	ldrh	r3, [r7, #0]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d1ef      	bne.n	8001364 <ACCELERO_IO_Read+0x3c>
  }
  
  /* Set chip select High at the end of the transmission */ 
  ACCELERO_CS_HIGH();
 8001384:	2201      	movs	r2, #1
 8001386:	2108      	movs	r1, #8
 8001388:	4803      	ldr	r0, [pc, #12]	; (8001398 <ACCELERO_IO_Read+0x70>)
 800138a:	f000 ff13 	bl	80021b4 <HAL_GPIO_WritePin>
}
 800138e:	bf00      	nop
 8001390:	3708      	adds	r7, #8
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	40021000 	.word	0x40021000

0800139c <BSP_ACCELERO_Init>:
/**
  * @brief  Setx Accelerometer Initialization.
  * @retval ACCELERO_OK if no problem during initialization
  */
uint8_t BSP_ACCELERO_Init(void)
{ 
 800139c:	b580      	push	{r7, lr}
 800139e:	b086      	sub	sp, #24
 80013a0:	af00      	add	r7, sp, #0
  uint8_t ret = ACCELERO_ERROR;
 80013a2:	2301      	movs	r3, #1
 80013a4:	75fb      	strb	r3, [r7, #23]
  uint16_t ctrl = 0x0000;
 80013a6:	2300      	movs	r3, #0
 80013a8:	82bb      	strh	r3, [r7, #20]
  LIS302DL_InitTypeDef         lis302dl_initstruct;
  LIS302DL_FilterConfigTypeDef lis302dl_filter = {0,0,0};
 80013aa:	2300      	movs	r3, #0
 80013ac:	723b      	strb	r3, [r7, #8]
 80013ae:	2300      	movs	r3, #0
 80013b0:	727b      	strb	r3, [r7, #9]
 80013b2:	2300      	movs	r3, #0
 80013b4:	72bb      	strb	r3, [r7, #10]
  LIS3DSH_InitTypeDef          l1s3dsh_InitStruct;

  if(Lis302dlDrv.ReadID() == I_AM_LIS302DL)
 80013b6:	4b3c      	ldr	r3, [pc, #240]	; (80014a8 <BSP_ACCELERO_Init+0x10c>)
 80013b8:	689b      	ldr	r3, [r3, #8]
 80013ba:	4798      	blx	r3
 80013bc:	4603      	mov	r3, r0
 80013be:	2b3b      	cmp	r3, #59	; 0x3b
 80013c0:	d138      	bne.n	8001434 <BSP_ACCELERO_Init+0x98>
  {
    /* Initialize the accelerometer driver structure */
    AcceleroDrv = &Lis302dlDrv;
 80013c2:	4b3a      	ldr	r3, [pc, #232]	; (80014ac <BSP_ACCELERO_Init+0x110>)
 80013c4:	4a38      	ldr	r2, [pc, #224]	; (80014a8 <BSP_ACCELERO_Init+0x10c>)
 80013c6:	601a      	str	r2, [r3, #0]

    /* Set configuration of LIS302DL MEMS Accelerometer *********************/
    lis302dl_initstruct.Power_Mode = LIS302DL_LOWPOWERMODE_ACTIVE;
 80013c8:	2340      	movs	r3, #64	; 0x40
 80013ca:	733b      	strb	r3, [r7, #12]
    lis302dl_initstruct.Output_DataRate = LIS302DL_DATARATE_100;
 80013cc:	2300      	movs	r3, #0
 80013ce:	737b      	strb	r3, [r7, #13]
    lis302dl_initstruct.Axes_Enable = LIS302DL_XYZ_ENABLE;
 80013d0:	2307      	movs	r3, #7
 80013d2:	73bb      	strb	r3, [r7, #14]
    lis302dl_initstruct.Full_Scale = LIS302DL_FULLSCALE_2_3;
 80013d4:	2300      	movs	r3, #0
 80013d6:	73fb      	strb	r3, [r7, #15]
    lis302dl_initstruct.Self_Test = LIS302DL_SELFTEST_NORMAL;
 80013d8:	2300      	movs	r3, #0
 80013da:	743b      	strb	r3, [r7, #16]
    
    /* Configure MEMS: data rate, power mode, full scale, self test and axes */
    ctrl = (uint16_t) (lis302dl_initstruct.Output_DataRate | lis302dl_initstruct.Power_Mode | \
 80013dc:	7b7a      	ldrb	r2, [r7, #13]
 80013de:	7b3b      	ldrb	r3, [r7, #12]
 80013e0:	4313      	orrs	r3, r2
 80013e2:	b2da      	uxtb	r2, r3
                       lis302dl_initstruct.Full_Scale | lis302dl_initstruct.Self_Test | \
 80013e4:	7bfb      	ldrb	r3, [r7, #15]
    ctrl = (uint16_t) (lis302dl_initstruct.Output_DataRate | lis302dl_initstruct.Power_Mode | \
 80013e6:	4313      	orrs	r3, r2
 80013e8:	b2da      	uxtb	r2, r3
                       lis302dl_initstruct.Full_Scale | lis302dl_initstruct.Self_Test | \
 80013ea:	7c3b      	ldrb	r3, [r7, #16]
    ctrl = (uint16_t) (lis302dl_initstruct.Output_DataRate | lis302dl_initstruct.Power_Mode | \
 80013ec:	4313      	orrs	r3, r2
 80013ee:	b2da      	uxtb	r2, r3
                       lis302dl_initstruct.Axes_Enable);
 80013f0:	7bbb      	ldrb	r3, [r7, #14]
    ctrl = (uint16_t) (lis302dl_initstruct.Output_DataRate | lis302dl_initstruct.Power_Mode | \
 80013f2:	4313      	orrs	r3, r2
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	82bb      	strh	r3, [r7, #20]
    
    /* Configure the accelerometer main parameters */
    AcceleroDrv->Init(ctrl);
 80013f8:	4b2c      	ldr	r3, [pc, #176]	; (80014ac <BSP_ACCELERO_Init+0x110>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	8aba      	ldrh	r2, [r7, #20]
 8001400:	4610      	mov	r0, r2
 8001402:	4798      	blx	r3
    
    /* MEMS High Pass Filter configuration */
    lis302dl_filter.HighPassFilter_Data_Selection = LIS302DL_FILTEREDDATASELECTION_OUTPUTREGISTER;
 8001404:	2320      	movs	r3, #32
 8001406:	723b      	strb	r3, [r7, #8]
    lis302dl_filter.HighPassFilter_CutOff_Frequency = LIS302DL_HIGHPASSFILTER_LEVEL_1;
 8001408:	2301      	movs	r3, #1
 800140a:	727b      	strb	r3, [r7, #9]
    lis302dl_filter.HighPassFilter_Interrupt = LIS302DL_HIGHPASSFILTERINTERRUPT_1_2;
 800140c:	230c      	movs	r3, #12
 800140e:	72bb      	strb	r3, [r7, #10]
    
    /* Configure MEMS high pass filter cut-off level, interrupt and data selection bits */                     
    ctrl = (uint8_t)(lis302dl_filter.HighPassFilter_Data_Selection | \
 8001410:	7a3a      	ldrb	r2, [r7, #8]
                     lis302dl_filter.HighPassFilter_CutOff_Frequency | \
 8001412:	7a7b      	ldrb	r3, [r7, #9]
    ctrl = (uint8_t)(lis302dl_filter.HighPassFilter_Data_Selection | \
 8001414:	4313      	orrs	r3, r2
 8001416:	b2da      	uxtb	r2, r3
                     lis302dl_filter.HighPassFilter_Interrupt);
 8001418:	7abb      	ldrb	r3, [r7, #10]
    ctrl = (uint8_t)(lis302dl_filter.HighPassFilter_Data_Selection | \
 800141a:	4313      	orrs	r3, r2
 800141c:	b2db      	uxtb	r3, r3
 800141e:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer LPF main parameters */
    AcceleroDrv->FilterConfig(ctrl);
 8001420:	4b22      	ldr	r3, [pc, #136]	; (80014ac <BSP_ACCELERO_Init+0x110>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001426:	8aba      	ldrh	r2, [r7, #20]
 8001428:	b2d2      	uxtb	r2, r2
 800142a:	4610      	mov	r0, r2
 800142c:	4798      	blx	r3

    ret = ACCELERO_OK;
 800142e:	2300      	movs	r3, #0
 8001430:	75fb      	strb	r3, [r7, #23]
 8001432:	e034      	b.n	800149e <BSP_ACCELERO_Init+0x102>
  }
  else if(Lis3dshDrv.ReadID() == I_AM_LIS3DSH)
 8001434:	4b1e      	ldr	r3, [pc, #120]	; (80014b0 <BSP_ACCELERO_Init+0x114>)
 8001436:	689b      	ldr	r3, [r3, #8]
 8001438:	4798      	blx	r3
 800143a:	4603      	mov	r3, r0
 800143c:	2b3f      	cmp	r3, #63	; 0x3f
 800143e:	d12c      	bne.n	800149a <BSP_ACCELERO_Init+0xfe>
  {
    /* Initialize the accelerometer driver structure */
    AcceleroDrv = &Lis3dshDrv;
 8001440:	4b1a      	ldr	r3, [pc, #104]	; (80014ac <BSP_ACCELERO_Init+0x110>)
 8001442:	4a1b      	ldr	r2, [pc, #108]	; (80014b0 <BSP_ACCELERO_Init+0x114>)
 8001444:	601a      	str	r2, [r3, #0]

    /* Set configuration of LIS3DSH MEMS Accelerometer **********************/
    l1s3dsh_InitStruct.Output_DataRate = LIS3DSH_DATARATE_100;
 8001446:	2360      	movs	r3, #96	; 0x60
 8001448:	703b      	strb	r3, [r7, #0]
    l1s3dsh_InitStruct.Axes_Enable = LIS3DSH_XYZ_ENABLE;
 800144a:	2307      	movs	r3, #7
 800144c:	707b      	strb	r3, [r7, #1]
    l1s3dsh_InitStruct.SPI_Wire = LIS3DSH_SERIALINTERFACE_4WIRE;
 800144e:	2300      	movs	r3, #0
 8001450:	70bb      	strb	r3, [r7, #2]
    l1s3dsh_InitStruct.Self_Test = LIS3DSH_SELFTEST_NORMAL;
 8001452:	2300      	movs	r3, #0
 8001454:	70fb      	strb	r3, [r7, #3]
    l1s3dsh_InitStruct.Full_Scale = LIS3DSH_FULLSCALE_2;
 8001456:	2300      	movs	r3, #0
 8001458:	713b      	strb	r3, [r7, #4]
    l1s3dsh_InitStruct.Filter_BW = LIS3DSH_FILTER_BW_800;
 800145a:	2300      	movs	r3, #0
 800145c:	717b      	strb	r3, [r7, #5]
    
    /* Configure MEMS: power mode(ODR) and axes enable */
    ctrl = (uint16_t) (l1s3dsh_InitStruct.Output_DataRate | \
 800145e:	783a      	ldrb	r2, [r7, #0]
                       l1s3dsh_InitStruct.Axes_Enable);
 8001460:	787b      	ldrb	r3, [r7, #1]
    ctrl = (uint16_t) (l1s3dsh_InitStruct.Output_DataRate | \
 8001462:	4313      	orrs	r3, r2
 8001464:	b2db      	uxtb	r3, r3
 8001466:	82bb      	strh	r3, [r7, #20]
    
    /* Configure MEMS: full scale and self test */
    ctrl |= (uint16_t) ((l1s3dsh_InitStruct.SPI_Wire    | \
 8001468:	78ba      	ldrb	r2, [r7, #2]
                         l1s3dsh_InitStruct.Self_Test   | \
 800146a:	78fb      	ldrb	r3, [r7, #3]
    ctrl |= (uint16_t) ((l1s3dsh_InitStruct.SPI_Wire    | \
 800146c:	4313      	orrs	r3, r2
 800146e:	b2da      	uxtb	r2, r3
                         l1s3dsh_InitStruct.Full_Scale  | \
 8001470:	793b      	ldrb	r3, [r7, #4]
    ctrl |= (uint16_t) ((l1s3dsh_InitStruct.SPI_Wire    | \
 8001472:	4313      	orrs	r3, r2
 8001474:	b2da      	uxtb	r2, r3
                         l1s3dsh_InitStruct.Filter_BW) << 8);
 8001476:	797b      	ldrb	r3, [r7, #5]
    ctrl |= (uint16_t) ((l1s3dsh_InitStruct.SPI_Wire    | \
 8001478:	4313      	orrs	r3, r2
 800147a:	b2db      	uxtb	r3, r3
 800147c:	b29b      	uxth	r3, r3
 800147e:	021b      	lsls	r3, r3, #8
 8001480:	b29a      	uxth	r2, r3
 8001482:	8abb      	ldrh	r3, [r7, #20]
 8001484:	4313      	orrs	r3, r2
 8001486:	82bb      	strh	r3, [r7, #20]

    /* Configure the accelerometer main parameters */
    AcceleroDrv->Init(ctrl);
 8001488:	4b08      	ldr	r3, [pc, #32]	; (80014ac <BSP_ACCELERO_Init+0x110>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	8aba      	ldrh	r2, [r7, #20]
 8001490:	4610      	mov	r0, r2
 8001492:	4798      	blx	r3
    
    ret = ACCELERO_OK;
 8001494:	2300      	movs	r3, #0
 8001496:	75fb      	strb	r3, [r7, #23]
 8001498:	e001      	b.n	800149e <BSP_ACCELERO_Init+0x102>
  }

  else
  {
    ret = ACCELERO_ERROR;
 800149a:	2301      	movs	r3, #1
 800149c:	75fb      	strb	r3, [r7, #23]
  }
  return ret;
 800149e:	7dfb      	ldrb	r3, [r7, #23]
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	3718      	adds	r7, #24
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	20000000 	.word	0x20000000
 80014ac:	200003a4 	.word	0x200003a4
 80014b0:	20000034 	.word	0x20000034

080014b4 <BSP_ACCELERO_GetXYZ>:
  * @brief  Get XYZ axes acceleration.
  * @param  pDataXYZ: Pointer to 3 angular acceleration axes.  
  *                   pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  */
void BSP_ACCELERO_GetXYZ(int16_t *pDataXYZ)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b084      	sub	sp, #16
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  int16_t SwitchXY = 0;
 80014bc:	2300      	movs	r3, #0
 80014be:	81fb      	strh	r3, [r7, #14]
  
  if(AcceleroDrv->GetXYZ != NULL)
 80014c0:	4b10      	ldr	r3, [pc, #64]	; (8001504 <BSP_ACCELERO_GetXYZ+0x50>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d018      	beq.n	80014fc <BSP_ACCELERO_GetXYZ+0x48>
  {   
    AcceleroDrv->GetXYZ(pDataXYZ);
 80014ca:	4b0e      	ldr	r3, [pc, #56]	; (8001504 <BSP_ACCELERO_GetXYZ+0x50>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d0:	6878      	ldr	r0, [r7, #4]
 80014d2:	4798      	blx	r3
    
    /* Switch X and Y Axes in case of LIS302DL MEMS */
    if(AcceleroDrv == &Lis302dlDrv)
 80014d4:	4b0b      	ldr	r3, [pc, #44]	; (8001504 <BSP_ACCELERO_GetXYZ+0x50>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a0b      	ldr	r2, [pc, #44]	; (8001508 <BSP_ACCELERO_GetXYZ+0x54>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d10e      	bne.n	80014fc <BSP_ACCELERO_GetXYZ+0x48>
    { 
      SwitchXY  = pDataXYZ[0];
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	881b      	ldrh	r3, [r3, #0]
 80014e2:	81fb      	strh	r3, [r7, #14]
      pDataXYZ[0] = pDataXYZ[1];
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	801a      	strh	r2, [r3, #0]
      /* Invert Y Axis to be compliant with LIS3DSH MEMS */
      pDataXYZ[1] = -SwitchXY;
 80014ee:	89fb      	ldrh	r3, [r7, #14]
 80014f0:	425b      	negs	r3, r3
 80014f2:	b29a      	uxth	r2, r3
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	3302      	adds	r3, #2
 80014f8:	b212      	sxth	r2, r2
 80014fa:	801a      	strh	r2, [r3, #0]
    } 
  }
}
 80014fc:	bf00      	nop
 80014fe:	3710      	adds	r7, #16
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	200003a4 	.word	0x200003a4
 8001508:	20000000 	.word	0x20000000

0800150c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001512:	2300      	movs	r3, #0
 8001514:	607b      	str	r3, [r7, #4]
 8001516:	4b10      	ldr	r3, [pc, #64]	; (8001558 <HAL_MspInit+0x4c>)
 8001518:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800151a:	4a0f      	ldr	r2, [pc, #60]	; (8001558 <HAL_MspInit+0x4c>)
 800151c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001520:	6453      	str	r3, [r2, #68]	; 0x44
 8001522:	4b0d      	ldr	r3, [pc, #52]	; (8001558 <HAL_MspInit+0x4c>)
 8001524:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001526:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800152a:	607b      	str	r3, [r7, #4]
 800152c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800152e:	2300      	movs	r3, #0
 8001530:	603b      	str	r3, [r7, #0]
 8001532:	4b09      	ldr	r3, [pc, #36]	; (8001558 <HAL_MspInit+0x4c>)
 8001534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001536:	4a08      	ldr	r2, [pc, #32]	; (8001558 <HAL_MspInit+0x4c>)
 8001538:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800153c:	6413      	str	r3, [r2, #64]	; 0x40
 800153e:	4b06      	ldr	r3, [pc, #24]	; (8001558 <HAL_MspInit+0x4c>)
 8001540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001542:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001546:	603b      	str	r3, [r7, #0]
 8001548:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800154a:	2007      	movs	r0, #7
 800154c:	f000 fb40 	bl	8001bd0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001550:	bf00      	nop
 8001552:	3708      	adds	r7, #8
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	40023800 	.word	0x40023800

0800155c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b08a      	sub	sp, #40	; 0x28
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001564:	f107 0314 	add.w	r3, r7, #20
 8001568:	2200      	movs	r2, #0
 800156a:	601a      	str	r2, [r3, #0]
 800156c:	605a      	str	r2, [r3, #4]
 800156e:	609a      	str	r2, [r3, #8]
 8001570:	60da      	str	r2, [r3, #12]
 8001572:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a19      	ldr	r2, [pc, #100]	; (80015e0 <HAL_I2C_MspInit+0x84>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d12c      	bne.n	80015d8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800157e:	2300      	movs	r3, #0
 8001580:	613b      	str	r3, [r7, #16]
 8001582:	4b18      	ldr	r3, [pc, #96]	; (80015e4 <HAL_I2C_MspInit+0x88>)
 8001584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001586:	4a17      	ldr	r2, [pc, #92]	; (80015e4 <HAL_I2C_MspInit+0x88>)
 8001588:	f043 0302 	orr.w	r3, r3, #2
 800158c:	6313      	str	r3, [r2, #48]	; 0x30
 800158e:	4b15      	ldr	r3, [pc, #84]	; (80015e4 <HAL_I2C_MspInit+0x88>)
 8001590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001592:	f003 0302 	and.w	r3, r3, #2
 8001596:	613b      	str	r3, [r7, #16]
 8001598:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800159a:	f44f 7310 	mov.w	r3, #576	; 0x240
 800159e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015a0:	2312      	movs	r3, #18
 80015a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015a4:	2301      	movs	r3, #1
 80015a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a8:	2300      	movs	r3, #0
 80015aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80015ac:	2304      	movs	r3, #4
 80015ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015b0:	f107 0314 	add.w	r3, r7, #20
 80015b4:	4619      	mov	r1, r3
 80015b6:	480c      	ldr	r0, [pc, #48]	; (80015e8 <HAL_I2C_MspInit+0x8c>)
 80015b8:	f000 fb4c 	bl	8001c54 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80015bc:	2300      	movs	r3, #0
 80015be:	60fb      	str	r3, [r7, #12]
 80015c0:	4b08      	ldr	r3, [pc, #32]	; (80015e4 <HAL_I2C_MspInit+0x88>)
 80015c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c4:	4a07      	ldr	r2, [pc, #28]	; (80015e4 <HAL_I2C_MspInit+0x88>)
 80015c6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80015ca:	6413      	str	r3, [r2, #64]	; 0x40
 80015cc:	4b05      	ldr	r3, [pc, #20]	; (80015e4 <HAL_I2C_MspInit+0x88>)
 80015ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015d4:	60fb      	str	r3, [r7, #12]
 80015d6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80015d8:	bf00      	nop
 80015da:	3728      	adds	r7, #40	; 0x28
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	40005400 	.word	0x40005400
 80015e4:	40023800 	.word	0x40023800
 80015e8:	40020400 	.word	0x40020400

080015ec <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b08e      	sub	sp, #56	; 0x38
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015f8:	2200      	movs	r2, #0
 80015fa:	601a      	str	r2, [r3, #0]
 80015fc:	605a      	str	r2, [r3, #4]
 80015fe:	609a      	str	r2, [r3, #8]
 8001600:	60da      	str	r2, [r3, #12]
 8001602:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001604:	f107 0314 	add.w	r3, r7, #20
 8001608:	2200      	movs	r2, #0
 800160a:	601a      	str	r2, [r3, #0]
 800160c:	605a      	str	r2, [r3, #4]
 800160e:	609a      	str	r2, [r3, #8]
 8001610:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4a31      	ldr	r2, [pc, #196]	; (80016dc <HAL_I2S_MspInit+0xf0>)
 8001618:	4293      	cmp	r3, r2
 800161a:	d15a      	bne.n	80016d2 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800161c:	2301      	movs	r3, #1
 800161e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8001620:	23c0      	movs	r3, #192	; 0xc0
 8001622:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001624:	2302      	movs	r3, #2
 8001626:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001628:	f107 0314 	add.w	r3, r7, #20
 800162c:	4618      	mov	r0, r3
 800162e:	f003 fadb 	bl	8004be8 <HAL_RCCEx_PeriphCLKConfig>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d001      	beq.n	800163c <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8001638:	f7ff fd42 	bl	80010c0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800163c:	2300      	movs	r3, #0
 800163e:	613b      	str	r3, [r7, #16]
 8001640:	4b27      	ldr	r3, [pc, #156]	; (80016e0 <HAL_I2S_MspInit+0xf4>)
 8001642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001644:	4a26      	ldr	r2, [pc, #152]	; (80016e0 <HAL_I2S_MspInit+0xf4>)
 8001646:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800164a:	6413      	str	r3, [r2, #64]	; 0x40
 800164c:	4b24      	ldr	r3, [pc, #144]	; (80016e0 <HAL_I2S_MspInit+0xf4>)
 800164e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001650:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001654:	613b      	str	r3, [r7, #16]
 8001656:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001658:	2300      	movs	r3, #0
 800165a:	60fb      	str	r3, [r7, #12]
 800165c:	4b20      	ldr	r3, [pc, #128]	; (80016e0 <HAL_I2S_MspInit+0xf4>)
 800165e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001660:	4a1f      	ldr	r2, [pc, #124]	; (80016e0 <HAL_I2S_MspInit+0xf4>)
 8001662:	f043 0301 	orr.w	r3, r3, #1
 8001666:	6313      	str	r3, [r2, #48]	; 0x30
 8001668:	4b1d      	ldr	r3, [pc, #116]	; (80016e0 <HAL_I2S_MspInit+0xf4>)
 800166a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166c:	f003 0301 	and.w	r3, r3, #1
 8001670:	60fb      	str	r3, [r7, #12]
 8001672:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001674:	2300      	movs	r3, #0
 8001676:	60bb      	str	r3, [r7, #8]
 8001678:	4b19      	ldr	r3, [pc, #100]	; (80016e0 <HAL_I2S_MspInit+0xf4>)
 800167a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167c:	4a18      	ldr	r2, [pc, #96]	; (80016e0 <HAL_I2S_MspInit+0xf4>)
 800167e:	f043 0304 	orr.w	r3, r3, #4
 8001682:	6313      	str	r3, [r2, #48]	; 0x30
 8001684:	4b16      	ldr	r3, [pc, #88]	; (80016e0 <HAL_I2S_MspInit+0xf4>)
 8001686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001688:	f003 0304 	and.w	r3, r3, #4
 800168c:	60bb      	str	r3, [r7, #8]
 800168e:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001690:	2310      	movs	r3, #16
 8001692:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001694:	2302      	movs	r3, #2
 8001696:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001698:	2300      	movs	r3, #0
 800169a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800169c:	2300      	movs	r3, #0
 800169e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80016a0:	2306      	movs	r3, #6
 80016a2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80016a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016a8:	4619      	mov	r1, r3
 80016aa:	480e      	ldr	r0, [pc, #56]	; (80016e4 <HAL_I2S_MspInit+0xf8>)
 80016ac:	f000 fad2 	bl	8001c54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80016b0:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80016b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b6:	2302      	movs	r3, #2
 80016b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ba:	2300      	movs	r3, #0
 80016bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016be:	2300      	movs	r3, #0
 80016c0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80016c2:	2306      	movs	r3, #6
 80016c4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016ca:	4619      	mov	r1, r3
 80016cc:	4806      	ldr	r0, [pc, #24]	; (80016e8 <HAL_I2S_MspInit+0xfc>)
 80016ce:	f000 fac1 	bl	8001c54 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80016d2:	bf00      	nop
 80016d4:	3738      	adds	r7, #56	; 0x38
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	40003c00 	.word	0x40003c00
 80016e0:	40023800 	.word	0x40023800
 80016e4:	40020000 	.word	0x40020000
 80016e8:	40020800 	.word	0x40020800

080016ec <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b08a      	sub	sp, #40	; 0x28
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016f4:	f107 0314 	add.w	r3, r7, #20
 80016f8:	2200      	movs	r2, #0
 80016fa:	601a      	str	r2, [r3, #0]
 80016fc:	605a      	str	r2, [r3, #4]
 80016fe:	609a      	str	r2, [r3, #8]
 8001700:	60da      	str	r2, [r3, #12]
 8001702:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a19      	ldr	r2, [pc, #100]	; (8001770 <HAL_SPI_MspInit+0x84>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d12b      	bne.n	8001766 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800170e:	2300      	movs	r3, #0
 8001710:	613b      	str	r3, [r7, #16]
 8001712:	4b18      	ldr	r3, [pc, #96]	; (8001774 <HAL_SPI_MspInit+0x88>)
 8001714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001716:	4a17      	ldr	r2, [pc, #92]	; (8001774 <HAL_SPI_MspInit+0x88>)
 8001718:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800171c:	6453      	str	r3, [r2, #68]	; 0x44
 800171e:	4b15      	ldr	r3, [pc, #84]	; (8001774 <HAL_SPI_MspInit+0x88>)
 8001720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001722:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001726:	613b      	str	r3, [r7, #16]
 8001728:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800172a:	2300      	movs	r3, #0
 800172c:	60fb      	str	r3, [r7, #12]
 800172e:	4b11      	ldr	r3, [pc, #68]	; (8001774 <HAL_SPI_MspInit+0x88>)
 8001730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001732:	4a10      	ldr	r2, [pc, #64]	; (8001774 <HAL_SPI_MspInit+0x88>)
 8001734:	f043 0301 	orr.w	r3, r3, #1
 8001738:	6313      	str	r3, [r2, #48]	; 0x30
 800173a:	4b0e      	ldr	r3, [pc, #56]	; (8001774 <HAL_SPI_MspInit+0x88>)
 800173c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173e:	f003 0301 	and.w	r3, r3, #1
 8001742:	60fb      	str	r3, [r7, #12]
 8001744:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001746:	23e0      	movs	r3, #224	; 0xe0
 8001748:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800174a:	2302      	movs	r3, #2
 800174c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174e:	2300      	movs	r3, #0
 8001750:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001752:	2300      	movs	r3, #0
 8001754:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001756:	2305      	movs	r3, #5
 8001758:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800175a:	f107 0314 	add.w	r3, r7, #20
 800175e:	4619      	mov	r1, r3
 8001760:	4805      	ldr	r0, [pc, #20]	; (8001778 <HAL_SPI_MspInit+0x8c>)
 8001762:	f000 fa77 	bl	8001c54 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001766:	bf00      	nop
 8001768:	3728      	adds	r7, #40	; 0x28
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	40013000 	.word	0x40013000
 8001774:	40023800 	.word	0x40023800
 8001778:	40020000 	.word	0x40020000

0800177c <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI1)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a08      	ldr	r2, [pc, #32]	; (80017ac <HAL_SPI_MspDeInit+0x30>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d109      	bne.n	80017a2 <HAL_SPI_MspDeInit+0x26>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 800178e:	4b08      	ldr	r3, [pc, #32]	; (80017b0 <HAL_SPI_MspDeInit+0x34>)
 8001790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001792:	4a07      	ldr	r2, [pc, #28]	; (80017b0 <HAL_SPI_MspDeInit+0x34>)
 8001794:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001798:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(GPIOA, SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin);
 800179a:	21e0      	movs	r1, #224	; 0xe0
 800179c:	4805      	ldr	r0, [pc, #20]	; (80017b4 <HAL_SPI_MspDeInit+0x38>)
 800179e:	f000 fbf5 	bl	8001f8c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI1_MspDeInit 1 */

  /* USER CODE END SPI1_MspDeInit 1 */
  }

}
 80017a2:	bf00      	nop
 80017a4:	3708      	adds	r7, #8
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	40013000 	.word	0x40013000
 80017b0:	40023800 	.word	0x40023800
 80017b4:	40020000 	.word	0x40020000

080017b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017bc:	e7fe      	b.n	80017bc <NMI_Handler+0x4>

080017be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017be:	b480      	push	{r7}
 80017c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017c2:	e7fe      	b.n	80017c2 <HardFault_Handler+0x4>

080017c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017c8:	e7fe      	b.n	80017c8 <MemManage_Handler+0x4>

080017ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017ca:	b480      	push	{r7}
 80017cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017ce:	e7fe      	b.n	80017ce <BusFault_Handler+0x4>

080017d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017d4:	e7fe      	b.n	80017d4 <UsageFault_Handler+0x4>

080017d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017d6:	b480      	push	{r7}
 80017d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017da:	bf00      	nop
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr

080017e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017e8:	bf00      	nop
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr

080017f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017f2:	b480      	push	{r7}
 80017f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017f6:	bf00      	nop
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr

08001800 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001804:	f000 f8d0 	bl	80019a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001808:	bf00      	nop
 800180a:	bd80      	pop	{r7, pc}

0800180c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001810:	4802      	ldr	r0, [pc, #8]	; (800181c <OTG_FS_IRQHandler+0x10>)
 8001812:	f001 fc37 	bl	8003084 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001816:	bf00      	nop
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	20001898 	.word	0x20001898

08001820 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b086      	sub	sp, #24
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001828:	4a14      	ldr	r2, [pc, #80]	; (800187c <_sbrk+0x5c>)
 800182a:	4b15      	ldr	r3, [pc, #84]	; (8001880 <_sbrk+0x60>)
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001834:	4b13      	ldr	r3, [pc, #76]	; (8001884 <_sbrk+0x64>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d102      	bne.n	8001842 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800183c:	4b11      	ldr	r3, [pc, #68]	; (8001884 <_sbrk+0x64>)
 800183e:	4a12      	ldr	r2, [pc, #72]	; (8001888 <_sbrk+0x68>)
 8001840:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001842:	4b10      	ldr	r3, [pc, #64]	; (8001884 <_sbrk+0x64>)
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	4413      	add	r3, r2
 800184a:	693a      	ldr	r2, [r7, #16]
 800184c:	429a      	cmp	r2, r3
 800184e:	d207      	bcs.n	8001860 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001850:	f007 ffc0 	bl	80097d4 <__errno>
 8001854:	4603      	mov	r3, r0
 8001856:	220c      	movs	r2, #12
 8001858:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800185a:	f04f 33ff 	mov.w	r3, #4294967295
 800185e:	e009      	b.n	8001874 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001860:	4b08      	ldr	r3, [pc, #32]	; (8001884 <_sbrk+0x64>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001866:	4b07      	ldr	r3, [pc, #28]	; (8001884 <_sbrk+0x64>)
 8001868:	681a      	ldr	r2, [r3, #0]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	4413      	add	r3, r2
 800186e:	4a05      	ldr	r2, [pc, #20]	; (8001884 <_sbrk+0x64>)
 8001870:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001872:	68fb      	ldr	r3, [r7, #12]
}
 8001874:	4618      	mov	r0, r3
 8001876:	3718      	adds	r7, #24
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}
 800187c:	20020000 	.word	0x20020000
 8001880:	00000400 	.word	0x00000400
 8001884:	200003a8 	.word	0x200003a8
 8001888:	20001fd8 	.word	0x20001fd8

0800188c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001890:	4b06      	ldr	r3, [pc, #24]	; (80018ac <SystemInit+0x20>)
 8001892:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001896:	4a05      	ldr	r2, [pc, #20]	; (80018ac <SystemInit+0x20>)
 8001898:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800189c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018a0:	bf00      	nop
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr
 80018aa:	bf00      	nop
 80018ac:	e000ed00 	.word	0xe000ed00

080018b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80018b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018e8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80018b4:	480d      	ldr	r0, [pc, #52]	; (80018ec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80018b6:	490e      	ldr	r1, [pc, #56]	; (80018f0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80018b8:	4a0e      	ldr	r2, [pc, #56]	; (80018f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80018ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018bc:	e002      	b.n	80018c4 <LoopCopyDataInit>

080018be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018c2:	3304      	adds	r3, #4

080018c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018c8:	d3f9      	bcc.n	80018be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018ca:	4a0b      	ldr	r2, [pc, #44]	; (80018f8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80018cc:	4c0b      	ldr	r4, [pc, #44]	; (80018fc <LoopFillZerobss+0x26>)
  movs r3, #0
 80018ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018d0:	e001      	b.n	80018d6 <LoopFillZerobss>

080018d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018d4:	3204      	adds	r2, #4

080018d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018d8:	d3fb      	bcc.n	80018d2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80018da:	f7ff ffd7 	bl	800188c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018de:	f007 ff7f 	bl	80097e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018e2:	f7ff f993 	bl	8000c0c <main>
  bx  lr    
 80018e6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80018e8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80018ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018f0:	200001cc 	.word	0x200001cc
  ldr r2, =_sidata
 80018f4:	0800a22c 	.word	0x0800a22c
  ldr r2, =_sbss
 80018f8:	200001cc 	.word	0x200001cc
  ldr r4, =_ebss
 80018fc:	20001fd4 	.word	0x20001fd4

08001900 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001900:	e7fe      	b.n	8001900 <ADC_IRQHandler>
	...

08001904 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001908:	4b0e      	ldr	r3, [pc, #56]	; (8001944 <HAL_Init+0x40>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a0d      	ldr	r2, [pc, #52]	; (8001944 <HAL_Init+0x40>)
 800190e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001912:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001914:	4b0b      	ldr	r3, [pc, #44]	; (8001944 <HAL_Init+0x40>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a0a      	ldr	r2, [pc, #40]	; (8001944 <HAL_Init+0x40>)
 800191a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800191e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001920:	4b08      	ldr	r3, [pc, #32]	; (8001944 <HAL_Init+0x40>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a07      	ldr	r2, [pc, #28]	; (8001944 <HAL_Init+0x40>)
 8001926:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800192a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800192c:	2003      	movs	r0, #3
 800192e:	f000 f94f 	bl	8001bd0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001932:	2000      	movs	r0, #0
 8001934:	f000 f808 	bl	8001948 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001938:	f7ff fde8 	bl	800150c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800193c:	2300      	movs	r3, #0
}
 800193e:	4618      	mov	r0, r3
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	40023c00 	.word	0x40023c00

08001948 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001950:	4b12      	ldr	r3, [pc, #72]	; (800199c <HAL_InitTick+0x54>)
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	4b12      	ldr	r3, [pc, #72]	; (80019a0 <HAL_InitTick+0x58>)
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	4619      	mov	r1, r3
 800195a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800195e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001962:	fbb2 f3f3 	udiv	r3, r2, r3
 8001966:	4618      	mov	r0, r3
 8001968:	f000 f967 	bl	8001c3a <HAL_SYSTICK_Config>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d001      	beq.n	8001976 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001972:	2301      	movs	r3, #1
 8001974:	e00e      	b.n	8001994 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2b0f      	cmp	r3, #15
 800197a:	d80a      	bhi.n	8001992 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800197c:	2200      	movs	r2, #0
 800197e:	6879      	ldr	r1, [r7, #4]
 8001980:	f04f 30ff 	mov.w	r0, #4294967295
 8001984:	f000 f92f 	bl	8001be6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001988:	4a06      	ldr	r2, [pc, #24]	; (80019a4 <HAL_InitTick+0x5c>)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800198e:	2300      	movs	r3, #0
 8001990:	e000      	b.n	8001994 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001992:	2301      	movs	r3, #1
}
 8001994:	4618      	mov	r0, r3
 8001996:	3708      	adds	r7, #8
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	2000006c 	.word	0x2000006c
 80019a0:	20000074 	.word	0x20000074
 80019a4:	20000070 	.word	0x20000070

080019a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019ac:	4b06      	ldr	r3, [pc, #24]	; (80019c8 <HAL_IncTick+0x20>)
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	461a      	mov	r2, r3
 80019b2:	4b06      	ldr	r3, [pc, #24]	; (80019cc <HAL_IncTick+0x24>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4413      	add	r3, r2
 80019b8:	4a04      	ldr	r2, [pc, #16]	; (80019cc <HAL_IncTick+0x24>)
 80019ba:	6013      	str	r3, [r2, #0]
}
 80019bc:	bf00      	nop
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr
 80019c6:	bf00      	nop
 80019c8:	20000074 	.word	0x20000074
 80019cc:	200003ac 	.word	0x200003ac

080019d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  return uwTick;
 80019d4:	4b03      	ldr	r3, [pc, #12]	; (80019e4 <HAL_GetTick+0x14>)
 80019d6:	681b      	ldr	r3, [r3, #0]
}
 80019d8:	4618      	mov	r0, r3
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr
 80019e2:	bf00      	nop
 80019e4:	200003ac 	.word	0x200003ac

080019e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b084      	sub	sp, #16
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019f0:	f7ff ffee 	bl	80019d0 <HAL_GetTick>
 80019f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a00:	d005      	beq.n	8001a0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a02:	4b0a      	ldr	r3, [pc, #40]	; (8001a2c <HAL_Delay+0x44>)
 8001a04:	781b      	ldrb	r3, [r3, #0]
 8001a06:	461a      	mov	r2, r3
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	4413      	add	r3, r2
 8001a0c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a0e:	bf00      	nop
 8001a10:	f7ff ffde 	bl	80019d0 <HAL_GetTick>
 8001a14:	4602      	mov	r2, r0
 8001a16:	68bb      	ldr	r3, [r7, #8]
 8001a18:	1ad3      	subs	r3, r2, r3
 8001a1a:	68fa      	ldr	r2, [r7, #12]
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	d8f7      	bhi.n	8001a10 <HAL_Delay+0x28>
  {
  }
}
 8001a20:	bf00      	nop
 8001a22:	bf00      	nop
 8001a24:	3710      	adds	r7, #16
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	20000074 	.word	0x20000074

08001a30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b085      	sub	sp, #20
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	f003 0307 	and.w	r3, r3, #7
 8001a3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a40:	4b0c      	ldr	r3, [pc, #48]	; (8001a74 <__NVIC_SetPriorityGrouping+0x44>)
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a46:	68ba      	ldr	r2, [r7, #8]
 8001a48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a62:	4a04      	ldr	r2, [pc, #16]	; (8001a74 <__NVIC_SetPriorityGrouping+0x44>)
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	60d3      	str	r3, [r2, #12]
}
 8001a68:	bf00      	nop
 8001a6a:	3714      	adds	r7, #20
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr
 8001a74:	e000ed00 	.word	0xe000ed00

08001a78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a7c:	4b04      	ldr	r3, [pc, #16]	; (8001a90 <__NVIC_GetPriorityGrouping+0x18>)
 8001a7e:	68db      	ldr	r3, [r3, #12]
 8001a80:	0a1b      	lsrs	r3, r3, #8
 8001a82:	f003 0307 	and.w	r3, r3, #7
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr
 8001a90:	e000ed00 	.word	0xe000ed00

08001a94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	db0b      	blt.n	8001abe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001aa6:	79fb      	ldrb	r3, [r7, #7]
 8001aa8:	f003 021f 	and.w	r2, r3, #31
 8001aac:	4907      	ldr	r1, [pc, #28]	; (8001acc <__NVIC_EnableIRQ+0x38>)
 8001aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ab2:	095b      	lsrs	r3, r3, #5
 8001ab4:	2001      	movs	r0, #1
 8001ab6:	fa00 f202 	lsl.w	r2, r0, r2
 8001aba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001abe:	bf00      	nop
 8001ac0:	370c      	adds	r7, #12
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr
 8001aca:	bf00      	nop
 8001acc:	e000e100 	.word	0xe000e100

08001ad0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	6039      	str	r1, [r7, #0]
 8001ada:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001adc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	db0a      	blt.n	8001afa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	b2da      	uxtb	r2, r3
 8001ae8:	490c      	ldr	r1, [pc, #48]	; (8001b1c <__NVIC_SetPriority+0x4c>)
 8001aea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aee:	0112      	lsls	r2, r2, #4
 8001af0:	b2d2      	uxtb	r2, r2
 8001af2:	440b      	add	r3, r1
 8001af4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001af8:	e00a      	b.n	8001b10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	b2da      	uxtb	r2, r3
 8001afe:	4908      	ldr	r1, [pc, #32]	; (8001b20 <__NVIC_SetPriority+0x50>)
 8001b00:	79fb      	ldrb	r3, [r7, #7]
 8001b02:	f003 030f 	and.w	r3, r3, #15
 8001b06:	3b04      	subs	r3, #4
 8001b08:	0112      	lsls	r2, r2, #4
 8001b0a:	b2d2      	uxtb	r2, r2
 8001b0c:	440b      	add	r3, r1
 8001b0e:	761a      	strb	r2, [r3, #24]
}
 8001b10:	bf00      	nop
 8001b12:	370c      	adds	r7, #12
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr
 8001b1c:	e000e100 	.word	0xe000e100
 8001b20:	e000ed00 	.word	0xe000ed00

08001b24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b089      	sub	sp, #36	; 0x24
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	60f8      	str	r0, [r7, #12]
 8001b2c:	60b9      	str	r1, [r7, #8]
 8001b2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	f003 0307 	and.w	r3, r3, #7
 8001b36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b38:	69fb      	ldr	r3, [r7, #28]
 8001b3a:	f1c3 0307 	rsb	r3, r3, #7
 8001b3e:	2b04      	cmp	r3, #4
 8001b40:	bf28      	it	cs
 8001b42:	2304      	movcs	r3, #4
 8001b44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	3304      	adds	r3, #4
 8001b4a:	2b06      	cmp	r3, #6
 8001b4c:	d902      	bls.n	8001b54 <NVIC_EncodePriority+0x30>
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	3b03      	subs	r3, #3
 8001b52:	e000      	b.n	8001b56 <NVIC_EncodePriority+0x32>
 8001b54:	2300      	movs	r3, #0
 8001b56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b58:	f04f 32ff 	mov.w	r2, #4294967295
 8001b5c:	69bb      	ldr	r3, [r7, #24]
 8001b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b62:	43da      	mvns	r2, r3
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	401a      	ands	r2, r3
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b6c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	fa01 f303 	lsl.w	r3, r1, r3
 8001b76:	43d9      	mvns	r1, r3
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b7c:	4313      	orrs	r3, r2
         );
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3724      	adds	r7, #36	; 0x24
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr
	...

08001b8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b082      	sub	sp, #8
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	3b01      	subs	r3, #1
 8001b98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b9c:	d301      	bcc.n	8001ba2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e00f      	b.n	8001bc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ba2:	4a0a      	ldr	r2, [pc, #40]	; (8001bcc <SysTick_Config+0x40>)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	3b01      	subs	r3, #1
 8001ba8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001baa:	210f      	movs	r1, #15
 8001bac:	f04f 30ff 	mov.w	r0, #4294967295
 8001bb0:	f7ff ff8e 	bl	8001ad0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bb4:	4b05      	ldr	r3, [pc, #20]	; (8001bcc <SysTick_Config+0x40>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bba:	4b04      	ldr	r3, [pc, #16]	; (8001bcc <SysTick_Config+0x40>)
 8001bbc:	2207      	movs	r2, #7
 8001bbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bc0:	2300      	movs	r3, #0
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3708      	adds	r7, #8
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	e000e010 	.word	0xe000e010

08001bd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bd8:	6878      	ldr	r0, [r7, #4]
 8001bda:	f7ff ff29 	bl	8001a30 <__NVIC_SetPriorityGrouping>
}
 8001bde:	bf00      	nop
 8001be0:	3708      	adds	r7, #8
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}

08001be6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001be6:	b580      	push	{r7, lr}
 8001be8:	b086      	sub	sp, #24
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	4603      	mov	r3, r0
 8001bee:	60b9      	str	r1, [r7, #8]
 8001bf0:	607a      	str	r2, [r7, #4]
 8001bf2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bf8:	f7ff ff3e 	bl	8001a78 <__NVIC_GetPriorityGrouping>
 8001bfc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bfe:	687a      	ldr	r2, [r7, #4]
 8001c00:	68b9      	ldr	r1, [r7, #8]
 8001c02:	6978      	ldr	r0, [r7, #20]
 8001c04:	f7ff ff8e 	bl	8001b24 <NVIC_EncodePriority>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c0e:	4611      	mov	r1, r2
 8001c10:	4618      	mov	r0, r3
 8001c12:	f7ff ff5d 	bl	8001ad0 <__NVIC_SetPriority>
}
 8001c16:	bf00      	nop
 8001c18:	3718      	adds	r7, #24
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}

08001c1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c1e:	b580      	push	{r7, lr}
 8001c20:	b082      	sub	sp, #8
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	4603      	mov	r3, r0
 8001c26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f7ff ff31 	bl	8001a94 <__NVIC_EnableIRQ>
}
 8001c32:	bf00      	nop
 8001c34:	3708      	adds	r7, #8
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}

08001c3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c3a:	b580      	push	{r7, lr}
 8001c3c:	b082      	sub	sp, #8
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c42:	6878      	ldr	r0, [r7, #4]
 8001c44:	f7ff ffa2 	bl	8001b8c <SysTick_Config>
 8001c48:	4603      	mov	r3, r0
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3708      	adds	r7, #8
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
	...

08001c54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b089      	sub	sp, #36	; 0x24
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
 8001c5c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c62:	2300      	movs	r3, #0
 8001c64:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c66:	2300      	movs	r3, #0
 8001c68:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	61fb      	str	r3, [r7, #28]
 8001c6e:	e16b      	b.n	8001f48 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c70:	2201      	movs	r2, #1
 8001c72:	69fb      	ldr	r3, [r7, #28]
 8001c74:	fa02 f303 	lsl.w	r3, r2, r3
 8001c78:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	697a      	ldr	r2, [r7, #20]
 8001c80:	4013      	ands	r3, r2
 8001c82:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c84:	693a      	ldr	r2, [r7, #16]
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	f040 815a 	bne.w	8001f42 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	f003 0303 	and.w	r3, r3, #3
 8001c96:	2b01      	cmp	r3, #1
 8001c98:	d005      	beq.n	8001ca6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ca2:	2b02      	cmp	r3, #2
 8001ca4:	d130      	bne.n	8001d08 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001cac:	69fb      	ldr	r3, [r7, #28]
 8001cae:	005b      	lsls	r3, r3, #1
 8001cb0:	2203      	movs	r2, #3
 8001cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb6:	43db      	mvns	r3, r3
 8001cb8:	69ba      	ldr	r2, [r7, #24]
 8001cba:	4013      	ands	r3, r2
 8001cbc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	68da      	ldr	r2, [r3, #12]
 8001cc2:	69fb      	ldr	r3, [r7, #28]
 8001cc4:	005b      	lsls	r3, r3, #1
 8001cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cca:	69ba      	ldr	r2, [r7, #24]
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	69ba      	ldr	r2, [r7, #24]
 8001cd4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001cdc:	2201      	movs	r2, #1
 8001cde:	69fb      	ldr	r3, [r7, #28]
 8001ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce4:	43db      	mvns	r3, r3
 8001ce6:	69ba      	ldr	r2, [r7, #24]
 8001ce8:	4013      	ands	r3, r2
 8001cea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	091b      	lsrs	r3, r3, #4
 8001cf2:	f003 0201 	and.w	r2, r3, #1
 8001cf6:	69fb      	ldr	r3, [r7, #28]
 8001cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfc:	69ba      	ldr	r2, [r7, #24]
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	69ba      	ldr	r2, [r7, #24]
 8001d06:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	f003 0303 	and.w	r3, r3, #3
 8001d10:	2b03      	cmp	r3, #3
 8001d12:	d017      	beq.n	8001d44 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	005b      	lsls	r3, r3, #1
 8001d1e:	2203      	movs	r2, #3
 8001d20:	fa02 f303 	lsl.w	r3, r2, r3
 8001d24:	43db      	mvns	r3, r3
 8001d26:	69ba      	ldr	r2, [r7, #24]
 8001d28:	4013      	ands	r3, r2
 8001d2a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	689a      	ldr	r2, [r3, #8]
 8001d30:	69fb      	ldr	r3, [r7, #28]
 8001d32:	005b      	lsls	r3, r3, #1
 8001d34:	fa02 f303 	lsl.w	r3, r2, r3
 8001d38:	69ba      	ldr	r2, [r7, #24]
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	69ba      	ldr	r2, [r7, #24]
 8001d42:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	f003 0303 	and.w	r3, r3, #3
 8001d4c:	2b02      	cmp	r3, #2
 8001d4e:	d123      	bne.n	8001d98 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d50:	69fb      	ldr	r3, [r7, #28]
 8001d52:	08da      	lsrs	r2, r3, #3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	3208      	adds	r2, #8
 8001d58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	f003 0307 	and.w	r3, r3, #7
 8001d64:	009b      	lsls	r3, r3, #2
 8001d66:	220f      	movs	r2, #15
 8001d68:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6c:	43db      	mvns	r3, r3
 8001d6e:	69ba      	ldr	r2, [r7, #24]
 8001d70:	4013      	ands	r3, r2
 8001d72:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	691a      	ldr	r2, [r3, #16]
 8001d78:	69fb      	ldr	r3, [r7, #28]
 8001d7a:	f003 0307 	and.w	r3, r3, #7
 8001d7e:	009b      	lsls	r3, r3, #2
 8001d80:	fa02 f303 	lsl.w	r3, r2, r3
 8001d84:	69ba      	ldr	r2, [r7, #24]
 8001d86:	4313      	orrs	r3, r2
 8001d88:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d8a:	69fb      	ldr	r3, [r7, #28]
 8001d8c:	08da      	lsrs	r2, r3, #3
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	3208      	adds	r2, #8
 8001d92:	69b9      	ldr	r1, [r7, #24]
 8001d94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	005b      	lsls	r3, r3, #1
 8001da2:	2203      	movs	r2, #3
 8001da4:	fa02 f303 	lsl.w	r3, r2, r3
 8001da8:	43db      	mvns	r3, r3
 8001daa:	69ba      	ldr	r2, [r7, #24]
 8001dac:	4013      	ands	r3, r2
 8001dae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	f003 0203 	and.w	r2, r3, #3
 8001db8:	69fb      	ldr	r3, [r7, #28]
 8001dba:	005b      	lsls	r3, r3, #1
 8001dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc0:	69ba      	ldr	r2, [r7, #24]
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	69ba      	ldr	r2, [r7, #24]
 8001dca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	f000 80b4 	beq.w	8001f42 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dda:	2300      	movs	r3, #0
 8001ddc:	60fb      	str	r3, [r7, #12]
 8001dde:	4b60      	ldr	r3, [pc, #384]	; (8001f60 <HAL_GPIO_Init+0x30c>)
 8001de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001de2:	4a5f      	ldr	r2, [pc, #380]	; (8001f60 <HAL_GPIO_Init+0x30c>)
 8001de4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001de8:	6453      	str	r3, [r2, #68]	; 0x44
 8001dea:	4b5d      	ldr	r3, [pc, #372]	; (8001f60 <HAL_GPIO_Init+0x30c>)
 8001dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001df2:	60fb      	str	r3, [r7, #12]
 8001df4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001df6:	4a5b      	ldr	r2, [pc, #364]	; (8001f64 <HAL_GPIO_Init+0x310>)
 8001df8:	69fb      	ldr	r3, [r7, #28]
 8001dfa:	089b      	lsrs	r3, r3, #2
 8001dfc:	3302      	adds	r3, #2
 8001dfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e02:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e04:	69fb      	ldr	r3, [r7, #28]
 8001e06:	f003 0303 	and.w	r3, r3, #3
 8001e0a:	009b      	lsls	r3, r3, #2
 8001e0c:	220f      	movs	r2, #15
 8001e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e12:	43db      	mvns	r3, r3
 8001e14:	69ba      	ldr	r2, [r7, #24]
 8001e16:	4013      	ands	r3, r2
 8001e18:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	4a52      	ldr	r2, [pc, #328]	; (8001f68 <HAL_GPIO_Init+0x314>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d02b      	beq.n	8001e7a <HAL_GPIO_Init+0x226>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	4a51      	ldr	r2, [pc, #324]	; (8001f6c <HAL_GPIO_Init+0x318>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d025      	beq.n	8001e76 <HAL_GPIO_Init+0x222>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	4a50      	ldr	r2, [pc, #320]	; (8001f70 <HAL_GPIO_Init+0x31c>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d01f      	beq.n	8001e72 <HAL_GPIO_Init+0x21e>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	4a4f      	ldr	r2, [pc, #316]	; (8001f74 <HAL_GPIO_Init+0x320>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d019      	beq.n	8001e6e <HAL_GPIO_Init+0x21a>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	4a4e      	ldr	r2, [pc, #312]	; (8001f78 <HAL_GPIO_Init+0x324>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d013      	beq.n	8001e6a <HAL_GPIO_Init+0x216>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4a4d      	ldr	r2, [pc, #308]	; (8001f7c <HAL_GPIO_Init+0x328>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d00d      	beq.n	8001e66 <HAL_GPIO_Init+0x212>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4a4c      	ldr	r2, [pc, #304]	; (8001f80 <HAL_GPIO_Init+0x32c>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d007      	beq.n	8001e62 <HAL_GPIO_Init+0x20e>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4a4b      	ldr	r2, [pc, #300]	; (8001f84 <HAL_GPIO_Init+0x330>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d101      	bne.n	8001e5e <HAL_GPIO_Init+0x20a>
 8001e5a:	2307      	movs	r3, #7
 8001e5c:	e00e      	b.n	8001e7c <HAL_GPIO_Init+0x228>
 8001e5e:	2308      	movs	r3, #8
 8001e60:	e00c      	b.n	8001e7c <HAL_GPIO_Init+0x228>
 8001e62:	2306      	movs	r3, #6
 8001e64:	e00a      	b.n	8001e7c <HAL_GPIO_Init+0x228>
 8001e66:	2305      	movs	r3, #5
 8001e68:	e008      	b.n	8001e7c <HAL_GPIO_Init+0x228>
 8001e6a:	2304      	movs	r3, #4
 8001e6c:	e006      	b.n	8001e7c <HAL_GPIO_Init+0x228>
 8001e6e:	2303      	movs	r3, #3
 8001e70:	e004      	b.n	8001e7c <HAL_GPIO_Init+0x228>
 8001e72:	2302      	movs	r3, #2
 8001e74:	e002      	b.n	8001e7c <HAL_GPIO_Init+0x228>
 8001e76:	2301      	movs	r3, #1
 8001e78:	e000      	b.n	8001e7c <HAL_GPIO_Init+0x228>
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	69fa      	ldr	r2, [r7, #28]
 8001e7e:	f002 0203 	and.w	r2, r2, #3
 8001e82:	0092      	lsls	r2, r2, #2
 8001e84:	4093      	lsls	r3, r2
 8001e86:	69ba      	ldr	r2, [r7, #24]
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e8c:	4935      	ldr	r1, [pc, #212]	; (8001f64 <HAL_GPIO_Init+0x310>)
 8001e8e:	69fb      	ldr	r3, [r7, #28]
 8001e90:	089b      	lsrs	r3, r3, #2
 8001e92:	3302      	adds	r3, #2
 8001e94:	69ba      	ldr	r2, [r7, #24]
 8001e96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e9a:	4b3b      	ldr	r3, [pc, #236]	; (8001f88 <HAL_GPIO_Init+0x334>)
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	43db      	mvns	r3, r3
 8001ea4:	69ba      	ldr	r2, [r7, #24]
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d003      	beq.n	8001ebe <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001eb6:	69ba      	ldr	r2, [r7, #24]
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ebe:	4a32      	ldr	r2, [pc, #200]	; (8001f88 <HAL_GPIO_Init+0x334>)
 8001ec0:	69bb      	ldr	r3, [r7, #24]
 8001ec2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ec4:	4b30      	ldr	r3, [pc, #192]	; (8001f88 <HAL_GPIO_Init+0x334>)
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	43db      	mvns	r3, r3
 8001ece:	69ba      	ldr	r2, [r7, #24]
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d003      	beq.n	8001ee8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001ee0:	69ba      	ldr	r2, [r7, #24]
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ee8:	4a27      	ldr	r2, [pc, #156]	; (8001f88 <HAL_GPIO_Init+0x334>)
 8001eea:	69bb      	ldr	r3, [r7, #24]
 8001eec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001eee:	4b26      	ldr	r3, [pc, #152]	; (8001f88 <HAL_GPIO_Init+0x334>)
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ef4:	693b      	ldr	r3, [r7, #16]
 8001ef6:	43db      	mvns	r3, r3
 8001ef8:	69ba      	ldr	r2, [r7, #24]
 8001efa:	4013      	ands	r3, r2
 8001efc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d003      	beq.n	8001f12 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001f0a:	69ba      	ldr	r2, [r7, #24]
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f12:	4a1d      	ldr	r2, [pc, #116]	; (8001f88 <HAL_GPIO_Init+0x334>)
 8001f14:	69bb      	ldr	r3, [r7, #24]
 8001f16:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f18:	4b1b      	ldr	r3, [pc, #108]	; (8001f88 <HAL_GPIO_Init+0x334>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	43db      	mvns	r3, r3
 8001f22:	69ba      	ldr	r2, [r7, #24]
 8001f24:	4013      	ands	r3, r2
 8001f26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d003      	beq.n	8001f3c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001f34:	69ba      	ldr	r2, [r7, #24]
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f3c:	4a12      	ldr	r2, [pc, #72]	; (8001f88 <HAL_GPIO_Init+0x334>)
 8001f3e:	69bb      	ldr	r3, [r7, #24]
 8001f40:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f42:	69fb      	ldr	r3, [r7, #28]
 8001f44:	3301      	adds	r3, #1
 8001f46:	61fb      	str	r3, [r7, #28]
 8001f48:	69fb      	ldr	r3, [r7, #28]
 8001f4a:	2b0f      	cmp	r3, #15
 8001f4c:	f67f ae90 	bls.w	8001c70 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f50:	bf00      	nop
 8001f52:	bf00      	nop
 8001f54:	3724      	adds	r7, #36	; 0x24
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr
 8001f5e:	bf00      	nop
 8001f60:	40023800 	.word	0x40023800
 8001f64:	40013800 	.word	0x40013800
 8001f68:	40020000 	.word	0x40020000
 8001f6c:	40020400 	.word	0x40020400
 8001f70:	40020800 	.word	0x40020800
 8001f74:	40020c00 	.word	0x40020c00
 8001f78:	40021000 	.word	0x40021000
 8001f7c:	40021400 	.word	0x40021400
 8001f80:	40021800 	.word	0x40021800
 8001f84:	40021c00 	.word	0x40021c00
 8001f88:	40013c00 	.word	0x40013c00

08001f8c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b087      	sub	sp, #28
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
 8001f94:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f96:	2300      	movs	r3, #0
 8001f98:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	617b      	str	r3, [r7, #20]
 8001fa6:	e0cd      	b.n	8002144 <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001fa8:	2201      	movs	r2, #1
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb0:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8001fb2:	683a      	ldr	r2, [r7, #0]
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8001fba:	68fa      	ldr	r2, [r7, #12]
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	429a      	cmp	r2, r3
 8001fc0:	f040 80bd 	bne.w	800213e <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8001fc4:	4a65      	ldr	r2, [pc, #404]	; (800215c <HAL_GPIO_DeInit+0x1d0>)
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	089b      	lsrs	r3, r3, #2
 8001fca:	3302      	adds	r3, #2
 8001fcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fd0:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	f003 0303 	and.w	r3, r3, #3
 8001fd8:	009b      	lsls	r3, r3, #2
 8001fda:	220f      	movs	r2, #15
 8001fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe0:	68ba      	ldr	r2, [r7, #8]
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	4a5d      	ldr	r2, [pc, #372]	; (8002160 <HAL_GPIO_DeInit+0x1d4>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d02b      	beq.n	8002046 <HAL_GPIO_DeInit+0xba>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	4a5c      	ldr	r2, [pc, #368]	; (8002164 <HAL_GPIO_DeInit+0x1d8>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d025      	beq.n	8002042 <HAL_GPIO_DeInit+0xb6>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	4a5b      	ldr	r2, [pc, #364]	; (8002168 <HAL_GPIO_DeInit+0x1dc>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d01f      	beq.n	800203e <HAL_GPIO_DeInit+0xb2>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	4a5a      	ldr	r2, [pc, #360]	; (800216c <HAL_GPIO_DeInit+0x1e0>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d019      	beq.n	800203a <HAL_GPIO_DeInit+0xae>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4a59      	ldr	r2, [pc, #356]	; (8002170 <HAL_GPIO_DeInit+0x1e4>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d013      	beq.n	8002036 <HAL_GPIO_DeInit+0xaa>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	4a58      	ldr	r2, [pc, #352]	; (8002174 <HAL_GPIO_DeInit+0x1e8>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d00d      	beq.n	8002032 <HAL_GPIO_DeInit+0xa6>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	4a57      	ldr	r2, [pc, #348]	; (8002178 <HAL_GPIO_DeInit+0x1ec>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d007      	beq.n	800202e <HAL_GPIO_DeInit+0xa2>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4a56      	ldr	r2, [pc, #344]	; (800217c <HAL_GPIO_DeInit+0x1f0>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d101      	bne.n	800202a <HAL_GPIO_DeInit+0x9e>
 8002026:	2307      	movs	r3, #7
 8002028:	e00e      	b.n	8002048 <HAL_GPIO_DeInit+0xbc>
 800202a:	2308      	movs	r3, #8
 800202c:	e00c      	b.n	8002048 <HAL_GPIO_DeInit+0xbc>
 800202e:	2306      	movs	r3, #6
 8002030:	e00a      	b.n	8002048 <HAL_GPIO_DeInit+0xbc>
 8002032:	2305      	movs	r3, #5
 8002034:	e008      	b.n	8002048 <HAL_GPIO_DeInit+0xbc>
 8002036:	2304      	movs	r3, #4
 8002038:	e006      	b.n	8002048 <HAL_GPIO_DeInit+0xbc>
 800203a:	2303      	movs	r3, #3
 800203c:	e004      	b.n	8002048 <HAL_GPIO_DeInit+0xbc>
 800203e:	2302      	movs	r3, #2
 8002040:	e002      	b.n	8002048 <HAL_GPIO_DeInit+0xbc>
 8002042:	2301      	movs	r3, #1
 8002044:	e000      	b.n	8002048 <HAL_GPIO_DeInit+0xbc>
 8002046:	2300      	movs	r3, #0
 8002048:	697a      	ldr	r2, [r7, #20]
 800204a:	f002 0203 	and.w	r2, r2, #3
 800204e:	0092      	lsls	r2, r2, #2
 8002050:	4093      	lsls	r3, r2
 8002052:	68ba      	ldr	r2, [r7, #8]
 8002054:	429a      	cmp	r2, r3
 8002056:	d132      	bne.n	80020be <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002058:	4b49      	ldr	r3, [pc, #292]	; (8002180 <HAL_GPIO_DeInit+0x1f4>)
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	43db      	mvns	r3, r3
 8002060:	4947      	ldr	r1, [pc, #284]	; (8002180 <HAL_GPIO_DeInit+0x1f4>)
 8002062:	4013      	ands	r3, r2
 8002064:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8002066:	4b46      	ldr	r3, [pc, #280]	; (8002180 <HAL_GPIO_DeInit+0x1f4>)
 8002068:	685a      	ldr	r2, [r3, #4]
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	43db      	mvns	r3, r3
 800206e:	4944      	ldr	r1, [pc, #272]	; (8002180 <HAL_GPIO_DeInit+0x1f4>)
 8002070:	4013      	ands	r3, r2
 8002072:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002074:	4b42      	ldr	r3, [pc, #264]	; (8002180 <HAL_GPIO_DeInit+0x1f4>)
 8002076:	68da      	ldr	r2, [r3, #12]
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	43db      	mvns	r3, r3
 800207c:	4940      	ldr	r1, [pc, #256]	; (8002180 <HAL_GPIO_DeInit+0x1f4>)
 800207e:	4013      	ands	r3, r2
 8002080:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002082:	4b3f      	ldr	r3, [pc, #252]	; (8002180 <HAL_GPIO_DeInit+0x1f4>)
 8002084:	689a      	ldr	r2, [r3, #8]
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	43db      	mvns	r3, r3
 800208a:	493d      	ldr	r1, [pc, #244]	; (8002180 <HAL_GPIO_DeInit+0x1f4>)
 800208c:	4013      	ands	r3, r2
 800208e:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	f003 0303 	and.w	r3, r3, #3
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	220f      	movs	r2, #15
 800209a:	fa02 f303 	lsl.w	r3, r2, r3
 800209e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80020a0:	4a2e      	ldr	r2, [pc, #184]	; (800215c <HAL_GPIO_DeInit+0x1d0>)
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	089b      	lsrs	r3, r3, #2
 80020a6:	3302      	adds	r3, #2
 80020a8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	43da      	mvns	r2, r3
 80020b0:	482a      	ldr	r0, [pc, #168]	; (800215c <HAL_GPIO_DeInit+0x1d0>)
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	089b      	lsrs	r3, r3, #2
 80020b6:	400a      	ands	r2, r1
 80020b8:	3302      	adds	r3, #2
 80020ba:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	005b      	lsls	r3, r3, #1
 80020c6:	2103      	movs	r1, #3
 80020c8:	fa01 f303 	lsl.w	r3, r1, r3
 80020cc:	43db      	mvns	r3, r3
 80020ce:	401a      	ands	r2, r3
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	08da      	lsrs	r2, r3, #3
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	3208      	adds	r2, #8
 80020dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	f003 0307 	and.w	r3, r3, #7
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	220f      	movs	r2, #15
 80020ea:	fa02 f303 	lsl.w	r3, r2, r3
 80020ee:	43db      	mvns	r3, r3
 80020f0:	697a      	ldr	r2, [r7, #20]
 80020f2:	08d2      	lsrs	r2, r2, #3
 80020f4:	4019      	ands	r1, r3
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	3208      	adds	r2, #8
 80020fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	68da      	ldr	r2, [r3, #12]
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	005b      	lsls	r3, r3, #1
 8002106:	2103      	movs	r1, #3
 8002108:	fa01 f303 	lsl.w	r3, r1, r3
 800210c:	43db      	mvns	r3, r3
 800210e:	401a      	ands	r2, r3
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	685a      	ldr	r2, [r3, #4]
 8002118:	2101      	movs	r1, #1
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	fa01 f303 	lsl.w	r3, r1, r3
 8002120:	43db      	mvns	r3, r3
 8002122:	401a      	ands	r2, r3
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	689a      	ldr	r2, [r3, #8]
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	005b      	lsls	r3, r3, #1
 8002130:	2103      	movs	r1, #3
 8002132:	fa01 f303 	lsl.w	r3, r1, r3
 8002136:	43db      	mvns	r3, r3
 8002138:	401a      	ands	r2, r3
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	3301      	adds	r3, #1
 8002142:	617b      	str	r3, [r7, #20]
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	2b0f      	cmp	r3, #15
 8002148:	f67f af2e 	bls.w	8001fa8 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800214c:	bf00      	nop
 800214e:	bf00      	nop
 8002150:	371c      	adds	r7, #28
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr
 800215a:	bf00      	nop
 800215c:	40013800 	.word	0x40013800
 8002160:	40020000 	.word	0x40020000
 8002164:	40020400 	.word	0x40020400
 8002168:	40020800 	.word	0x40020800
 800216c:	40020c00 	.word	0x40020c00
 8002170:	40021000 	.word	0x40021000
 8002174:	40021400 	.word	0x40021400
 8002178:	40021800 	.word	0x40021800
 800217c:	40021c00 	.word	0x40021c00
 8002180:	40013c00 	.word	0x40013c00

08002184 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002184:	b480      	push	{r7}
 8002186:	b085      	sub	sp, #20
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
 800218c:	460b      	mov	r3, r1
 800218e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	691a      	ldr	r2, [r3, #16]
 8002194:	887b      	ldrh	r3, [r7, #2]
 8002196:	4013      	ands	r3, r2
 8002198:	2b00      	cmp	r3, #0
 800219a:	d002      	beq.n	80021a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800219c:	2301      	movs	r3, #1
 800219e:	73fb      	strb	r3, [r7, #15]
 80021a0:	e001      	b.n	80021a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80021a2:	2300      	movs	r3, #0
 80021a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80021a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	3714      	adds	r7, #20
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr

080021b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b083      	sub	sp, #12
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
 80021bc:	460b      	mov	r3, r1
 80021be:	807b      	strh	r3, [r7, #2]
 80021c0:	4613      	mov	r3, r2
 80021c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021c4:	787b      	ldrb	r3, [r7, #1]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d003      	beq.n	80021d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021ca:	887a      	ldrh	r2, [r7, #2]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80021d0:	e003      	b.n	80021da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80021d2:	887b      	ldrh	r3, [r7, #2]
 80021d4:	041a      	lsls	r2, r3, #16
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	619a      	str	r2, [r3, #24]
}
 80021da:	bf00      	nop
 80021dc:	370c      	adds	r7, #12
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr

080021e6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80021e6:	b480      	push	{r7}
 80021e8:	b085      	sub	sp, #20
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	6078      	str	r0, [r7, #4]
 80021ee:	460b      	mov	r3, r1
 80021f0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	695b      	ldr	r3, [r3, #20]
 80021f6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80021f8:	887a      	ldrh	r2, [r7, #2]
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	4013      	ands	r3, r2
 80021fe:	041a      	lsls	r2, r3, #16
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	43d9      	mvns	r1, r3
 8002204:	887b      	ldrh	r3, [r7, #2]
 8002206:	400b      	ands	r3, r1
 8002208:	431a      	orrs	r2, r3
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	619a      	str	r2, [r3, #24]
}
 800220e:	bf00      	nop
 8002210:	3714      	adds	r7, #20
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr
	...

0800221c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b084      	sub	sp, #16
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d101      	bne.n	800222e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e12b      	b.n	8002486 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002234:	b2db      	uxtb	r3, r3
 8002236:	2b00      	cmp	r3, #0
 8002238:	d106      	bne.n	8002248 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2200      	movs	r2, #0
 800223e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	f7ff f98a 	bl	800155c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2224      	movs	r2, #36	; 0x24
 800224c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f022 0201 	bic.w	r2, r2, #1
 800225e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800226e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800227e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002280:	f002 fc9e 	bl	8004bc0 <HAL_RCC_GetPCLK1Freq>
 8002284:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	4a81      	ldr	r2, [pc, #516]	; (8002490 <HAL_I2C_Init+0x274>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d807      	bhi.n	80022a0 <HAL_I2C_Init+0x84>
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	4a80      	ldr	r2, [pc, #512]	; (8002494 <HAL_I2C_Init+0x278>)
 8002294:	4293      	cmp	r3, r2
 8002296:	bf94      	ite	ls
 8002298:	2301      	movls	r3, #1
 800229a:	2300      	movhi	r3, #0
 800229c:	b2db      	uxtb	r3, r3
 800229e:	e006      	b.n	80022ae <HAL_I2C_Init+0x92>
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	4a7d      	ldr	r2, [pc, #500]	; (8002498 <HAL_I2C_Init+0x27c>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	bf94      	ite	ls
 80022a8:	2301      	movls	r3, #1
 80022aa:	2300      	movhi	r3, #0
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d001      	beq.n	80022b6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e0e7      	b.n	8002486 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	4a78      	ldr	r2, [pc, #480]	; (800249c <HAL_I2C_Init+0x280>)
 80022ba:	fba2 2303 	umull	r2, r3, r2, r3
 80022be:	0c9b      	lsrs	r3, r3, #18
 80022c0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	68ba      	ldr	r2, [r7, #8]
 80022d2:	430a      	orrs	r2, r1
 80022d4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	6a1b      	ldr	r3, [r3, #32]
 80022dc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	4a6a      	ldr	r2, [pc, #424]	; (8002490 <HAL_I2C_Init+0x274>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d802      	bhi.n	80022f0 <HAL_I2C_Init+0xd4>
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	3301      	adds	r3, #1
 80022ee:	e009      	b.n	8002304 <HAL_I2C_Init+0xe8>
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80022f6:	fb02 f303 	mul.w	r3, r2, r3
 80022fa:	4a69      	ldr	r2, [pc, #420]	; (80024a0 <HAL_I2C_Init+0x284>)
 80022fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002300:	099b      	lsrs	r3, r3, #6
 8002302:	3301      	adds	r3, #1
 8002304:	687a      	ldr	r2, [r7, #4]
 8002306:	6812      	ldr	r2, [r2, #0]
 8002308:	430b      	orrs	r3, r1
 800230a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	69db      	ldr	r3, [r3, #28]
 8002312:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002316:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	495c      	ldr	r1, [pc, #368]	; (8002490 <HAL_I2C_Init+0x274>)
 8002320:	428b      	cmp	r3, r1
 8002322:	d819      	bhi.n	8002358 <HAL_I2C_Init+0x13c>
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	1e59      	subs	r1, r3, #1
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	005b      	lsls	r3, r3, #1
 800232e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002332:	1c59      	adds	r1, r3, #1
 8002334:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002338:	400b      	ands	r3, r1
 800233a:	2b00      	cmp	r3, #0
 800233c:	d00a      	beq.n	8002354 <HAL_I2C_Init+0x138>
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	1e59      	subs	r1, r3, #1
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	005b      	lsls	r3, r3, #1
 8002348:	fbb1 f3f3 	udiv	r3, r1, r3
 800234c:	3301      	adds	r3, #1
 800234e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002352:	e051      	b.n	80023f8 <HAL_I2C_Init+0x1dc>
 8002354:	2304      	movs	r3, #4
 8002356:	e04f      	b.n	80023f8 <HAL_I2C_Init+0x1dc>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d111      	bne.n	8002384 <HAL_I2C_Init+0x168>
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	1e58      	subs	r0, r3, #1
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6859      	ldr	r1, [r3, #4]
 8002368:	460b      	mov	r3, r1
 800236a:	005b      	lsls	r3, r3, #1
 800236c:	440b      	add	r3, r1
 800236e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002372:	3301      	adds	r3, #1
 8002374:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002378:	2b00      	cmp	r3, #0
 800237a:	bf0c      	ite	eq
 800237c:	2301      	moveq	r3, #1
 800237e:	2300      	movne	r3, #0
 8002380:	b2db      	uxtb	r3, r3
 8002382:	e012      	b.n	80023aa <HAL_I2C_Init+0x18e>
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	1e58      	subs	r0, r3, #1
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6859      	ldr	r1, [r3, #4]
 800238c:	460b      	mov	r3, r1
 800238e:	009b      	lsls	r3, r3, #2
 8002390:	440b      	add	r3, r1
 8002392:	0099      	lsls	r1, r3, #2
 8002394:	440b      	add	r3, r1
 8002396:	fbb0 f3f3 	udiv	r3, r0, r3
 800239a:	3301      	adds	r3, #1
 800239c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	bf0c      	ite	eq
 80023a4:	2301      	moveq	r3, #1
 80023a6:	2300      	movne	r3, #0
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d001      	beq.n	80023b2 <HAL_I2C_Init+0x196>
 80023ae:	2301      	movs	r3, #1
 80023b0:	e022      	b.n	80023f8 <HAL_I2C_Init+0x1dc>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d10e      	bne.n	80023d8 <HAL_I2C_Init+0x1bc>
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	1e58      	subs	r0, r3, #1
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6859      	ldr	r1, [r3, #4]
 80023c2:	460b      	mov	r3, r1
 80023c4:	005b      	lsls	r3, r3, #1
 80023c6:	440b      	add	r3, r1
 80023c8:	fbb0 f3f3 	udiv	r3, r0, r3
 80023cc:	3301      	adds	r3, #1
 80023ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023d6:	e00f      	b.n	80023f8 <HAL_I2C_Init+0x1dc>
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	1e58      	subs	r0, r3, #1
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6859      	ldr	r1, [r3, #4]
 80023e0:	460b      	mov	r3, r1
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	440b      	add	r3, r1
 80023e6:	0099      	lsls	r1, r3, #2
 80023e8:	440b      	add	r3, r1
 80023ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80023ee:	3301      	adds	r3, #1
 80023f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023f4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80023f8:	6879      	ldr	r1, [r7, #4]
 80023fa:	6809      	ldr	r1, [r1, #0]
 80023fc:	4313      	orrs	r3, r2
 80023fe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	69da      	ldr	r2, [r3, #28]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6a1b      	ldr	r3, [r3, #32]
 8002412:	431a      	orrs	r2, r3
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	430a      	orrs	r2, r1
 800241a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002426:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800242a:	687a      	ldr	r2, [r7, #4]
 800242c:	6911      	ldr	r1, [r2, #16]
 800242e:	687a      	ldr	r2, [r7, #4]
 8002430:	68d2      	ldr	r2, [r2, #12]
 8002432:	4311      	orrs	r1, r2
 8002434:	687a      	ldr	r2, [r7, #4]
 8002436:	6812      	ldr	r2, [r2, #0]
 8002438:	430b      	orrs	r3, r1
 800243a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	68db      	ldr	r3, [r3, #12]
 8002442:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	695a      	ldr	r2, [r3, #20]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	699b      	ldr	r3, [r3, #24]
 800244e:	431a      	orrs	r2, r3
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	430a      	orrs	r2, r1
 8002456:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f042 0201 	orr.w	r2, r2, #1
 8002466:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2200      	movs	r2, #0
 800246c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2220      	movs	r2, #32
 8002472:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2200      	movs	r2, #0
 800247a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2200      	movs	r2, #0
 8002480:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002484:	2300      	movs	r3, #0
}
 8002486:	4618      	mov	r0, r3
 8002488:	3710      	adds	r7, #16
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	000186a0 	.word	0x000186a0
 8002494:	001e847f 	.word	0x001e847f
 8002498:	003d08ff 	.word	0x003d08ff
 800249c:	431bde83 	.word	0x431bde83
 80024a0:	10624dd3 	.word	0x10624dd3

080024a4 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b088      	sub	sp, #32
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d101      	bne.n	80024b6 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e128      	b.n	8002708 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d109      	bne.n	80024d6 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2200      	movs	r2, #0
 80024c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	4a90      	ldr	r2, [pc, #576]	; (8002710 <HAL_I2S_Init+0x26c>)
 80024ce:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80024d0:	6878      	ldr	r0, [r7, #4]
 80024d2:	f7ff f88b 	bl	80015ec <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2202      	movs	r2, #2
 80024da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	69db      	ldr	r3, [r3, #28]
 80024e4:	687a      	ldr	r2, [r7, #4]
 80024e6:	6812      	ldr	r2, [r2, #0]
 80024e8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80024ec:	f023 030f 	bic.w	r3, r3, #15
 80024f0:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	2202      	movs	r2, #2
 80024f8:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	695b      	ldr	r3, [r3, #20]
 80024fe:	2b02      	cmp	r3, #2
 8002500:	d060      	beq.n	80025c4 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	68db      	ldr	r3, [r3, #12]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d102      	bne.n	8002510 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800250a:	2310      	movs	r3, #16
 800250c:	617b      	str	r3, [r7, #20]
 800250e:	e001      	b.n	8002514 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002510:	2320      	movs	r3, #32
 8002512:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	2b20      	cmp	r3, #32
 800251a:	d802      	bhi.n	8002522 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	005b      	lsls	r3, r3, #1
 8002520:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8002522:	2001      	movs	r0, #1
 8002524:	f002 fc42 	bl	8004dac <HAL_RCCEx_GetPeriphCLKFreq>
 8002528:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	691b      	ldr	r3, [r3, #16]
 800252e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002532:	d125      	bne.n	8002580 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d010      	beq.n	800255e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	68fa      	ldr	r2, [r7, #12]
 8002542:	fbb2 f2f3 	udiv	r2, r2, r3
 8002546:	4613      	mov	r3, r2
 8002548:	009b      	lsls	r3, r3, #2
 800254a:	4413      	add	r3, r2
 800254c:	005b      	lsls	r3, r3, #1
 800254e:	461a      	mov	r2, r3
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	695b      	ldr	r3, [r3, #20]
 8002554:	fbb2 f3f3 	udiv	r3, r2, r3
 8002558:	3305      	adds	r3, #5
 800255a:	613b      	str	r3, [r7, #16]
 800255c:	e01f      	b.n	800259e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	00db      	lsls	r3, r3, #3
 8002562:	68fa      	ldr	r2, [r7, #12]
 8002564:	fbb2 f2f3 	udiv	r2, r2, r3
 8002568:	4613      	mov	r3, r2
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	4413      	add	r3, r2
 800256e:	005b      	lsls	r3, r3, #1
 8002570:	461a      	mov	r2, r3
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	695b      	ldr	r3, [r3, #20]
 8002576:	fbb2 f3f3 	udiv	r3, r2, r3
 800257a:	3305      	adds	r3, #5
 800257c:	613b      	str	r3, [r7, #16]
 800257e:	e00e      	b.n	800259e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002580:	68fa      	ldr	r2, [r7, #12]
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	fbb2 f2f3 	udiv	r2, r2, r3
 8002588:	4613      	mov	r3, r2
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	4413      	add	r3, r2
 800258e:	005b      	lsls	r3, r3, #1
 8002590:	461a      	mov	r2, r3
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	695b      	ldr	r3, [r3, #20]
 8002596:	fbb2 f3f3 	udiv	r3, r2, r3
 800259a:	3305      	adds	r3, #5
 800259c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	4a5c      	ldr	r2, [pc, #368]	; (8002714 <HAL_I2S_Init+0x270>)
 80025a2:	fba2 2303 	umull	r2, r3, r2, r3
 80025a6:	08db      	lsrs	r3, r3, #3
 80025a8:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	f003 0301 	and.w	r3, r3, #1
 80025b0:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80025b2:	693a      	ldr	r2, [r7, #16]
 80025b4:	69bb      	ldr	r3, [r7, #24]
 80025b6:	1ad3      	subs	r3, r2, r3
 80025b8:	085b      	lsrs	r3, r3, #1
 80025ba:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80025bc:	69bb      	ldr	r3, [r7, #24]
 80025be:	021b      	lsls	r3, r3, #8
 80025c0:	61bb      	str	r3, [r7, #24]
 80025c2:	e003      	b.n	80025cc <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80025c4:	2302      	movs	r3, #2
 80025c6:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80025c8:	2300      	movs	r3, #0
 80025ca:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80025cc:	69fb      	ldr	r3, [r7, #28]
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d902      	bls.n	80025d8 <HAL_I2S_Init+0x134>
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	2bff      	cmp	r3, #255	; 0xff
 80025d6:	d907      	bls.n	80025e8 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025dc:	f043 0210 	orr.w	r2, r3, #16
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80025e4:	2301      	movs	r3, #1
 80025e6:	e08f      	b.n	8002708 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	691a      	ldr	r2, [r3, #16]
 80025ec:	69bb      	ldr	r3, [r7, #24]
 80025ee:	ea42 0103 	orr.w	r1, r2, r3
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	69fa      	ldr	r2, [r7, #28]
 80025f8:	430a      	orrs	r2, r1
 80025fa:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	69db      	ldr	r3, [r3, #28]
 8002602:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002606:	f023 030f 	bic.w	r3, r3, #15
 800260a:	687a      	ldr	r2, [r7, #4]
 800260c:	6851      	ldr	r1, [r2, #4]
 800260e:	687a      	ldr	r2, [r7, #4]
 8002610:	6892      	ldr	r2, [r2, #8]
 8002612:	4311      	orrs	r1, r2
 8002614:	687a      	ldr	r2, [r7, #4]
 8002616:	68d2      	ldr	r2, [r2, #12]
 8002618:	4311      	orrs	r1, r2
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	6992      	ldr	r2, [r2, #24]
 800261e:	430a      	orrs	r2, r1
 8002620:	431a      	orrs	r2, r3
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800262a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6a1b      	ldr	r3, [r3, #32]
 8002630:	2b01      	cmp	r3, #1
 8002632:	d161      	bne.n	80026f8 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	4a38      	ldr	r2, [pc, #224]	; (8002718 <HAL_I2S_Init+0x274>)
 8002638:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a37      	ldr	r2, [pc, #220]	; (800271c <HAL_I2S_Init+0x278>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d101      	bne.n	8002648 <HAL_I2S_Init+0x1a4>
 8002644:	4b36      	ldr	r3, [pc, #216]	; (8002720 <HAL_I2S_Init+0x27c>)
 8002646:	e001      	b.n	800264c <HAL_I2S_Init+0x1a8>
 8002648:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800264c:	69db      	ldr	r3, [r3, #28]
 800264e:	687a      	ldr	r2, [r7, #4]
 8002650:	6812      	ldr	r2, [r2, #0]
 8002652:	4932      	ldr	r1, [pc, #200]	; (800271c <HAL_I2S_Init+0x278>)
 8002654:	428a      	cmp	r2, r1
 8002656:	d101      	bne.n	800265c <HAL_I2S_Init+0x1b8>
 8002658:	4a31      	ldr	r2, [pc, #196]	; (8002720 <HAL_I2S_Init+0x27c>)
 800265a:	e001      	b.n	8002660 <HAL_I2S_Init+0x1bc>
 800265c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8002660:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002664:	f023 030f 	bic.w	r3, r3, #15
 8002668:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a2b      	ldr	r2, [pc, #172]	; (800271c <HAL_I2S_Init+0x278>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d101      	bne.n	8002678 <HAL_I2S_Init+0x1d4>
 8002674:	4b2a      	ldr	r3, [pc, #168]	; (8002720 <HAL_I2S_Init+0x27c>)
 8002676:	e001      	b.n	800267c <HAL_I2S_Init+0x1d8>
 8002678:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800267c:	2202      	movs	r2, #2
 800267e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a25      	ldr	r2, [pc, #148]	; (800271c <HAL_I2S_Init+0x278>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d101      	bne.n	800268e <HAL_I2S_Init+0x1ea>
 800268a:	4b25      	ldr	r3, [pc, #148]	; (8002720 <HAL_I2S_Init+0x27c>)
 800268c:	e001      	b.n	8002692 <HAL_I2S_Init+0x1ee>
 800268e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002692:	69db      	ldr	r3, [r3, #28]
 8002694:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800269e:	d003      	beq.n	80026a8 <HAL_I2S_Init+0x204>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d103      	bne.n	80026b0 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80026a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80026ac:	613b      	str	r3, [r7, #16]
 80026ae:	e001      	b.n	80026b4 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80026b0:	2300      	movs	r3, #0
 80026b2:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80026be:	4313      	orrs	r3, r2
 80026c0:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	68db      	ldr	r3, [r3, #12]
 80026c6:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80026c8:	4313      	orrs	r3, r2
 80026ca:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	699b      	ldr	r3, [r3, #24]
 80026d0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80026d2:	4313      	orrs	r3, r2
 80026d4:	b29a      	uxth	r2, r3
 80026d6:	897b      	ldrh	r3, [r7, #10]
 80026d8:	4313      	orrs	r3, r2
 80026da:	b29b      	uxth	r3, r3
 80026dc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80026e0:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a0d      	ldr	r2, [pc, #52]	; (800271c <HAL_I2S_Init+0x278>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d101      	bne.n	80026f0 <HAL_I2S_Init+0x24c>
 80026ec:	4b0c      	ldr	r3, [pc, #48]	; (8002720 <HAL_I2S_Init+0x27c>)
 80026ee:	e001      	b.n	80026f4 <HAL_I2S_Init+0x250>
 80026f0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80026f4:	897a      	ldrh	r2, [r7, #10]
 80026f6:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2200      	movs	r2, #0
 80026fc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2201      	movs	r2, #1
 8002702:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8002706:	2300      	movs	r3, #0
}
 8002708:	4618      	mov	r0, r3
 800270a:	3720      	adds	r7, #32
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}
 8002710:	0800281b 	.word	0x0800281b
 8002714:	cccccccd 	.word	0xcccccccd
 8002718:	08002931 	.word	0x08002931
 800271c:	40003800 	.word	0x40003800
 8002720:	40003400 	.word	0x40003400

08002724 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002724:	b480      	push	{r7}
 8002726:	b083      	sub	sp, #12
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 800272c:	bf00      	nop
 800272e:	370c      	adds	r7, #12
 8002730:	46bd      	mov	sp, r7
 8002732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002736:	4770      	bx	lr

08002738 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002738:	b480      	push	{r7}
 800273a:	b083      	sub	sp, #12
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8002740:	bf00      	nop
 8002742:	370c      	adds	r7, #12
 8002744:	46bd      	mov	sp, r7
 8002746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274a:	4770      	bx	lr

0800274c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800274c:	b480      	push	{r7}
 800274e:	b083      	sub	sp, #12
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8002754:	bf00      	nop
 8002756:	370c      	adds	r7, #12
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr

08002760 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b082      	sub	sp, #8
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800276c:	881a      	ldrh	r2, [r3, #0]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002778:	1c9a      	adds	r2, r3, #2
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002782:	b29b      	uxth	r3, r3
 8002784:	3b01      	subs	r3, #1
 8002786:	b29a      	uxth	r2, r3
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002790:	b29b      	uxth	r3, r3
 8002792:	2b00      	cmp	r3, #0
 8002794:	d10e      	bne.n	80027b4 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	685a      	ldr	r2, [r3, #4]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80027a4:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2201      	movs	r2, #1
 80027aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	f7ff ffb8 	bl	8002724 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80027b4:	bf00      	nop
 80027b6:	3708      	adds	r7, #8
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}

080027bc <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b082      	sub	sp, #8
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	68da      	ldr	r2, [r3, #12]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ce:	b292      	uxth	r2, r2
 80027d0:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027d6:	1c9a      	adds	r2, r3, #2
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80027e0:	b29b      	uxth	r3, r3
 80027e2:	3b01      	subs	r3, #1
 80027e4:	b29a      	uxth	r2, r3
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80027ee:	b29b      	uxth	r3, r3
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d10e      	bne.n	8002812 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	685a      	ldr	r2, [r3, #4]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002802:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2201      	movs	r2, #1
 8002808:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800280c:	6878      	ldr	r0, [r7, #4]
 800280e:	f7ff ff93 	bl	8002738 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002812:	bf00      	nop
 8002814:	3708      	adds	r7, #8
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}

0800281a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800281a:	b580      	push	{r7, lr}
 800281c:	b086      	sub	sp, #24
 800281e:	af00      	add	r7, sp, #0
 8002820:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002830:	b2db      	uxtb	r3, r3
 8002832:	2b04      	cmp	r3, #4
 8002834:	d13a      	bne.n	80028ac <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	f003 0301 	and.w	r3, r3, #1
 800283c:	2b01      	cmp	r3, #1
 800283e:	d109      	bne.n	8002854 <I2S_IRQHandler+0x3a>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800284a:	2b40      	cmp	r3, #64	; 0x40
 800284c:	d102      	bne.n	8002854 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800284e:	6878      	ldr	r0, [r7, #4]
 8002850:	f7ff ffb4 	bl	80027bc <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800285a:	2b40      	cmp	r3, #64	; 0x40
 800285c:	d126      	bne.n	80028ac <I2S_IRQHandler+0x92>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	f003 0320 	and.w	r3, r3, #32
 8002868:	2b20      	cmp	r3, #32
 800286a:	d11f      	bne.n	80028ac <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	685a      	ldr	r2, [r3, #4]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800287a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800287c:	2300      	movs	r3, #0
 800287e:	613b      	str	r3, [r7, #16]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	68db      	ldr	r3, [r3, #12]
 8002886:	613b      	str	r3, [r7, #16]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	613b      	str	r3, [r7, #16]
 8002890:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2201      	movs	r2, #1
 8002896:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800289e:	f043 0202 	orr.w	r2, r3, #2
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	f7ff ff50 	bl	800274c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	2b03      	cmp	r3, #3
 80028b6:	d136      	bne.n	8002926 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	f003 0302 	and.w	r3, r3, #2
 80028be:	2b02      	cmp	r3, #2
 80028c0:	d109      	bne.n	80028d6 <I2S_IRQHandler+0xbc>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028cc:	2b80      	cmp	r3, #128	; 0x80
 80028ce:	d102      	bne.n	80028d6 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80028d0:	6878      	ldr	r0, [r7, #4]
 80028d2:	f7ff ff45 	bl	8002760 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	f003 0308 	and.w	r3, r3, #8
 80028dc:	2b08      	cmp	r3, #8
 80028de:	d122      	bne.n	8002926 <I2S_IRQHandler+0x10c>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	f003 0320 	and.w	r3, r3, #32
 80028ea:	2b20      	cmp	r3, #32
 80028ec:	d11b      	bne.n	8002926 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	685a      	ldr	r2, [r3, #4]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80028fc:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80028fe:	2300      	movs	r3, #0
 8002900:	60fb      	str	r3, [r7, #12]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	60fb      	str	r3, [r7, #12]
 800290a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2201      	movs	r2, #1
 8002910:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002918:	f043 0204 	orr.w	r2, r3, #4
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002920:	6878      	ldr	r0, [r7, #4]
 8002922:	f7ff ff13 	bl	800274c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002926:	bf00      	nop
 8002928:	3718      	adds	r7, #24
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}
	...

08002930 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b088      	sub	sp, #32
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a92      	ldr	r2, [pc, #584]	; (8002b90 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d101      	bne.n	800294e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800294a:	4b92      	ldr	r3, [pc, #584]	; (8002b94 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800294c:	e001      	b.n	8002952 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800294e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a8b      	ldr	r2, [pc, #556]	; (8002b90 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d101      	bne.n	800296c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8002968:	4b8a      	ldr	r3, [pc, #552]	; (8002b94 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800296a:	e001      	b.n	8002970 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 800296c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800297c:	d004      	beq.n	8002988 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	2b00      	cmp	r3, #0
 8002984:	f040 8099 	bne.w	8002aba <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8002988:	69fb      	ldr	r3, [r7, #28]
 800298a:	f003 0302 	and.w	r3, r3, #2
 800298e:	2b02      	cmp	r3, #2
 8002990:	d107      	bne.n	80029a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002998:	2b00      	cmp	r3, #0
 800299a:	d002      	beq.n	80029a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 800299c:	6878      	ldr	r0, [r7, #4]
 800299e:	f000 f925 	bl	8002bec <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80029a2:	69bb      	ldr	r3, [r7, #24]
 80029a4:	f003 0301 	and.w	r3, r3, #1
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	d107      	bne.n	80029bc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d002      	beq.n	80029bc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	f000 f9c8 	bl	8002d4c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80029bc:	69bb      	ldr	r3, [r7, #24]
 80029be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029c2:	2b40      	cmp	r3, #64	; 0x40
 80029c4:	d13a      	bne.n	8002a3c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	f003 0320 	and.w	r3, r3, #32
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d035      	beq.n	8002a3c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a6e      	ldr	r2, [pc, #440]	; (8002b90 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d101      	bne.n	80029de <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80029da:	4b6e      	ldr	r3, [pc, #440]	; (8002b94 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80029dc:	e001      	b.n	80029e2 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80029de:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80029e2:	685a      	ldr	r2, [r3, #4]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4969      	ldr	r1, [pc, #420]	; (8002b90 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80029ea:	428b      	cmp	r3, r1
 80029ec:	d101      	bne.n	80029f2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80029ee:	4b69      	ldr	r3, [pc, #420]	; (8002b94 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80029f0:	e001      	b.n	80029f6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80029f2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80029f6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80029fa:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	685a      	ldr	r2, [r3, #4]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002a0a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	60fb      	str	r3, [r7, #12]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	68db      	ldr	r3, [r3, #12]
 8002a16:	60fb      	str	r3, [r7, #12]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	60fb      	str	r3, [r7, #12]
 8002a20:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2201      	movs	r2, #1
 8002a26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a2e:	f043 0202 	orr.w	r2, r3, #2
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002a36:	6878      	ldr	r0, [r7, #4]
 8002a38:	f7ff fe88 	bl	800274c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002a3c:	69fb      	ldr	r3, [r7, #28]
 8002a3e:	f003 0308 	and.w	r3, r3, #8
 8002a42:	2b08      	cmp	r3, #8
 8002a44:	f040 80c3 	bne.w	8002bce <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	f003 0320 	and.w	r3, r3, #32
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	f000 80bd 	beq.w	8002bce <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	685a      	ldr	r2, [r3, #4]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002a62:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a49      	ldr	r2, [pc, #292]	; (8002b90 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d101      	bne.n	8002a72 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8002a6e:	4b49      	ldr	r3, [pc, #292]	; (8002b94 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002a70:	e001      	b.n	8002a76 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8002a72:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002a76:	685a      	ldr	r2, [r3, #4]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4944      	ldr	r1, [pc, #272]	; (8002b90 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002a7e:	428b      	cmp	r3, r1
 8002a80:	d101      	bne.n	8002a86 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8002a82:	4b44      	ldr	r3, [pc, #272]	; (8002b94 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002a84:	e001      	b.n	8002a8a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8002a86:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002a8a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002a8e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002a90:	2300      	movs	r3, #0
 8002a92:	60bb      	str	r3, [r7, #8]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	60bb      	str	r3, [r7, #8]
 8002a9c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aaa:	f043 0204 	orr.w	r2, r3, #4
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f7ff fe4a 	bl	800274c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002ab8:	e089      	b.n	8002bce <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8002aba:	69bb      	ldr	r3, [r7, #24]
 8002abc:	f003 0302 	and.w	r3, r3, #2
 8002ac0:	2b02      	cmp	r3, #2
 8002ac2:	d107      	bne.n	8002ad4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8002ac4:	693b      	ldr	r3, [r7, #16]
 8002ac6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d002      	beq.n	8002ad4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f000 f8be 	bl	8002c50 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8002ad4:	69fb      	ldr	r3, [r7, #28]
 8002ad6:	f003 0301 	and.w	r3, r3, #1
 8002ada:	2b01      	cmp	r3, #1
 8002adc:	d107      	bne.n	8002aee <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d002      	beq.n	8002aee <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8002ae8:	6878      	ldr	r0, [r7, #4]
 8002aea:	f000 f8fd 	bl	8002ce8 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002af4:	2b40      	cmp	r3, #64	; 0x40
 8002af6:	d12f      	bne.n	8002b58 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	f003 0320 	and.w	r3, r3, #32
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d02a      	beq.n	8002b58 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	685a      	ldr	r2, [r3, #4]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002b10:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a1e      	ldr	r2, [pc, #120]	; (8002b90 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d101      	bne.n	8002b20 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8002b1c:	4b1d      	ldr	r3, [pc, #116]	; (8002b94 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002b1e:	e001      	b.n	8002b24 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8002b20:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002b24:	685a      	ldr	r2, [r3, #4]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4919      	ldr	r1, [pc, #100]	; (8002b90 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002b2c:	428b      	cmp	r3, r1
 8002b2e:	d101      	bne.n	8002b34 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8002b30:	4b18      	ldr	r3, [pc, #96]	; (8002b94 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002b32:	e001      	b.n	8002b38 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8002b34:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002b38:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002b3c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2201      	movs	r2, #1
 8002b42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b4a:	f043 0202 	orr.w	r2, r3, #2
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	f7ff fdfa 	bl	800274c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002b58:	69bb      	ldr	r3, [r7, #24]
 8002b5a:	f003 0308 	and.w	r3, r3, #8
 8002b5e:	2b08      	cmp	r3, #8
 8002b60:	d136      	bne.n	8002bd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	f003 0320 	and.w	r3, r3, #32
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d031      	beq.n	8002bd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a07      	ldr	r2, [pc, #28]	; (8002b90 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d101      	bne.n	8002b7a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8002b76:	4b07      	ldr	r3, [pc, #28]	; (8002b94 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002b78:	e001      	b.n	8002b7e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8002b7a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002b7e:	685a      	ldr	r2, [r3, #4]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4902      	ldr	r1, [pc, #8]	; (8002b90 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002b86:	428b      	cmp	r3, r1
 8002b88:	d106      	bne.n	8002b98 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8002b8a:	4b02      	ldr	r3, [pc, #8]	; (8002b94 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002b8c:	e006      	b.n	8002b9c <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8002b8e:	bf00      	nop
 8002b90:	40003800 	.word	0x40003800
 8002b94:	40003400 	.word	0x40003400
 8002b98:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002b9c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002ba0:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	685a      	ldr	r2, [r3, #4]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002bb0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bbe:	f043 0204 	orr.w	r2, r3, #4
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	f7ff fdc0 	bl	800274c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002bcc:	e000      	b.n	8002bd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002bce:	bf00      	nop
}
 8002bd0:	bf00      	nop
 8002bd2:	3720      	adds	r7, #32
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}

08002bd8 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b083      	sub	sp, #12
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8002be0:	bf00      	nop
 8002be2:	370c      	adds	r7, #12
 8002be4:	46bd      	mov	sp, r7
 8002be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bea:	4770      	bx	lr

08002bec <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b082      	sub	sp, #8
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf8:	1c99      	adds	r1, r3, #2
 8002bfa:	687a      	ldr	r2, [r7, #4]
 8002bfc:	6251      	str	r1, [r2, #36]	; 0x24
 8002bfe:	881a      	ldrh	r2, [r3, #0]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c0a:	b29b      	uxth	r3, r3
 8002c0c:	3b01      	subs	r3, #1
 8002c0e:	b29a      	uxth	r2, r3
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c18:	b29b      	uxth	r3, r3
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d113      	bne.n	8002c46 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	685a      	ldr	r2, [r3, #4]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002c2c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002c32:	b29b      	uxth	r3, r3
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d106      	bne.n	8002c46 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002c40:	6878      	ldr	r0, [r7, #4]
 8002c42:	f7ff ffc9 	bl	8002bd8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002c46:	bf00      	nop
 8002c48:	3708      	adds	r7, #8
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}
	...

08002c50 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b082      	sub	sp, #8
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c5c:	1c99      	adds	r1, r3, #2
 8002c5e:	687a      	ldr	r2, [r7, #4]
 8002c60:	6251      	str	r1, [r2, #36]	; 0x24
 8002c62:	8819      	ldrh	r1, [r3, #0]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a1d      	ldr	r2, [pc, #116]	; (8002ce0 <I2SEx_TxISR_I2SExt+0x90>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d101      	bne.n	8002c72 <I2SEx_TxISR_I2SExt+0x22>
 8002c6e:	4b1d      	ldr	r3, [pc, #116]	; (8002ce4 <I2SEx_TxISR_I2SExt+0x94>)
 8002c70:	e001      	b.n	8002c76 <I2SEx_TxISR_I2SExt+0x26>
 8002c72:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002c76:	460a      	mov	r2, r1
 8002c78:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c7e:	b29b      	uxth	r3, r3
 8002c80:	3b01      	subs	r3, #1
 8002c82:	b29a      	uxth	r2, r3
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c8c:	b29b      	uxth	r3, r3
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d121      	bne.n	8002cd6 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a12      	ldr	r2, [pc, #72]	; (8002ce0 <I2SEx_TxISR_I2SExt+0x90>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d101      	bne.n	8002ca0 <I2SEx_TxISR_I2SExt+0x50>
 8002c9c:	4b11      	ldr	r3, [pc, #68]	; (8002ce4 <I2SEx_TxISR_I2SExt+0x94>)
 8002c9e:	e001      	b.n	8002ca4 <I2SEx_TxISR_I2SExt+0x54>
 8002ca0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002ca4:	685a      	ldr	r2, [r3, #4]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	490d      	ldr	r1, [pc, #52]	; (8002ce0 <I2SEx_TxISR_I2SExt+0x90>)
 8002cac:	428b      	cmp	r3, r1
 8002cae:	d101      	bne.n	8002cb4 <I2SEx_TxISR_I2SExt+0x64>
 8002cb0:	4b0c      	ldr	r3, [pc, #48]	; (8002ce4 <I2SEx_TxISR_I2SExt+0x94>)
 8002cb2:	e001      	b.n	8002cb8 <I2SEx_TxISR_I2SExt+0x68>
 8002cb4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002cb8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002cbc:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002cc2:	b29b      	uxth	r3, r3
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d106      	bne.n	8002cd6 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2201      	movs	r2, #1
 8002ccc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002cd0:	6878      	ldr	r0, [r7, #4]
 8002cd2:	f7ff ff81 	bl	8002bd8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002cd6:	bf00      	nop
 8002cd8:	3708      	adds	r7, #8
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}
 8002cde:	bf00      	nop
 8002ce0:	40003800 	.word	0x40003800
 8002ce4:	40003400 	.word	0x40003400

08002ce8 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b082      	sub	sp, #8
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	68d8      	ldr	r0, [r3, #12]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cfa:	1c99      	adds	r1, r3, #2
 8002cfc:	687a      	ldr	r2, [r7, #4]
 8002cfe:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002d00:	b282      	uxth	r2, r0
 8002d02:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002d08:	b29b      	uxth	r3, r3
 8002d0a:	3b01      	subs	r3, #1
 8002d0c:	b29a      	uxth	r2, r3
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002d16:	b29b      	uxth	r3, r3
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d113      	bne.n	8002d44 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	685a      	ldr	r2, [r3, #4]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002d2a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d30:	b29b      	uxth	r3, r3
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d106      	bne.n	8002d44 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2201      	movs	r2, #1
 8002d3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	f7ff ff4a 	bl	8002bd8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002d44:	bf00      	nop
 8002d46:	3708      	adds	r7, #8
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}

08002d4c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b082      	sub	sp, #8
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a20      	ldr	r2, [pc, #128]	; (8002ddc <I2SEx_RxISR_I2SExt+0x90>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d101      	bne.n	8002d62 <I2SEx_RxISR_I2SExt+0x16>
 8002d5e:	4b20      	ldr	r3, [pc, #128]	; (8002de0 <I2SEx_RxISR_I2SExt+0x94>)
 8002d60:	e001      	b.n	8002d66 <I2SEx_RxISR_I2SExt+0x1a>
 8002d62:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d66:	68d8      	ldr	r0, [r3, #12]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d6c:	1c99      	adds	r1, r3, #2
 8002d6e:	687a      	ldr	r2, [r7, #4]
 8002d70:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002d72:	b282      	uxth	r2, r0
 8002d74:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002d7a:	b29b      	uxth	r3, r3
 8002d7c:	3b01      	subs	r3, #1
 8002d7e:	b29a      	uxth	r2, r3
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002d88:	b29b      	uxth	r3, r3
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d121      	bne.n	8002dd2 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a12      	ldr	r2, [pc, #72]	; (8002ddc <I2SEx_RxISR_I2SExt+0x90>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d101      	bne.n	8002d9c <I2SEx_RxISR_I2SExt+0x50>
 8002d98:	4b11      	ldr	r3, [pc, #68]	; (8002de0 <I2SEx_RxISR_I2SExt+0x94>)
 8002d9a:	e001      	b.n	8002da0 <I2SEx_RxISR_I2SExt+0x54>
 8002d9c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002da0:	685a      	ldr	r2, [r3, #4]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	490d      	ldr	r1, [pc, #52]	; (8002ddc <I2SEx_RxISR_I2SExt+0x90>)
 8002da8:	428b      	cmp	r3, r1
 8002daa:	d101      	bne.n	8002db0 <I2SEx_RxISR_I2SExt+0x64>
 8002dac:	4b0c      	ldr	r3, [pc, #48]	; (8002de0 <I2SEx_RxISR_I2SExt+0x94>)
 8002dae:	e001      	b.n	8002db4 <I2SEx_RxISR_I2SExt+0x68>
 8002db0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002db4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002db8:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dbe:	b29b      	uxth	r3, r3
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d106      	bne.n	8002dd2 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002dcc:	6878      	ldr	r0, [r7, #4]
 8002dce:	f7ff ff03 	bl	8002bd8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002dd2:	bf00      	nop
 8002dd4:	3708      	adds	r7, #8
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}
 8002dda:	bf00      	nop
 8002ddc:	40003800 	.word	0x40003800
 8002de0:	40003400 	.word	0x40003400

08002de4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002de4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002de6:	b08f      	sub	sp, #60	; 0x3c
 8002de8:	af0a      	add	r7, sp, #40	; 0x28
 8002dea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d101      	bne.n	8002df6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e10f      	b.n	8003016 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002e02:	b2db      	uxtb	r3, r3
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d106      	bne.n	8002e16 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002e10:	6878      	ldr	r0, [r7, #4]
 8002e12:	f006 f9bd 	bl	8009190 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2203      	movs	r2, #3
 8002e1a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d102      	bne.n	8002e30 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4618      	mov	r0, r3
 8002e36:	f002 fc58 	bl	80056ea <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	603b      	str	r3, [r7, #0]
 8002e40:	687e      	ldr	r6, [r7, #4]
 8002e42:	466d      	mov	r5, sp
 8002e44:	f106 0410 	add.w	r4, r6, #16
 8002e48:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e4a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e4c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e4e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e50:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002e54:	e885 0003 	stmia.w	r5, {r0, r1}
 8002e58:	1d33      	adds	r3, r6, #4
 8002e5a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e5c:	6838      	ldr	r0, [r7, #0]
 8002e5e:	f002 fb2f 	bl	80054c0 <USB_CoreInit>
 8002e62:	4603      	mov	r3, r0
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d005      	beq.n	8002e74 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2202      	movs	r2, #2
 8002e6c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e0d0      	b.n	8003016 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	2100      	movs	r1, #0
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f002 fc46 	bl	800570c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e80:	2300      	movs	r3, #0
 8002e82:	73fb      	strb	r3, [r7, #15]
 8002e84:	e04a      	b.n	8002f1c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002e86:	7bfa      	ldrb	r2, [r7, #15]
 8002e88:	6879      	ldr	r1, [r7, #4]
 8002e8a:	4613      	mov	r3, r2
 8002e8c:	00db      	lsls	r3, r3, #3
 8002e8e:	4413      	add	r3, r2
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	440b      	add	r3, r1
 8002e94:	333d      	adds	r3, #61	; 0x3d
 8002e96:	2201      	movs	r2, #1
 8002e98:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002e9a:	7bfa      	ldrb	r2, [r7, #15]
 8002e9c:	6879      	ldr	r1, [r7, #4]
 8002e9e:	4613      	mov	r3, r2
 8002ea0:	00db      	lsls	r3, r3, #3
 8002ea2:	4413      	add	r3, r2
 8002ea4:	009b      	lsls	r3, r3, #2
 8002ea6:	440b      	add	r3, r1
 8002ea8:	333c      	adds	r3, #60	; 0x3c
 8002eaa:	7bfa      	ldrb	r2, [r7, #15]
 8002eac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002eae:	7bfa      	ldrb	r2, [r7, #15]
 8002eb0:	7bfb      	ldrb	r3, [r7, #15]
 8002eb2:	b298      	uxth	r0, r3
 8002eb4:	6879      	ldr	r1, [r7, #4]
 8002eb6:	4613      	mov	r3, r2
 8002eb8:	00db      	lsls	r3, r3, #3
 8002eba:	4413      	add	r3, r2
 8002ebc:	009b      	lsls	r3, r3, #2
 8002ebe:	440b      	add	r3, r1
 8002ec0:	3344      	adds	r3, #68	; 0x44
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002ec6:	7bfa      	ldrb	r2, [r7, #15]
 8002ec8:	6879      	ldr	r1, [r7, #4]
 8002eca:	4613      	mov	r3, r2
 8002ecc:	00db      	lsls	r3, r3, #3
 8002ece:	4413      	add	r3, r2
 8002ed0:	009b      	lsls	r3, r3, #2
 8002ed2:	440b      	add	r3, r1
 8002ed4:	3340      	adds	r3, #64	; 0x40
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002eda:	7bfa      	ldrb	r2, [r7, #15]
 8002edc:	6879      	ldr	r1, [r7, #4]
 8002ede:	4613      	mov	r3, r2
 8002ee0:	00db      	lsls	r3, r3, #3
 8002ee2:	4413      	add	r3, r2
 8002ee4:	009b      	lsls	r3, r3, #2
 8002ee6:	440b      	add	r3, r1
 8002ee8:	3348      	adds	r3, #72	; 0x48
 8002eea:	2200      	movs	r2, #0
 8002eec:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002eee:	7bfa      	ldrb	r2, [r7, #15]
 8002ef0:	6879      	ldr	r1, [r7, #4]
 8002ef2:	4613      	mov	r3, r2
 8002ef4:	00db      	lsls	r3, r3, #3
 8002ef6:	4413      	add	r3, r2
 8002ef8:	009b      	lsls	r3, r3, #2
 8002efa:	440b      	add	r3, r1
 8002efc:	334c      	adds	r3, #76	; 0x4c
 8002efe:	2200      	movs	r2, #0
 8002f00:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002f02:	7bfa      	ldrb	r2, [r7, #15]
 8002f04:	6879      	ldr	r1, [r7, #4]
 8002f06:	4613      	mov	r3, r2
 8002f08:	00db      	lsls	r3, r3, #3
 8002f0a:	4413      	add	r3, r2
 8002f0c:	009b      	lsls	r3, r3, #2
 8002f0e:	440b      	add	r3, r1
 8002f10:	3354      	adds	r3, #84	; 0x54
 8002f12:	2200      	movs	r2, #0
 8002f14:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f16:	7bfb      	ldrb	r3, [r7, #15]
 8002f18:	3301      	adds	r3, #1
 8002f1a:	73fb      	strb	r3, [r7, #15]
 8002f1c:	7bfa      	ldrb	r2, [r7, #15]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	429a      	cmp	r2, r3
 8002f24:	d3af      	bcc.n	8002e86 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f26:	2300      	movs	r3, #0
 8002f28:	73fb      	strb	r3, [r7, #15]
 8002f2a:	e044      	b.n	8002fb6 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002f2c:	7bfa      	ldrb	r2, [r7, #15]
 8002f2e:	6879      	ldr	r1, [r7, #4]
 8002f30:	4613      	mov	r3, r2
 8002f32:	00db      	lsls	r3, r3, #3
 8002f34:	4413      	add	r3, r2
 8002f36:	009b      	lsls	r3, r3, #2
 8002f38:	440b      	add	r3, r1
 8002f3a:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002f3e:	2200      	movs	r2, #0
 8002f40:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002f42:	7bfa      	ldrb	r2, [r7, #15]
 8002f44:	6879      	ldr	r1, [r7, #4]
 8002f46:	4613      	mov	r3, r2
 8002f48:	00db      	lsls	r3, r3, #3
 8002f4a:	4413      	add	r3, r2
 8002f4c:	009b      	lsls	r3, r3, #2
 8002f4e:	440b      	add	r3, r1
 8002f50:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002f54:	7bfa      	ldrb	r2, [r7, #15]
 8002f56:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002f58:	7bfa      	ldrb	r2, [r7, #15]
 8002f5a:	6879      	ldr	r1, [r7, #4]
 8002f5c:	4613      	mov	r3, r2
 8002f5e:	00db      	lsls	r3, r3, #3
 8002f60:	4413      	add	r3, r2
 8002f62:	009b      	lsls	r3, r3, #2
 8002f64:	440b      	add	r3, r1
 8002f66:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002f6e:	7bfa      	ldrb	r2, [r7, #15]
 8002f70:	6879      	ldr	r1, [r7, #4]
 8002f72:	4613      	mov	r3, r2
 8002f74:	00db      	lsls	r3, r3, #3
 8002f76:	4413      	add	r3, r2
 8002f78:	009b      	lsls	r3, r3, #2
 8002f7a:	440b      	add	r3, r1
 8002f7c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002f80:	2200      	movs	r2, #0
 8002f82:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002f84:	7bfa      	ldrb	r2, [r7, #15]
 8002f86:	6879      	ldr	r1, [r7, #4]
 8002f88:	4613      	mov	r3, r2
 8002f8a:	00db      	lsls	r3, r3, #3
 8002f8c:	4413      	add	r3, r2
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	440b      	add	r3, r1
 8002f92:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002f96:	2200      	movs	r2, #0
 8002f98:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002f9a:	7bfa      	ldrb	r2, [r7, #15]
 8002f9c:	6879      	ldr	r1, [r7, #4]
 8002f9e:	4613      	mov	r3, r2
 8002fa0:	00db      	lsls	r3, r3, #3
 8002fa2:	4413      	add	r3, r2
 8002fa4:	009b      	lsls	r3, r3, #2
 8002fa6:	440b      	add	r3, r1
 8002fa8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002fac:	2200      	movs	r2, #0
 8002fae:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fb0:	7bfb      	ldrb	r3, [r7, #15]
 8002fb2:	3301      	adds	r3, #1
 8002fb4:	73fb      	strb	r3, [r7, #15]
 8002fb6:	7bfa      	ldrb	r2, [r7, #15]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	d3b5      	bcc.n	8002f2c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	603b      	str	r3, [r7, #0]
 8002fc6:	687e      	ldr	r6, [r7, #4]
 8002fc8:	466d      	mov	r5, sp
 8002fca:	f106 0410 	add.w	r4, r6, #16
 8002fce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002fd0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002fd2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002fd4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002fd6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002fda:	e885 0003 	stmia.w	r5, {r0, r1}
 8002fde:	1d33      	adds	r3, r6, #4
 8002fe0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002fe2:	6838      	ldr	r0, [r7, #0]
 8002fe4:	f002 fbde 	bl	80057a4 <USB_DevInit>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d005      	beq.n	8002ffa <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2202      	movs	r2, #2
 8002ff2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e00d      	b.n	8003016 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2201      	movs	r2, #1
 8003006:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4618      	mov	r0, r3
 8003010:	f003 fd2d 	bl	8006a6e <USB_DevDisconnect>

  return HAL_OK;
 8003014:	2300      	movs	r3, #0
}
 8003016:	4618      	mov	r0, r3
 8003018:	3714      	adds	r7, #20
 800301a:	46bd      	mov	sp, r7
 800301c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800301e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800301e:	b580      	push	{r7, lr}
 8003020:	b084      	sub	sp, #16
 8003022:	af00      	add	r7, sp, #0
 8003024:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003032:	2b01      	cmp	r3, #1
 8003034:	d101      	bne.n	800303a <HAL_PCD_Start+0x1c>
 8003036:	2302      	movs	r3, #2
 8003038:	e020      	b.n	800307c <HAL_PCD_Start+0x5e>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2201      	movs	r2, #1
 800303e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003046:	2b01      	cmp	r3, #1
 8003048:	d109      	bne.n	800305e <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800304e:	2b01      	cmp	r3, #1
 8003050:	d005      	beq.n	800305e <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003056:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4618      	mov	r0, r3
 8003064:	f002 fb30 	bl	80056c8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4618      	mov	r0, r3
 800306e:	f003 fcdd 	bl	8006a2c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2200      	movs	r2, #0
 8003076:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800307a:	2300      	movs	r3, #0
}
 800307c:	4618      	mov	r0, r3
 800307e:	3710      	adds	r7, #16
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}

08003084 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003084:	b590      	push	{r4, r7, lr}
 8003086:	b08d      	sub	sp, #52	; 0x34
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003092:	6a3b      	ldr	r3, [r7, #32]
 8003094:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4618      	mov	r0, r3
 800309c:	f003 fd9b 	bl	8006bd6 <USB_GetMode>
 80030a0:	4603      	mov	r3, r0
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	f040 848a 	bne.w	80039bc <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4618      	mov	r0, r3
 80030ae:	f003 fcff 	bl	8006ab0 <USB_ReadInterrupts>
 80030b2:	4603      	mov	r3, r0
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	f000 8480 	beq.w	80039ba <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80030ba:	69fb      	ldr	r3, [r7, #28]
 80030bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	0a1b      	lsrs	r3, r3, #8
 80030c4:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4618      	mov	r0, r3
 80030d4:	f003 fcec 	bl	8006ab0 <USB_ReadInterrupts>
 80030d8:	4603      	mov	r3, r0
 80030da:	f003 0302 	and.w	r3, r3, #2
 80030de:	2b02      	cmp	r3, #2
 80030e0:	d107      	bne.n	80030f2 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	695a      	ldr	r2, [r3, #20]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f002 0202 	and.w	r2, r2, #2
 80030f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4618      	mov	r0, r3
 80030f8:	f003 fcda 	bl	8006ab0 <USB_ReadInterrupts>
 80030fc:	4603      	mov	r3, r0
 80030fe:	f003 0310 	and.w	r3, r3, #16
 8003102:	2b10      	cmp	r3, #16
 8003104:	d161      	bne.n	80031ca <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	699a      	ldr	r2, [r3, #24]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f022 0210 	bic.w	r2, r2, #16
 8003114:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003116:	6a3b      	ldr	r3, [r7, #32]
 8003118:	6a1b      	ldr	r3, [r3, #32]
 800311a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800311c:	69bb      	ldr	r3, [r7, #24]
 800311e:	f003 020f 	and.w	r2, r3, #15
 8003122:	4613      	mov	r3, r2
 8003124:	00db      	lsls	r3, r3, #3
 8003126:	4413      	add	r3, r2
 8003128:	009b      	lsls	r3, r3, #2
 800312a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800312e:	687a      	ldr	r2, [r7, #4]
 8003130:	4413      	add	r3, r2
 8003132:	3304      	adds	r3, #4
 8003134:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003136:	69bb      	ldr	r3, [r7, #24]
 8003138:	0c5b      	lsrs	r3, r3, #17
 800313a:	f003 030f 	and.w	r3, r3, #15
 800313e:	2b02      	cmp	r3, #2
 8003140:	d124      	bne.n	800318c <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003142:	69ba      	ldr	r2, [r7, #24]
 8003144:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003148:	4013      	ands	r3, r2
 800314a:	2b00      	cmp	r3, #0
 800314c:	d035      	beq.n	80031ba <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003152:	69bb      	ldr	r3, [r7, #24]
 8003154:	091b      	lsrs	r3, r3, #4
 8003156:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003158:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800315c:	b29b      	uxth	r3, r3
 800315e:	461a      	mov	r2, r3
 8003160:	6a38      	ldr	r0, [r7, #32]
 8003162:	f003 fb11 	bl	8006788 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	691a      	ldr	r2, [r3, #16]
 800316a:	69bb      	ldr	r3, [r7, #24]
 800316c:	091b      	lsrs	r3, r3, #4
 800316e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003172:	441a      	add	r2, r3
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	6a1a      	ldr	r2, [r3, #32]
 800317c:	69bb      	ldr	r3, [r7, #24]
 800317e:	091b      	lsrs	r3, r3, #4
 8003180:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003184:	441a      	add	r2, r3
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	621a      	str	r2, [r3, #32]
 800318a:	e016      	b.n	80031ba <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800318c:	69bb      	ldr	r3, [r7, #24]
 800318e:	0c5b      	lsrs	r3, r3, #17
 8003190:	f003 030f 	and.w	r3, r3, #15
 8003194:	2b06      	cmp	r3, #6
 8003196:	d110      	bne.n	80031ba <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800319e:	2208      	movs	r2, #8
 80031a0:	4619      	mov	r1, r3
 80031a2:	6a38      	ldr	r0, [r7, #32]
 80031a4:	f003 faf0 	bl	8006788 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	6a1a      	ldr	r2, [r3, #32]
 80031ac:	69bb      	ldr	r3, [r7, #24]
 80031ae:	091b      	lsrs	r3, r3, #4
 80031b0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80031b4:	441a      	add	r2, r3
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	699a      	ldr	r2, [r3, #24]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f042 0210 	orr.w	r2, r2, #16
 80031c8:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4618      	mov	r0, r3
 80031d0:	f003 fc6e 	bl	8006ab0 <USB_ReadInterrupts>
 80031d4:	4603      	mov	r3, r0
 80031d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031da:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80031de:	f040 80a7 	bne.w	8003330 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80031e2:	2300      	movs	r3, #0
 80031e4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4618      	mov	r0, r3
 80031ec:	f003 fc73 	bl	8006ad6 <USB_ReadDevAllOutEpInterrupt>
 80031f0:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80031f2:	e099      	b.n	8003328 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80031f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031f6:	f003 0301 	and.w	r3, r3, #1
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	f000 808e 	beq.w	800331c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003206:	b2d2      	uxtb	r2, r2
 8003208:	4611      	mov	r1, r2
 800320a:	4618      	mov	r0, r3
 800320c:	f003 fc97 	bl	8006b3e <USB_ReadDevOutEPInterrupt>
 8003210:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	f003 0301 	and.w	r3, r3, #1
 8003218:	2b00      	cmp	r3, #0
 800321a:	d00c      	beq.n	8003236 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800321c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800321e:	015a      	lsls	r2, r3, #5
 8003220:	69fb      	ldr	r3, [r7, #28]
 8003222:	4413      	add	r3, r2
 8003224:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003228:	461a      	mov	r2, r3
 800322a:	2301      	movs	r3, #1
 800322c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800322e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003230:	6878      	ldr	r0, [r7, #4]
 8003232:	f000 fec3 	bl	8003fbc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	f003 0308 	and.w	r3, r3, #8
 800323c:	2b00      	cmp	r3, #0
 800323e:	d00c      	beq.n	800325a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003242:	015a      	lsls	r2, r3, #5
 8003244:	69fb      	ldr	r3, [r7, #28]
 8003246:	4413      	add	r3, r2
 8003248:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800324c:	461a      	mov	r2, r3
 800324e:	2308      	movs	r3, #8
 8003250:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003252:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003254:	6878      	ldr	r0, [r7, #4]
 8003256:	f000 ff99 	bl	800418c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	f003 0310 	and.w	r3, r3, #16
 8003260:	2b00      	cmp	r3, #0
 8003262:	d008      	beq.n	8003276 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003266:	015a      	lsls	r2, r3, #5
 8003268:	69fb      	ldr	r3, [r7, #28]
 800326a:	4413      	add	r3, r2
 800326c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003270:	461a      	mov	r2, r3
 8003272:	2310      	movs	r3, #16
 8003274:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	f003 0302 	and.w	r3, r3, #2
 800327c:	2b00      	cmp	r3, #0
 800327e:	d030      	beq.n	80032e2 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003280:	6a3b      	ldr	r3, [r7, #32]
 8003282:	695b      	ldr	r3, [r3, #20]
 8003284:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003288:	2b80      	cmp	r3, #128	; 0x80
 800328a:	d109      	bne.n	80032a0 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800328c:	69fb      	ldr	r3, [r7, #28]
 800328e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	69fa      	ldr	r2, [r7, #28]
 8003296:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800329a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800329e:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80032a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032a2:	4613      	mov	r3, r2
 80032a4:	00db      	lsls	r3, r3, #3
 80032a6:	4413      	add	r3, r2
 80032a8:	009b      	lsls	r3, r3, #2
 80032aa:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80032ae:	687a      	ldr	r2, [r7, #4]
 80032b0:	4413      	add	r3, r2
 80032b2:	3304      	adds	r3, #4
 80032b4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	78db      	ldrb	r3, [r3, #3]
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	d108      	bne.n	80032d0 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	2200      	movs	r2, #0
 80032c2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80032c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c6:	b2db      	uxtb	r3, r3
 80032c8:	4619      	mov	r1, r3
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	f006 f874 	bl	80093b8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80032d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d2:	015a      	lsls	r2, r3, #5
 80032d4:	69fb      	ldr	r3, [r7, #28]
 80032d6:	4413      	add	r3, r2
 80032d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032dc:	461a      	mov	r2, r3
 80032de:	2302      	movs	r3, #2
 80032e0:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	f003 0320 	and.w	r3, r3, #32
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d008      	beq.n	80032fe <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80032ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ee:	015a      	lsls	r2, r3, #5
 80032f0:	69fb      	ldr	r3, [r7, #28]
 80032f2:	4413      	add	r3, r2
 80032f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032f8:	461a      	mov	r2, r3
 80032fa:	2320      	movs	r3, #32
 80032fc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003304:	2b00      	cmp	r3, #0
 8003306:	d009      	beq.n	800331c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800330a:	015a      	lsls	r2, r3, #5
 800330c:	69fb      	ldr	r3, [r7, #28]
 800330e:	4413      	add	r3, r2
 8003310:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003314:	461a      	mov	r2, r3
 8003316:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800331a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800331c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800331e:	3301      	adds	r3, #1
 8003320:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003324:	085b      	lsrs	r3, r3, #1
 8003326:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800332a:	2b00      	cmp	r3, #0
 800332c:	f47f af62 	bne.w	80031f4 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4618      	mov	r0, r3
 8003336:	f003 fbbb 	bl	8006ab0 <USB_ReadInterrupts>
 800333a:	4603      	mov	r3, r0
 800333c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003340:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003344:	f040 80db 	bne.w	80034fe <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4618      	mov	r0, r3
 800334e:	f003 fbdc 	bl	8006b0a <USB_ReadDevAllInEpInterrupt>
 8003352:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003354:	2300      	movs	r3, #0
 8003356:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003358:	e0cd      	b.n	80034f6 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800335a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800335c:	f003 0301 	and.w	r3, r3, #1
 8003360:	2b00      	cmp	r3, #0
 8003362:	f000 80c2 	beq.w	80034ea <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800336c:	b2d2      	uxtb	r2, r2
 800336e:	4611      	mov	r1, r2
 8003370:	4618      	mov	r0, r3
 8003372:	f003 fc02 	bl	8006b7a <USB_ReadDevInEPInterrupt>
 8003376:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	f003 0301 	and.w	r3, r3, #1
 800337e:	2b00      	cmp	r3, #0
 8003380:	d057      	beq.n	8003432 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003384:	f003 030f 	and.w	r3, r3, #15
 8003388:	2201      	movs	r2, #1
 800338a:	fa02 f303 	lsl.w	r3, r2, r3
 800338e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003390:	69fb      	ldr	r3, [r7, #28]
 8003392:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003396:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	43db      	mvns	r3, r3
 800339c:	69f9      	ldr	r1, [r7, #28]
 800339e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80033a2:	4013      	ands	r3, r2
 80033a4:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80033a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a8:	015a      	lsls	r2, r3, #5
 80033aa:	69fb      	ldr	r3, [r7, #28]
 80033ac:	4413      	add	r3, r2
 80033ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033b2:	461a      	mov	r2, r3
 80033b4:	2301      	movs	r3, #1
 80033b6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	691b      	ldr	r3, [r3, #16]
 80033bc:	2b01      	cmp	r3, #1
 80033be:	d132      	bne.n	8003426 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80033c0:	6879      	ldr	r1, [r7, #4]
 80033c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033c4:	4613      	mov	r3, r2
 80033c6:	00db      	lsls	r3, r3, #3
 80033c8:	4413      	add	r3, r2
 80033ca:	009b      	lsls	r3, r3, #2
 80033cc:	440b      	add	r3, r1
 80033ce:	334c      	adds	r3, #76	; 0x4c
 80033d0:	6819      	ldr	r1, [r3, #0]
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033d6:	4613      	mov	r3, r2
 80033d8:	00db      	lsls	r3, r3, #3
 80033da:	4413      	add	r3, r2
 80033dc:	009b      	lsls	r3, r3, #2
 80033de:	4403      	add	r3, r0
 80033e0:	3348      	adds	r3, #72	; 0x48
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4419      	add	r1, r3
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033ea:	4613      	mov	r3, r2
 80033ec:	00db      	lsls	r3, r3, #3
 80033ee:	4413      	add	r3, r2
 80033f0:	009b      	lsls	r3, r3, #2
 80033f2:	4403      	add	r3, r0
 80033f4:	334c      	adds	r3, #76	; 0x4c
 80033f6:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80033f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d113      	bne.n	8003426 <HAL_PCD_IRQHandler+0x3a2>
 80033fe:	6879      	ldr	r1, [r7, #4]
 8003400:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003402:	4613      	mov	r3, r2
 8003404:	00db      	lsls	r3, r3, #3
 8003406:	4413      	add	r3, r2
 8003408:	009b      	lsls	r3, r3, #2
 800340a:	440b      	add	r3, r1
 800340c:	3354      	adds	r3, #84	; 0x54
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d108      	bne.n	8003426 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6818      	ldr	r0, [r3, #0]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800341e:	461a      	mov	r2, r3
 8003420:	2101      	movs	r1, #1
 8003422:	f003 fc09 	bl	8006c38 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003428:	b2db      	uxtb	r3, r3
 800342a:	4619      	mov	r1, r3
 800342c:	6878      	ldr	r0, [r7, #4]
 800342e:	f005 ff3e 	bl	80092ae <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	f003 0308 	and.w	r3, r3, #8
 8003438:	2b00      	cmp	r3, #0
 800343a:	d008      	beq.n	800344e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800343c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800343e:	015a      	lsls	r2, r3, #5
 8003440:	69fb      	ldr	r3, [r7, #28]
 8003442:	4413      	add	r3, r2
 8003444:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003448:	461a      	mov	r2, r3
 800344a:	2308      	movs	r3, #8
 800344c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	f003 0310 	and.w	r3, r3, #16
 8003454:	2b00      	cmp	r3, #0
 8003456:	d008      	beq.n	800346a <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800345a:	015a      	lsls	r2, r3, #5
 800345c:	69fb      	ldr	r3, [r7, #28]
 800345e:	4413      	add	r3, r2
 8003460:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003464:	461a      	mov	r2, r3
 8003466:	2310      	movs	r3, #16
 8003468:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003470:	2b00      	cmp	r3, #0
 8003472:	d008      	beq.n	8003486 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003476:	015a      	lsls	r2, r3, #5
 8003478:	69fb      	ldr	r3, [r7, #28]
 800347a:	4413      	add	r3, r2
 800347c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003480:	461a      	mov	r2, r3
 8003482:	2340      	movs	r3, #64	; 0x40
 8003484:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	f003 0302 	and.w	r3, r3, #2
 800348c:	2b00      	cmp	r3, #0
 800348e:	d023      	beq.n	80034d8 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003490:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003492:	6a38      	ldr	r0, [r7, #32]
 8003494:	f002 faea 	bl	8005a6c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003498:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800349a:	4613      	mov	r3, r2
 800349c:	00db      	lsls	r3, r3, #3
 800349e:	4413      	add	r3, r2
 80034a0:	009b      	lsls	r3, r3, #2
 80034a2:	3338      	adds	r3, #56	; 0x38
 80034a4:	687a      	ldr	r2, [r7, #4]
 80034a6:	4413      	add	r3, r2
 80034a8:	3304      	adds	r3, #4
 80034aa:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	78db      	ldrb	r3, [r3, #3]
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	d108      	bne.n	80034c6 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	2200      	movs	r2, #0
 80034b8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80034ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	4619      	mov	r1, r3
 80034c0:	6878      	ldr	r0, [r7, #4]
 80034c2:	f005 ff8b 	bl	80093dc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80034c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c8:	015a      	lsls	r2, r3, #5
 80034ca:	69fb      	ldr	r3, [r7, #28]
 80034cc:	4413      	add	r3, r2
 80034ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034d2:	461a      	mov	r2, r3
 80034d4:	2302      	movs	r3, #2
 80034d6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80034d8:	693b      	ldr	r3, [r7, #16]
 80034da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d003      	beq.n	80034ea <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80034e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	f000 fcdb 	bl	8003ea0 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80034ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ec:	3301      	adds	r3, #1
 80034ee:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80034f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034f2:	085b      	lsrs	r3, r3, #1
 80034f4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80034f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	f47f af2e 	bne.w	800335a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4618      	mov	r0, r3
 8003504:	f003 fad4 	bl	8006ab0 <USB_ReadInterrupts>
 8003508:	4603      	mov	r3, r0
 800350a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800350e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003512:	d122      	bne.n	800355a <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003514:	69fb      	ldr	r3, [r7, #28]
 8003516:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	69fa      	ldr	r2, [r7, #28]
 800351e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003522:	f023 0301 	bic.w	r3, r3, #1
 8003526:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800352e:	2b01      	cmp	r3, #1
 8003530:	d108      	bne.n	8003544 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2200      	movs	r2, #0
 8003536:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800353a:	2100      	movs	r1, #0
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	f000 fec3 	bl	80042c8 <HAL_PCDEx_LPM_Callback>
 8003542:	e002      	b.n	800354a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003544:	6878      	ldr	r0, [r7, #4]
 8003546:	f005 ff29 	bl	800939c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	695a      	ldr	r2, [r3, #20]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003558:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4618      	mov	r0, r3
 8003560:	f003 faa6 	bl	8006ab0 <USB_ReadInterrupts>
 8003564:	4603      	mov	r3, r0
 8003566:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800356a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800356e:	d112      	bne.n	8003596 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003570:	69fb      	ldr	r3, [r7, #28]
 8003572:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	f003 0301 	and.w	r3, r3, #1
 800357c:	2b01      	cmp	r3, #1
 800357e:	d102      	bne.n	8003586 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003580:	6878      	ldr	r0, [r7, #4]
 8003582:	f005 fee5 	bl	8009350 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	695a      	ldr	r2, [r3, #20]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003594:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4618      	mov	r0, r3
 800359c:	f003 fa88 	bl	8006ab0 <USB_ReadInterrupts>
 80035a0:	4603      	mov	r3, r0
 80035a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80035a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035aa:	f040 80b7 	bne.w	800371c <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80035ae:	69fb      	ldr	r3, [r7, #28]
 80035b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	69fa      	ldr	r2, [r7, #28]
 80035b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80035bc:	f023 0301 	bic.w	r3, r3, #1
 80035c0:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	2110      	movs	r1, #16
 80035c8:	4618      	mov	r0, r3
 80035ca:	f002 fa4f 	bl	8005a6c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035ce:	2300      	movs	r3, #0
 80035d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035d2:	e046      	b.n	8003662 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80035d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035d6:	015a      	lsls	r2, r3, #5
 80035d8:	69fb      	ldr	r3, [r7, #28]
 80035da:	4413      	add	r3, r2
 80035dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035e0:	461a      	mov	r2, r3
 80035e2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80035e6:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80035e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035ea:	015a      	lsls	r2, r3, #5
 80035ec:	69fb      	ldr	r3, [r7, #28]
 80035ee:	4413      	add	r3, r2
 80035f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035f8:	0151      	lsls	r1, r2, #5
 80035fa:	69fa      	ldr	r2, [r7, #28]
 80035fc:	440a      	add	r2, r1
 80035fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003602:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003606:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800360a:	015a      	lsls	r2, r3, #5
 800360c:	69fb      	ldr	r3, [r7, #28]
 800360e:	4413      	add	r3, r2
 8003610:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003614:	461a      	mov	r2, r3
 8003616:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800361a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800361c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800361e:	015a      	lsls	r2, r3, #5
 8003620:	69fb      	ldr	r3, [r7, #28]
 8003622:	4413      	add	r3, r2
 8003624:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800362c:	0151      	lsls	r1, r2, #5
 800362e:	69fa      	ldr	r2, [r7, #28]
 8003630:	440a      	add	r2, r1
 8003632:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003636:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800363a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800363c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800363e:	015a      	lsls	r2, r3, #5
 8003640:	69fb      	ldr	r3, [r7, #28]
 8003642:	4413      	add	r3, r2
 8003644:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800364c:	0151      	lsls	r1, r2, #5
 800364e:	69fa      	ldr	r2, [r7, #28]
 8003650:	440a      	add	r2, r1
 8003652:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003656:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800365a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800365c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800365e:	3301      	adds	r3, #1
 8003660:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003668:	429a      	cmp	r2, r3
 800366a:	d3b3      	bcc.n	80035d4 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800366c:	69fb      	ldr	r3, [r7, #28]
 800366e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003672:	69db      	ldr	r3, [r3, #28]
 8003674:	69fa      	ldr	r2, [r7, #28]
 8003676:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800367a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800367e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003684:	2b00      	cmp	r3, #0
 8003686:	d016      	beq.n	80036b6 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003688:	69fb      	ldr	r3, [r7, #28]
 800368a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800368e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003692:	69fa      	ldr	r2, [r7, #28]
 8003694:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003698:	f043 030b 	orr.w	r3, r3, #11
 800369c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80036a0:	69fb      	ldr	r3, [r7, #28]
 80036a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036a8:	69fa      	ldr	r2, [r7, #28]
 80036aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036ae:	f043 030b 	orr.w	r3, r3, #11
 80036b2:	6453      	str	r3, [r2, #68]	; 0x44
 80036b4:	e015      	b.n	80036e2 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80036b6:	69fb      	ldr	r3, [r7, #28]
 80036b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036bc:	695b      	ldr	r3, [r3, #20]
 80036be:	69fa      	ldr	r2, [r7, #28]
 80036c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036c4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80036c8:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80036cc:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80036ce:	69fb      	ldr	r3, [r7, #28]
 80036d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036d4:	691b      	ldr	r3, [r3, #16]
 80036d6:	69fa      	ldr	r2, [r7, #28]
 80036d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036dc:	f043 030b 	orr.w	r3, r3, #11
 80036e0:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80036e2:	69fb      	ldr	r3, [r7, #28]
 80036e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	69fa      	ldr	r2, [r7, #28]
 80036ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036f0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80036f4:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6818      	ldr	r0, [r3, #0]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	691b      	ldr	r3, [r3, #16]
 80036fe:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003706:	461a      	mov	r2, r3
 8003708:	f003 fa96 	bl	8006c38 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	695a      	ldr	r2, [r3, #20]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800371a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4618      	mov	r0, r3
 8003722:	f003 f9c5 	bl	8006ab0 <USB_ReadInterrupts>
 8003726:	4603      	mov	r3, r0
 8003728:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800372c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003730:	d124      	bne.n	800377c <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4618      	mov	r0, r3
 8003738:	f003 fa5b 	bl	8006bf2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4618      	mov	r0, r3
 8003742:	f002 fa10 	bl	8005b66 <USB_GetDevSpeed>
 8003746:	4603      	mov	r3, r0
 8003748:	461a      	mov	r2, r3
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681c      	ldr	r4, [r3, #0]
 8003752:	f001 fa29 	bl	8004ba8 <HAL_RCC_GetHCLKFreq>
 8003756:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800375c:	b2db      	uxtb	r3, r3
 800375e:	461a      	mov	r2, r3
 8003760:	4620      	mov	r0, r4
 8003762:	f001 ff0f 	bl	8005584 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	f005 fdc9 	bl	80092fe <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	695a      	ldr	r2, [r3, #20]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800377a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4618      	mov	r0, r3
 8003782:	f003 f995 	bl	8006ab0 <USB_ReadInterrupts>
 8003786:	4603      	mov	r3, r0
 8003788:	f003 0308 	and.w	r3, r3, #8
 800378c:	2b08      	cmp	r3, #8
 800378e:	d10a      	bne.n	80037a6 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003790:	6878      	ldr	r0, [r7, #4]
 8003792:	f005 fda6 	bl	80092e2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	695a      	ldr	r2, [r3, #20]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f002 0208 	and.w	r2, r2, #8
 80037a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4618      	mov	r0, r3
 80037ac:	f003 f980 	bl	8006ab0 <USB_ReadInterrupts>
 80037b0:	4603      	mov	r3, r0
 80037b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037b6:	2b80      	cmp	r3, #128	; 0x80
 80037b8:	d122      	bne.n	8003800 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80037ba:	6a3b      	ldr	r3, [r7, #32]
 80037bc:	699b      	ldr	r3, [r3, #24]
 80037be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80037c2:	6a3b      	ldr	r3, [r7, #32]
 80037c4:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80037c6:	2301      	movs	r3, #1
 80037c8:	627b      	str	r3, [r7, #36]	; 0x24
 80037ca:	e014      	b.n	80037f6 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80037cc:	6879      	ldr	r1, [r7, #4]
 80037ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037d0:	4613      	mov	r3, r2
 80037d2:	00db      	lsls	r3, r3, #3
 80037d4:	4413      	add	r3, r2
 80037d6:	009b      	lsls	r3, r3, #2
 80037d8:	440b      	add	r3, r1
 80037da:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80037de:	781b      	ldrb	r3, [r3, #0]
 80037e0:	2b01      	cmp	r3, #1
 80037e2:	d105      	bne.n	80037f0 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80037e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e6:	b2db      	uxtb	r3, r3
 80037e8:	4619      	mov	r1, r3
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	f000 fb27 	bl	8003e3e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80037f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f2:	3301      	adds	r3, #1
 80037f4:	627b      	str	r3, [r7, #36]	; 0x24
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d3e5      	bcc.n	80037cc <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4618      	mov	r0, r3
 8003806:	f003 f953 	bl	8006ab0 <USB_ReadInterrupts>
 800380a:	4603      	mov	r3, r0
 800380c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003810:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003814:	d13b      	bne.n	800388e <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003816:	2301      	movs	r3, #1
 8003818:	627b      	str	r3, [r7, #36]	; 0x24
 800381a:	e02b      	b.n	8003874 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800381c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800381e:	015a      	lsls	r2, r3, #5
 8003820:	69fb      	ldr	r3, [r7, #28]
 8003822:	4413      	add	r3, r2
 8003824:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800382c:	6879      	ldr	r1, [r7, #4]
 800382e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003830:	4613      	mov	r3, r2
 8003832:	00db      	lsls	r3, r3, #3
 8003834:	4413      	add	r3, r2
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	440b      	add	r3, r1
 800383a:	3340      	adds	r3, #64	; 0x40
 800383c:	781b      	ldrb	r3, [r3, #0]
 800383e:	2b01      	cmp	r3, #1
 8003840:	d115      	bne.n	800386e <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003842:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003844:	2b00      	cmp	r3, #0
 8003846:	da12      	bge.n	800386e <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003848:	6879      	ldr	r1, [r7, #4]
 800384a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800384c:	4613      	mov	r3, r2
 800384e:	00db      	lsls	r3, r3, #3
 8003850:	4413      	add	r3, r2
 8003852:	009b      	lsls	r3, r3, #2
 8003854:	440b      	add	r3, r1
 8003856:	333f      	adds	r3, #63	; 0x3f
 8003858:	2201      	movs	r2, #1
 800385a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800385c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800385e:	b2db      	uxtb	r3, r3
 8003860:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003864:	b2db      	uxtb	r3, r3
 8003866:	4619      	mov	r1, r3
 8003868:	6878      	ldr	r0, [r7, #4]
 800386a:	f000 fae8 	bl	8003e3e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800386e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003870:	3301      	adds	r3, #1
 8003872:	627b      	str	r3, [r7, #36]	; 0x24
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800387a:	429a      	cmp	r2, r3
 800387c:	d3ce      	bcc.n	800381c <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	695a      	ldr	r2, [r3, #20]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800388c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4618      	mov	r0, r3
 8003894:	f003 f90c 	bl	8006ab0 <USB_ReadInterrupts>
 8003898:	4603      	mov	r3, r0
 800389a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800389e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80038a2:	d155      	bne.n	8003950 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80038a4:	2301      	movs	r3, #1
 80038a6:	627b      	str	r3, [r7, #36]	; 0x24
 80038a8:	e045      	b.n	8003936 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80038aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ac:	015a      	lsls	r2, r3, #5
 80038ae:	69fb      	ldr	r3, [r7, #28]
 80038b0:	4413      	add	r3, r2
 80038b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80038ba:	6879      	ldr	r1, [r7, #4]
 80038bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038be:	4613      	mov	r3, r2
 80038c0:	00db      	lsls	r3, r3, #3
 80038c2:	4413      	add	r3, r2
 80038c4:	009b      	lsls	r3, r3, #2
 80038c6:	440b      	add	r3, r1
 80038c8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80038cc:	781b      	ldrb	r3, [r3, #0]
 80038ce:	2b01      	cmp	r3, #1
 80038d0:	d12e      	bne.n	8003930 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80038d2:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	da2b      	bge.n	8003930 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80038d8:	69bb      	ldr	r3, [r7, #24]
 80038da:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80038e4:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80038e8:	429a      	cmp	r2, r3
 80038ea:	d121      	bne.n	8003930 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80038ec:	6879      	ldr	r1, [r7, #4]
 80038ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038f0:	4613      	mov	r3, r2
 80038f2:	00db      	lsls	r3, r3, #3
 80038f4:	4413      	add	r3, r2
 80038f6:	009b      	lsls	r3, r3, #2
 80038f8:	440b      	add	r3, r1
 80038fa:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80038fe:	2201      	movs	r2, #1
 8003900:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003902:	6a3b      	ldr	r3, [r7, #32]
 8003904:	699b      	ldr	r3, [r3, #24]
 8003906:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800390a:	6a3b      	ldr	r3, [r7, #32]
 800390c:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800390e:	6a3b      	ldr	r3, [r7, #32]
 8003910:	695b      	ldr	r3, [r3, #20]
 8003912:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003916:	2b00      	cmp	r3, #0
 8003918:	d10a      	bne.n	8003930 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800391a:	69fb      	ldr	r3, [r7, #28]
 800391c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	69fa      	ldr	r2, [r7, #28]
 8003924:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003928:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800392c:	6053      	str	r3, [r2, #4]
            break;
 800392e:	e007      	b.n	8003940 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003932:	3301      	adds	r3, #1
 8003934:	627b      	str	r3, [r7, #36]	; 0x24
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800393c:	429a      	cmp	r2, r3
 800393e:	d3b4      	bcc.n	80038aa <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	695a      	ldr	r2, [r3, #20]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800394e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4618      	mov	r0, r3
 8003956:	f003 f8ab 	bl	8006ab0 <USB_ReadInterrupts>
 800395a:	4603      	mov	r3, r0
 800395c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003960:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003964:	d10a      	bne.n	800397c <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f005 fd4a 	bl	8009400 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	695a      	ldr	r2, [r3, #20]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800397a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4618      	mov	r0, r3
 8003982:	f003 f895 	bl	8006ab0 <USB_ReadInterrupts>
 8003986:	4603      	mov	r3, r0
 8003988:	f003 0304 	and.w	r3, r3, #4
 800398c:	2b04      	cmp	r3, #4
 800398e:	d115      	bne.n	80039bc <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003998:	69bb      	ldr	r3, [r7, #24]
 800399a:	f003 0304 	and.w	r3, r3, #4
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d002      	beq.n	80039a8 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f005 fd3a 	bl	800941c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	6859      	ldr	r1, [r3, #4]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	69ba      	ldr	r2, [r7, #24]
 80039b4:	430a      	orrs	r2, r1
 80039b6:	605a      	str	r2, [r3, #4]
 80039b8:	e000      	b.n	80039bc <HAL_PCD_IRQHandler+0x938>
      return;
 80039ba:	bf00      	nop
    }
  }
}
 80039bc:	3734      	adds	r7, #52	; 0x34
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd90      	pop	{r4, r7, pc}

080039c2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80039c2:	b580      	push	{r7, lr}
 80039c4:	b082      	sub	sp, #8
 80039c6:	af00      	add	r7, sp, #0
 80039c8:	6078      	str	r0, [r7, #4]
 80039ca:	460b      	mov	r3, r1
 80039cc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	d101      	bne.n	80039dc <HAL_PCD_SetAddress+0x1a>
 80039d8:	2302      	movs	r3, #2
 80039da:	e013      	b.n	8003a04 <HAL_PCD_SetAddress+0x42>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2201      	movs	r2, #1
 80039e0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	78fa      	ldrb	r2, [r7, #3]
 80039e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	78fa      	ldrb	r2, [r7, #3]
 80039f2:	4611      	mov	r1, r2
 80039f4:	4618      	mov	r0, r3
 80039f6:	f002 fff3 	bl	80069e0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2200      	movs	r2, #0
 80039fe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003a02:	2300      	movs	r3, #0
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	3708      	adds	r7, #8
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}

08003a0c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b084      	sub	sp, #16
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
 8003a14:	4608      	mov	r0, r1
 8003a16:	4611      	mov	r1, r2
 8003a18:	461a      	mov	r2, r3
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	70fb      	strb	r3, [r7, #3]
 8003a1e:	460b      	mov	r3, r1
 8003a20:	803b      	strh	r3, [r7, #0]
 8003a22:	4613      	mov	r3, r2
 8003a24:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003a26:	2300      	movs	r3, #0
 8003a28:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003a2a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	da0f      	bge.n	8003a52 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a32:	78fb      	ldrb	r3, [r7, #3]
 8003a34:	f003 020f 	and.w	r2, r3, #15
 8003a38:	4613      	mov	r3, r2
 8003a3a:	00db      	lsls	r3, r3, #3
 8003a3c:	4413      	add	r3, r2
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	3338      	adds	r3, #56	; 0x38
 8003a42:	687a      	ldr	r2, [r7, #4]
 8003a44:	4413      	add	r3, r2
 8003a46:	3304      	adds	r3, #4
 8003a48:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	705a      	strb	r2, [r3, #1]
 8003a50:	e00f      	b.n	8003a72 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a52:	78fb      	ldrb	r3, [r7, #3]
 8003a54:	f003 020f 	and.w	r2, r3, #15
 8003a58:	4613      	mov	r3, r2
 8003a5a:	00db      	lsls	r3, r3, #3
 8003a5c:	4413      	add	r3, r2
 8003a5e:	009b      	lsls	r3, r3, #2
 8003a60:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003a64:	687a      	ldr	r2, [r7, #4]
 8003a66:	4413      	add	r3, r2
 8003a68:	3304      	adds	r3, #4
 8003a6a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003a72:	78fb      	ldrb	r3, [r7, #3]
 8003a74:	f003 030f 	and.w	r3, r3, #15
 8003a78:	b2da      	uxtb	r2, r3
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003a7e:	883a      	ldrh	r2, [r7, #0]
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	78ba      	ldrb	r2, [r7, #2]
 8003a88:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	785b      	ldrb	r3, [r3, #1]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d004      	beq.n	8003a9c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	781b      	ldrb	r3, [r3, #0]
 8003a96:	b29a      	uxth	r2, r3
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003a9c:	78bb      	ldrb	r3, [r7, #2]
 8003a9e:	2b02      	cmp	r3, #2
 8003aa0:	d102      	bne.n	8003aa8 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003aae:	2b01      	cmp	r3, #1
 8003ab0:	d101      	bne.n	8003ab6 <HAL_PCD_EP_Open+0xaa>
 8003ab2:	2302      	movs	r3, #2
 8003ab4:	e00e      	b.n	8003ad4 <HAL_PCD_EP_Open+0xc8>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2201      	movs	r2, #1
 8003aba:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	68f9      	ldr	r1, [r7, #12]
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f002 f873 	bl	8005bb0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2200      	movs	r2, #0
 8003ace:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003ad2:	7afb      	ldrb	r3, [r7, #11]
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	3710      	adds	r7, #16
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}

08003adc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b084      	sub	sp, #16
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
 8003ae4:	460b      	mov	r3, r1
 8003ae6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003ae8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	da0f      	bge.n	8003b10 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003af0:	78fb      	ldrb	r3, [r7, #3]
 8003af2:	f003 020f 	and.w	r2, r3, #15
 8003af6:	4613      	mov	r3, r2
 8003af8:	00db      	lsls	r3, r3, #3
 8003afa:	4413      	add	r3, r2
 8003afc:	009b      	lsls	r3, r3, #2
 8003afe:	3338      	adds	r3, #56	; 0x38
 8003b00:	687a      	ldr	r2, [r7, #4]
 8003b02:	4413      	add	r3, r2
 8003b04:	3304      	adds	r3, #4
 8003b06:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	705a      	strb	r2, [r3, #1]
 8003b0e:	e00f      	b.n	8003b30 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b10:	78fb      	ldrb	r3, [r7, #3]
 8003b12:	f003 020f 	and.w	r2, r3, #15
 8003b16:	4613      	mov	r3, r2
 8003b18:	00db      	lsls	r3, r3, #3
 8003b1a:	4413      	add	r3, r2
 8003b1c:	009b      	lsls	r3, r3, #2
 8003b1e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003b22:	687a      	ldr	r2, [r7, #4]
 8003b24:	4413      	add	r3, r2
 8003b26:	3304      	adds	r3, #4
 8003b28:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003b30:	78fb      	ldrb	r3, [r7, #3]
 8003b32:	f003 030f 	and.w	r3, r3, #15
 8003b36:	b2da      	uxtb	r2, r3
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003b42:	2b01      	cmp	r3, #1
 8003b44:	d101      	bne.n	8003b4a <HAL_PCD_EP_Close+0x6e>
 8003b46:	2302      	movs	r3, #2
 8003b48:	e00e      	b.n	8003b68 <HAL_PCD_EP_Close+0x8c>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	68f9      	ldr	r1, [r7, #12]
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f002 f8b1 	bl	8005cc0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2200      	movs	r2, #0
 8003b62:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8003b66:	2300      	movs	r3, #0
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	3710      	adds	r7, #16
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}

08003b70 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b086      	sub	sp, #24
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	60f8      	str	r0, [r7, #12]
 8003b78:	607a      	str	r2, [r7, #4]
 8003b7a:	603b      	str	r3, [r7, #0]
 8003b7c:	460b      	mov	r3, r1
 8003b7e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b80:	7afb      	ldrb	r3, [r7, #11]
 8003b82:	f003 020f 	and.w	r2, r3, #15
 8003b86:	4613      	mov	r3, r2
 8003b88:	00db      	lsls	r3, r3, #3
 8003b8a:	4413      	add	r3, r2
 8003b8c:	009b      	lsls	r3, r3, #2
 8003b8e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003b92:	68fa      	ldr	r2, [r7, #12]
 8003b94:	4413      	add	r3, r2
 8003b96:	3304      	adds	r3, #4
 8003b98:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	687a      	ldr	r2, [r7, #4]
 8003b9e:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	683a      	ldr	r2, [r7, #0]
 8003ba4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003bb2:	7afb      	ldrb	r3, [r7, #11]
 8003bb4:	f003 030f 	and.w	r3, r3, #15
 8003bb8:	b2da      	uxtb	r2, r3
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	691b      	ldr	r3, [r3, #16]
 8003bc2:	2b01      	cmp	r3, #1
 8003bc4:	d102      	bne.n	8003bcc <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003bc6:	687a      	ldr	r2, [r7, #4]
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003bcc:	7afb      	ldrb	r3, [r7, #11]
 8003bce:	f003 030f 	and.w	r3, r3, #15
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d109      	bne.n	8003bea <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	6818      	ldr	r0, [r3, #0]
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	691b      	ldr	r3, [r3, #16]
 8003bde:	b2db      	uxtb	r3, r3
 8003be0:	461a      	mov	r2, r3
 8003be2:	6979      	ldr	r1, [r7, #20]
 8003be4:	f002 fb90 	bl	8006308 <USB_EP0StartXfer>
 8003be8:	e008      	b.n	8003bfc <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	6818      	ldr	r0, [r3, #0]
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	691b      	ldr	r3, [r3, #16]
 8003bf2:	b2db      	uxtb	r3, r3
 8003bf4:	461a      	mov	r2, r3
 8003bf6:	6979      	ldr	r1, [r7, #20]
 8003bf8:	f002 f93e 	bl	8005e78 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003bfc:	2300      	movs	r3, #0
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	3718      	adds	r7, #24
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}

08003c06 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c06:	b480      	push	{r7}
 8003c08:	b083      	sub	sp, #12
 8003c0a:	af00      	add	r7, sp, #0
 8003c0c:	6078      	str	r0, [r7, #4]
 8003c0e:	460b      	mov	r3, r1
 8003c10:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003c12:	78fb      	ldrb	r3, [r7, #3]
 8003c14:	f003 020f 	and.w	r2, r3, #15
 8003c18:	6879      	ldr	r1, [r7, #4]
 8003c1a:	4613      	mov	r3, r2
 8003c1c:	00db      	lsls	r3, r3, #3
 8003c1e:	4413      	add	r3, r2
 8003c20:	009b      	lsls	r3, r3, #2
 8003c22:	440b      	add	r3, r1
 8003c24:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8003c28:	681b      	ldr	r3, [r3, #0]
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	370c      	adds	r7, #12
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c34:	4770      	bx	lr

08003c36 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003c36:	b580      	push	{r7, lr}
 8003c38:	b086      	sub	sp, #24
 8003c3a:	af00      	add	r7, sp, #0
 8003c3c:	60f8      	str	r0, [r7, #12]
 8003c3e:	607a      	str	r2, [r7, #4]
 8003c40:	603b      	str	r3, [r7, #0]
 8003c42:	460b      	mov	r3, r1
 8003c44:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c46:	7afb      	ldrb	r3, [r7, #11]
 8003c48:	f003 020f 	and.w	r2, r3, #15
 8003c4c:	4613      	mov	r3, r2
 8003c4e:	00db      	lsls	r3, r3, #3
 8003c50:	4413      	add	r3, r2
 8003c52:	009b      	lsls	r3, r3, #2
 8003c54:	3338      	adds	r3, #56	; 0x38
 8003c56:	68fa      	ldr	r2, [r7, #12]
 8003c58:	4413      	add	r3, r2
 8003c5a:	3304      	adds	r3, #4
 8003c5c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	687a      	ldr	r2, [r7, #4]
 8003c62:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	683a      	ldr	r2, [r7, #0]
 8003c68:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	2201      	movs	r2, #1
 8003c74:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c76:	7afb      	ldrb	r3, [r7, #11]
 8003c78:	f003 030f 	and.w	r3, r3, #15
 8003c7c:	b2da      	uxtb	r2, r3
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	691b      	ldr	r3, [r3, #16]
 8003c86:	2b01      	cmp	r3, #1
 8003c88:	d102      	bne.n	8003c90 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003c8a:	687a      	ldr	r2, [r7, #4]
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003c90:	7afb      	ldrb	r3, [r7, #11]
 8003c92:	f003 030f 	and.w	r3, r3, #15
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d109      	bne.n	8003cae <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	6818      	ldr	r0, [r3, #0]
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	691b      	ldr	r3, [r3, #16]
 8003ca2:	b2db      	uxtb	r3, r3
 8003ca4:	461a      	mov	r2, r3
 8003ca6:	6979      	ldr	r1, [r7, #20]
 8003ca8:	f002 fb2e 	bl	8006308 <USB_EP0StartXfer>
 8003cac:	e008      	b.n	8003cc0 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	6818      	ldr	r0, [r3, #0]
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	691b      	ldr	r3, [r3, #16]
 8003cb6:	b2db      	uxtb	r3, r3
 8003cb8:	461a      	mov	r2, r3
 8003cba:	6979      	ldr	r1, [r7, #20]
 8003cbc:	f002 f8dc 	bl	8005e78 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003cc0:	2300      	movs	r3, #0
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	3718      	adds	r7, #24
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}

08003cca <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003cca:	b580      	push	{r7, lr}
 8003ccc:	b084      	sub	sp, #16
 8003cce:	af00      	add	r7, sp, #0
 8003cd0:	6078      	str	r0, [r7, #4]
 8003cd2:	460b      	mov	r3, r1
 8003cd4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003cd6:	78fb      	ldrb	r3, [r7, #3]
 8003cd8:	f003 020f 	and.w	r2, r3, #15
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d901      	bls.n	8003ce8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	e050      	b.n	8003d8a <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003ce8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	da0f      	bge.n	8003d10 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003cf0:	78fb      	ldrb	r3, [r7, #3]
 8003cf2:	f003 020f 	and.w	r2, r3, #15
 8003cf6:	4613      	mov	r3, r2
 8003cf8:	00db      	lsls	r3, r3, #3
 8003cfa:	4413      	add	r3, r2
 8003cfc:	009b      	lsls	r3, r3, #2
 8003cfe:	3338      	adds	r3, #56	; 0x38
 8003d00:	687a      	ldr	r2, [r7, #4]
 8003d02:	4413      	add	r3, r2
 8003d04:	3304      	adds	r3, #4
 8003d06:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	705a      	strb	r2, [r3, #1]
 8003d0e:	e00d      	b.n	8003d2c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003d10:	78fa      	ldrb	r2, [r7, #3]
 8003d12:	4613      	mov	r3, r2
 8003d14:	00db      	lsls	r3, r3, #3
 8003d16:	4413      	add	r3, r2
 8003d18:	009b      	lsls	r3, r3, #2
 8003d1a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003d1e:	687a      	ldr	r2, [r7, #4]
 8003d20:	4413      	add	r3, r2
 8003d22:	3304      	adds	r3, #4
 8003d24:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2201      	movs	r2, #1
 8003d30:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d32:	78fb      	ldrb	r3, [r7, #3]
 8003d34:	f003 030f 	and.w	r3, r3, #15
 8003d38:	b2da      	uxtb	r2, r3
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d101      	bne.n	8003d4c <HAL_PCD_EP_SetStall+0x82>
 8003d48:	2302      	movs	r3, #2
 8003d4a:	e01e      	b.n	8003d8a <HAL_PCD_EP_SetStall+0xc0>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2201      	movs	r2, #1
 8003d50:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	68f9      	ldr	r1, [r7, #12]
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f002 fd6c 	bl	8006838 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003d60:	78fb      	ldrb	r3, [r7, #3]
 8003d62:	f003 030f 	and.w	r3, r3, #15
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d10a      	bne.n	8003d80 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6818      	ldr	r0, [r3, #0]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	691b      	ldr	r3, [r3, #16]
 8003d72:	b2d9      	uxtb	r1, r3
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003d7a:	461a      	mov	r2, r3
 8003d7c:	f002 ff5c 	bl	8006c38 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2200      	movs	r2, #0
 8003d84:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003d88:	2300      	movs	r3, #0
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	3710      	adds	r7, #16
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}

08003d92 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003d92:	b580      	push	{r7, lr}
 8003d94:	b084      	sub	sp, #16
 8003d96:	af00      	add	r7, sp, #0
 8003d98:	6078      	str	r0, [r7, #4]
 8003d9a:	460b      	mov	r3, r1
 8003d9c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003d9e:	78fb      	ldrb	r3, [r7, #3]
 8003da0:	f003 020f 	and.w	r2, r3, #15
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	429a      	cmp	r2, r3
 8003daa:	d901      	bls.n	8003db0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003dac:	2301      	movs	r3, #1
 8003dae:	e042      	b.n	8003e36 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003db0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	da0f      	bge.n	8003dd8 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003db8:	78fb      	ldrb	r3, [r7, #3]
 8003dba:	f003 020f 	and.w	r2, r3, #15
 8003dbe:	4613      	mov	r3, r2
 8003dc0:	00db      	lsls	r3, r3, #3
 8003dc2:	4413      	add	r3, r2
 8003dc4:	009b      	lsls	r3, r3, #2
 8003dc6:	3338      	adds	r3, #56	; 0x38
 8003dc8:	687a      	ldr	r2, [r7, #4]
 8003dca:	4413      	add	r3, r2
 8003dcc:	3304      	adds	r3, #4
 8003dce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	705a      	strb	r2, [r3, #1]
 8003dd6:	e00f      	b.n	8003df8 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003dd8:	78fb      	ldrb	r3, [r7, #3]
 8003dda:	f003 020f 	and.w	r2, r3, #15
 8003dde:	4613      	mov	r3, r2
 8003de0:	00db      	lsls	r3, r3, #3
 8003de2:	4413      	add	r3, r2
 8003de4:	009b      	lsls	r3, r3, #2
 8003de6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003dea:	687a      	ldr	r2, [r7, #4]
 8003dec:	4413      	add	r3, r2
 8003dee:	3304      	adds	r3, #4
 8003df0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2200      	movs	r2, #0
 8003df6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003dfe:	78fb      	ldrb	r3, [r7, #3]
 8003e00:	f003 030f 	and.w	r3, r3, #15
 8003e04:	b2da      	uxtb	r2, r3
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	d101      	bne.n	8003e18 <HAL_PCD_EP_ClrStall+0x86>
 8003e14:	2302      	movs	r3, #2
 8003e16:	e00e      	b.n	8003e36 <HAL_PCD_EP_ClrStall+0xa4>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	68f9      	ldr	r1, [r7, #12]
 8003e26:	4618      	mov	r0, r3
 8003e28:	f002 fd74 	bl	8006914 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003e34:	2300      	movs	r3, #0
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3710      	adds	r7, #16
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}

08003e3e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e3e:	b580      	push	{r7, lr}
 8003e40:	b084      	sub	sp, #16
 8003e42:	af00      	add	r7, sp, #0
 8003e44:	6078      	str	r0, [r7, #4]
 8003e46:	460b      	mov	r3, r1
 8003e48:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003e4a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	da0c      	bge.n	8003e6c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e52:	78fb      	ldrb	r3, [r7, #3]
 8003e54:	f003 020f 	and.w	r2, r3, #15
 8003e58:	4613      	mov	r3, r2
 8003e5a:	00db      	lsls	r3, r3, #3
 8003e5c:	4413      	add	r3, r2
 8003e5e:	009b      	lsls	r3, r3, #2
 8003e60:	3338      	adds	r3, #56	; 0x38
 8003e62:	687a      	ldr	r2, [r7, #4]
 8003e64:	4413      	add	r3, r2
 8003e66:	3304      	adds	r3, #4
 8003e68:	60fb      	str	r3, [r7, #12]
 8003e6a:	e00c      	b.n	8003e86 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e6c:	78fb      	ldrb	r3, [r7, #3]
 8003e6e:	f003 020f 	and.w	r2, r3, #15
 8003e72:	4613      	mov	r3, r2
 8003e74:	00db      	lsls	r3, r3, #3
 8003e76:	4413      	add	r3, r2
 8003e78:	009b      	lsls	r3, r3, #2
 8003e7a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003e7e:	687a      	ldr	r2, [r7, #4]
 8003e80:	4413      	add	r3, r2
 8003e82:	3304      	adds	r3, #4
 8003e84:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	68f9      	ldr	r1, [r7, #12]
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f002 fb93 	bl	80065b8 <USB_EPStopXfer>
 8003e92:	4603      	mov	r3, r0
 8003e94:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003e96:	7afb      	ldrb	r3, [r7, #11]
}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	3710      	adds	r7, #16
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd80      	pop	{r7, pc}

08003ea0 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b08a      	sub	sp, #40	; 0x28
 8003ea4:	af02      	add	r7, sp, #8
 8003ea6:	6078      	str	r0, [r7, #4]
 8003ea8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003eb4:	683a      	ldr	r2, [r7, #0]
 8003eb6:	4613      	mov	r3, r2
 8003eb8:	00db      	lsls	r3, r3, #3
 8003eba:	4413      	add	r3, r2
 8003ebc:	009b      	lsls	r3, r3, #2
 8003ebe:	3338      	adds	r3, #56	; 0x38
 8003ec0:	687a      	ldr	r2, [r7, #4]
 8003ec2:	4413      	add	r3, r2
 8003ec4:	3304      	adds	r3, #4
 8003ec6:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	6a1a      	ldr	r2, [r3, #32]
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	699b      	ldr	r3, [r3, #24]
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	d901      	bls.n	8003ed8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	e06c      	b.n	8003fb2 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	699a      	ldr	r2, [r3, #24]
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	6a1b      	ldr	r3, [r3, #32]
 8003ee0:	1ad3      	subs	r3, r2, r3
 8003ee2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	68db      	ldr	r3, [r3, #12]
 8003ee8:	69fa      	ldr	r2, [r7, #28]
 8003eea:	429a      	cmp	r2, r3
 8003eec:	d902      	bls.n	8003ef4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	68db      	ldr	r3, [r3, #12]
 8003ef2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003ef4:	69fb      	ldr	r3, [r7, #28]
 8003ef6:	3303      	adds	r3, #3
 8003ef8:	089b      	lsrs	r3, r3, #2
 8003efa:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003efc:	e02b      	b.n	8003f56 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	699a      	ldr	r2, [r3, #24]
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	6a1b      	ldr	r3, [r3, #32]
 8003f06:	1ad3      	subs	r3, r2, r3
 8003f08:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	68db      	ldr	r3, [r3, #12]
 8003f0e:	69fa      	ldr	r2, [r7, #28]
 8003f10:	429a      	cmp	r2, r3
 8003f12:	d902      	bls.n	8003f1a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	68db      	ldr	r3, [r3, #12]
 8003f18:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003f1a:	69fb      	ldr	r3, [r7, #28]
 8003f1c:	3303      	adds	r3, #3
 8003f1e:	089b      	lsrs	r3, r3, #2
 8003f20:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	6919      	ldr	r1, [r3, #16]
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	b2da      	uxtb	r2, r3
 8003f2a:	69fb      	ldr	r3, [r7, #28]
 8003f2c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003f32:	b2db      	uxtb	r3, r3
 8003f34:	9300      	str	r3, [sp, #0]
 8003f36:	4603      	mov	r3, r0
 8003f38:	6978      	ldr	r0, [r7, #20]
 8003f3a:	f002 fbe7 	bl	800670c <USB_WritePacket>

    ep->xfer_buff  += len;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	691a      	ldr	r2, [r3, #16]
 8003f42:	69fb      	ldr	r3, [r7, #28]
 8003f44:	441a      	add	r2, r3
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	6a1a      	ldr	r2, [r3, #32]
 8003f4e:	69fb      	ldr	r3, [r7, #28]
 8003f50:	441a      	add	r2, r3
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	015a      	lsls	r2, r3, #5
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	4413      	add	r3, r2
 8003f5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f62:	699b      	ldr	r3, [r3, #24]
 8003f64:	b29b      	uxth	r3, r3
 8003f66:	69ba      	ldr	r2, [r7, #24]
 8003f68:	429a      	cmp	r2, r3
 8003f6a:	d809      	bhi.n	8003f80 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	6a1a      	ldr	r2, [r3, #32]
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003f74:	429a      	cmp	r2, r3
 8003f76:	d203      	bcs.n	8003f80 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	699b      	ldr	r3, [r3, #24]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d1be      	bne.n	8003efe <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	699a      	ldr	r2, [r3, #24]
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	6a1b      	ldr	r3, [r3, #32]
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	d811      	bhi.n	8003fb0 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	f003 030f 	and.w	r3, r3, #15
 8003f92:	2201      	movs	r2, #1
 8003f94:	fa02 f303 	lsl.w	r3, r2, r3
 8003f98:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fa0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	43db      	mvns	r3, r3
 8003fa6:	6939      	ldr	r1, [r7, #16]
 8003fa8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003fac:	4013      	ands	r3, r2
 8003fae:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003fb0:	2300      	movs	r3, #0
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	3720      	adds	r7, #32
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}
	...

08003fbc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b088      	sub	sp, #32
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
 8003fc4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fcc:	69fb      	ldr	r3, [r7, #28]
 8003fce:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003fd0:	69fb      	ldr	r3, [r7, #28]
 8003fd2:	333c      	adds	r3, #60	; 0x3c
 8003fd4:	3304      	adds	r3, #4
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	015a      	lsls	r2, r3, #5
 8003fde:	69bb      	ldr	r3, [r7, #24]
 8003fe0:	4413      	add	r3, r2
 8003fe2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	691b      	ldr	r3, [r3, #16]
 8003fee:	2b01      	cmp	r3, #1
 8003ff0:	d17b      	bne.n	80040ea <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	f003 0308 	and.w	r3, r3, #8
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d015      	beq.n	8004028 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	4a61      	ldr	r2, [pc, #388]	; (8004184 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004000:	4293      	cmp	r3, r2
 8004002:	f240 80b9 	bls.w	8004178 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800400c:	2b00      	cmp	r3, #0
 800400e:	f000 80b3 	beq.w	8004178 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	015a      	lsls	r2, r3, #5
 8004016:	69bb      	ldr	r3, [r7, #24]
 8004018:	4413      	add	r3, r2
 800401a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800401e:	461a      	mov	r2, r3
 8004020:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004024:	6093      	str	r3, [r2, #8]
 8004026:	e0a7      	b.n	8004178 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	f003 0320 	and.w	r3, r3, #32
 800402e:	2b00      	cmp	r3, #0
 8004030:	d009      	beq.n	8004046 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	015a      	lsls	r2, r3, #5
 8004036:	69bb      	ldr	r3, [r7, #24]
 8004038:	4413      	add	r3, r2
 800403a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800403e:	461a      	mov	r2, r3
 8004040:	2320      	movs	r3, #32
 8004042:	6093      	str	r3, [r2, #8]
 8004044:	e098      	b.n	8004178 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800404c:	2b00      	cmp	r3, #0
 800404e:	f040 8093 	bne.w	8004178 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	4a4b      	ldr	r2, [pc, #300]	; (8004184 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d90f      	bls.n	800407a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004060:	2b00      	cmp	r3, #0
 8004062:	d00a      	beq.n	800407a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	015a      	lsls	r2, r3, #5
 8004068:	69bb      	ldr	r3, [r7, #24]
 800406a:	4413      	add	r3, r2
 800406c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004070:	461a      	mov	r2, r3
 8004072:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004076:	6093      	str	r3, [r2, #8]
 8004078:	e07e      	b.n	8004178 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800407a:	683a      	ldr	r2, [r7, #0]
 800407c:	4613      	mov	r3, r2
 800407e:	00db      	lsls	r3, r3, #3
 8004080:	4413      	add	r3, r2
 8004082:	009b      	lsls	r3, r3, #2
 8004084:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004088:	687a      	ldr	r2, [r7, #4]
 800408a:	4413      	add	r3, r2
 800408c:	3304      	adds	r3, #4
 800408e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	69da      	ldr	r2, [r3, #28]
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	0159      	lsls	r1, r3, #5
 8004098:	69bb      	ldr	r3, [r7, #24]
 800409a:	440b      	add	r3, r1
 800409c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040a0:	691b      	ldr	r3, [r3, #16]
 80040a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040a6:	1ad2      	subs	r2, r2, r3
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d114      	bne.n	80040dc <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	699b      	ldr	r3, [r3, #24]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d109      	bne.n	80040ce <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6818      	ldr	r0, [r3, #0]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80040c4:	461a      	mov	r2, r3
 80040c6:	2101      	movs	r1, #1
 80040c8:	f002 fdb6 	bl	8006c38 <USB_EP0_OutStart>
 80040cc:	e006      	b.n	80040dc <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	691a      	ldr	r2, [r3, #16]
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	6a1b      	ldr	r3, [r3, #32]
 80040d6:	441a      	add	r2, r3
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	b2db      	uxtb	r3, r3
 80040e0:	4619      	mov	r1, r3
 80040e2:	6878      	ldr	r0, [r7, #4]
 80040e4:	f005 f8c8 	bl	8009278 <HAL_PCD_DataOutStageCallback>
 80040e8:	e046      	b.n	8004178 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	4a26      	ldr	r2, [pc, #152]	; (8004188 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d124      	bne.n	800413c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d00a      	beq.n	8004112 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	015a      	lsls	r2, r3, #5
 8004100:	69bb      	ldr	r3, [r7, #24]
 8004102:	4413      	add	r3, r2
 8004104:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004108:	461a      	mov	r2, r3
 800410a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800410e:	6093      	str	r3, [r2, #8]
 8004110:	e032      	b.n	8004178 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	f003 0320 	and.w	r3, r3, #32
 8004118:	2b00      	cmp	r3, #0
 800411a:	d008      	beq.n	800412e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	015a      	lsls	r2, r3, #5
 8004120:	69bb      	ldr	r3, [r7, #24]
 8004122:	4413      	add	r3, r2
 8004124:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004128:	461a      	mov	r2, r3
 800412a:	2320      	movs	r3, #32
 800412c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	b2db      	uxtb	r3, r3
 8004132:	4619      	mov	r1, r3
 8004134:	6878      	ldr	r0, [r7, #4]
 8004136:	f005 f89f 	bl	8009278 <HAL_PCD_DataOutStageCallback>
 800413a:	e01d      	b.n	8004178 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d114      	bne.n	800416c <PCD_EP_OutXfrComplete_int+0x1b0>
 8004142:	6879      	ldr	r1, [r7, #4]
 8004144:	683a      	ldr	r2, [r7, #0]
 8004146:	4613      	mov	r3, r2
 8004148:	00db      	lsls	r3, r3, #3
 800414a:	4413      	add	r3, r2
 800414c:	009b      	lsls	r3, r3, #2
 800414e:	440b      	add	r3, r1
 8004150:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d108      	bne.n	800416c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6818      	ldr	r0, [r3, #0]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004164:	461a      	mov	r2, r3
 8004166:	2100      	movs	r1, #0
 8004168:	f002 fd66 	bl	8006c38 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	b2db      	uxtb	r3, r3
 8004170:	4619      	mov	r1, r3
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	f005 f880 	bl	8009278 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004178:	2300      	movs	r3, #0
}
 800417a:	4618      	mov	r0, r3
 800417c:	3720      	adds	r7, #32
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}
 8004182:	bf00      	nop
 8004184:	4f54300a 	.word	0x4f54300a
 8004188:	4f54310a 	.word	0x4f54310a

0800418c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b086      	sub	sp, #24
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
 8004194:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	333c      	adds	r3, #60	; 0x3c
 80041a4:	3304      	adds	r3, #4
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	015a      	lsls	r2, r3, #5
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	4413      	add	r3, r2
 80041b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	4a15      	ldr	r2, [pc, #84]	; (8004214 <PCD_EP_OutSetupPacket_int+0x88>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d90e      	bls.n	80041e0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d009      	beq.n	80041e0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	015a      	lsls	r2, r3, #5
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	4413      	add	r3, r2
 80041d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041d8:	461a      	mov	r2, r3
 80041da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80041de:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80041e0:	6878      	ldr	r0, [r7, #4]
 80041e2:	f005 f837 	bl	8009254 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	4a0a      	ldr	r2, [pc, #40]	; (8004214 <PCD_EP_OutSetupPacket_int+0x88>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d90c      	bls.n	8004208 <PCD_EP_OutSetupPacket_int+0x7c>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	691b      	ldr	r3, [r3, #16]
 80041f2:	2b01      	cmp	r3, #1
 80041f4:	d108      	bne.n	8004208 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6818      	ldr	r0, [r3, #0]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004200:	461a      	mov	r2, r3
 8004202:	2101      	movs	r1, #1
 8004204:	f002 fd18 	bl	8006c38 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004208:	2300      	movs	r3, #0
}
 800420a:	4618      	mov	r0, r3
 800420c:	3718      	adds	r7, #24
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}
 8004212:	bf00      	nop
 8004214:	4f54300a 	.word	0x4f54300a

08004218 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004218:	b480      	push	{r7}
 800421a:	b085      	sub	sp, #20
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
 8004220:	460b      	mov	r3, r1
 8004222:	70fb      	strb	r3, [r7, #3]
 8004224:	4613      	mov	r3, r2
 8004226:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800422e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004230:	78fb      	ldrb	r3, [r7, #3]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d107      	bne.n	8004246 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004236:	883b      	ldrh	r3, [r7, #0]
 8004238:	0419      	lsls	r1, r3, #16
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	68ba      	ldr	r2, [r7, #8]
 8004240:	430a      	orrs	r2, r1
 8004242:	629a      	str	r2, [r3, #40]	; 0x28
 8004244:	e028      	b.n	8004298 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800424c:	0c1b      	lsrs	r3, r3, #16
 800424e:	68ba      	ldr	r2, [r7, #8]
 8004250:	4413      	add	r3, r2
 8004252:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004254:	2300      	movs	r3, #0
 8004256:	73fb      	strb	r3, [r7, #15]
 8004258:	e00d      	b.n	8004276 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681a      	ldr	r2, [r3, #0]
 800425e:	7bfb      	ldrb	r3, [r7, #15]
 8004260:	3340      	adds	r3, #64	; 0x40
 8004262:	009b      	lsls	r3, r3, #2
 8004264:	4413      	add	r3, r2
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	0c1b      	lsrs	r3, r3, #16
 800426a:	68ba      	ldr	r2, [r7, #8]
 800426c:	4413      	add	r3, r2
 800426e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004270:	7bfb      	ldrb	r3, [r7, #15]
 8004272:	3301      	adds	r3, #1
 8004274:	73fb      	strb	r3, [r7, #15]
 8004276:	7bfa      	ldrb	r2, [r7, #15]
 8004278:	78fb      	ldrb	r3, [r7, #3]
 800427a:	3b01      	subs	r3, #1
 800427c:	429a      	cmp	r2, r3
 800427e:	d3ec      	bcc.n	800425a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004280:	883b      	ldrh	r3, [r7, #0]
 8004282:	0418      	lsls	r0, r3, #16
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6819      	ldr	r1, [r3, #0]
 8004288:	78fb      	ldrb	r3, [r7, #3]
 800428a:	3b01      	subs	r3, #1
 800428c:	68ba      	ldr	r2, [r7, #8]
 800428e:	4302      	orrs	r2, r0
 8004290:	3340      	adds	r3, #64	; 0x40
 8004292:	009b      	lsls	r3, r3, #2
 8004294:	440b      	add	r3, r1
 8004296:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004298:	2300      	movs	r3, #0
}
 800429a:	4618      	mov	r0, r3
 800429c:	3714      	adds	r7, #20
 800429e:	46bd      	mov	sp, r7
 80042a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a4:	4770      	bx	lr

080042a6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80042a6:	b480      	push	{r7}
 80042a8:	b083      	sub	sp, #12
 80042aa:	af00      	add	r7, sp, #0
 80042ac:	6078      	str	r0, [r7, #4]
 80042ae:	460b      	mov	r3, r1
 80042b0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	887a      	ldrh	r2, [r7, #2]
 80042b8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80042ba:	2300      	movs	r3, #0
}
 80042bc:	4618      	mov	r0, r3
 80042be:	370c      	adds	r7, #12
 80042c0:	46bd      	mov	sp, r7
 80042c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c6:	4770      	bx	lr

080042c8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b083      	sub	sp, #12
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
 80042d0:	460b      	mov	r3, r1
 80042d2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80042d4:	bf00      	nop
 80042d6:	370c      	adds	r7, #12
 80042d8:	46bd      	mov	sp, r7
 80042da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042de:	4770      	bx	lr

080042e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b086      	sub	sp, #24
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d101      	bne.n	80042f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
 80042f0:	e267      	b.n	80047c2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f003 0301 	and.w	r3, r3, #1
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d075      	beq.n	80043ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80042fe:	4b88      	ldr	r3, [pc, #544]	; (8004520 <HAL_RCC_OscConfig+0x240>)
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	f003 030c 	and.w	r3, r3, #12
 8004306:	2b04      	cmp	r3, #4
 8004308:	d00c      	beq.n	8004324 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800430a:	4b85      	ldr	r3, [pc, #532]	; (8004520 <HAL_RCC_OscConfig+0x240>)
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004312:	2b08      	cmp	r3, #8
 8004314:	d112      	bne.n	800433c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004316:	4b82      	ldr	r3, [pc, #520]	; (8004520 <HAL_RCC_OscConfig+0x240>)
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800431e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004322:	d10b      	bne.n	800433c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004324:	4b7e      	ldr	r3, [pc, #504]	; (8004520 <HAL_RCC_OscConfig+0x240>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800432c:	2b00      	cmp	r3, #0
 800432e:	d05b      	beq.n	80043e8 <HAL_RCC_OscConfig+0x108>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d157      	bne.n	80043e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004338:	2301      	movs	r3, #1
 800433a:	e242      	b.n	80047c2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004344:	d106      	bne.n	8004354 <HAL_RCC_OscConfig+0x74>
 8004346:	4b76      	ldr	r3, [pc, #472]	; (8004520 <HAL_RCC_OscConfig+0x240>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a75      	ldr	r2, [pc, #468]	; (8004520 <HAL_RCC_OscConfig+0x240>)
 800434c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004350:	6013      	str	r3, [r2, #0]
 8004352:	e01d      	b.n	8004390 <HAL_RCC_OscConfig+0xb0>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800435c:	d10c      	bne.n	8004378 <HAL_RCC_OscConfig+0x98>
 800435e:	4b70      	ldr	r3, [pc, #448]	; (8004520 <HAL_RCC_OscConfig+0x240>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a6f      	ldr	r2, [pc, #444]	; (8004520 <HAL_RCC_OscConfig+0x240>)
 8004364:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004368:	6013      	str	r3, [r2, #0]
 800436a:	4b6d      	ldr	r3, [pc, #436]	; (8004520 <HAL_RCC_OscConfig+0x240>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a6c      	ldr	r2, [pc, #432]	; (8004520 <HAL_RCC_OscConfig+0x240>)
 8004370:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004374:	6013      	str	r3, [r2, #0]
 8004376:	e00b      	b.n	8004390 <HAL_RCC_OscConfig+0xb0>
 8004378:	4b69      	ldr	r3, [pc, #420]	; (8004520 <HAL_RCC_OscConfig+0x240>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a68      	ldr	r2, [pc, #416]	; (8004520 <HAL_RCC_OscConfig+0x240>)
 800437e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004382:	6013      	str	r3, [r2, #0]
 8004384:	4b66      	ldr	r3, [pc, #408]	; (8004520 <HAL_RCC_OscConfig+0x240>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a65      	ldr	r2, [pc, #404]	; (8004520 <HAL_RCC_OscConfig+0x240>)
 800438a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800438e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d013      	beq.n	80043c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004398:	f7fd fb1a 	bl	80019d0 <HAL_GetTick>
 800439c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800439e:	e008      	b.n	80043b2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80043a0:	f7fd fb16 	bl	80019d0 <HAL_GetTick>
 80043a4:	4602      	mov	r2, r0
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	1ad3      	subs	r3, r2, r3
 80043aa:	2b64      	cmp	r3, #100	; 0x64
 80043ac:	d901      	bls.n	80043b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80043ae:	2303      	movs	r3, #3
 80043b0:	e207      	b.n	80047c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043b2:	4b5b      	ldr	r3, [pc, #364]	; (8004520 <HAL_RCC_OscConfig+0x240>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d0f0      	beq.n	80043a0 <HAL_RCC_OscConfig+0xc0>
 80043be:	e014      	b.n	80043ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043c0:	f7fd fb06 	bl	80019d0 <HAL_GetTick>
 80043c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043c6:	e008      	b.n	80043da <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80043c8:	f7fd fb02 	bl	80019d0 <HAL_GetTick>
 80043cc:	4602      	mov	r2, r0
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	1ad3      	subs	r3, r2, r3
 80043d2:	2b64      	cmp	r3, #100	; 0x64
 80043d4:	d901      	bls.n	80043da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80043d6:	2303      	movs	r3, #3
 80043d8:	e1f3      	b.n	80047c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043da:	4b51      	ldr	r3, [pc, #324]	; (8004520 <HAL_RCC_OscConfig+0x240>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d1f0      	bne.n	80043c8 <HAL_RCC_OscConfig+0xe8>
 80043e6:	e000      	b.n	80043ea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f003 0302 	and.w	r3, r3, #2
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d063      	beq.n	80044be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80043f6:	4b4a      	ldr	r3, [pc, #296]	; (8004520 <HAL_RCC_OscConfig+0x240>)
 80043f8:	689b      	ldr	r3, [r3, #8]
 80043fa:	f003 030c 	and.w	r3, r3, #12
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d00b      	beq.n	800441a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004402:	4b47      	ldr	r3, [pc, #284]	; (8004520 <HAL_RCC_OscConfig+0x240>)
 8004404:	689b      	ldr	r3, [r3, #8]
 8004406:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800440a:	2b08      	cmp	r3, #8
 800440c:	d11c      	bne.n	8004448 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800440e:	4b44      	ldr	r3, [pc, #272]	; (8004520 <HAL_RCC_OscConfig+0x240>)
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004416:	2b00      	cmp	r3, #0
 8004418:	d116      	bne.n	8004448 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800441a:	4b41      	ldr	r3, [pc, #260]	; (8004520 <HAL_RCC_OscConfig+0x240>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f003 0302 	and.w	r3, r3, #2
 8004422:	2b00      	cmp	r3, #0
 8004424:	d005      	beq.n	8004432 <HAL_RCC_OscConfig+0x152>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	68db      	ldr	r3, [r3, #12]
 800442a:	2b01      	cmp	r3, #1
 800442c:	d001      	beq.n	8004432 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	e1c7      	b.n	80047c2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004432:	4b3b      	ldr	r3, [pc, #236]	; (8004520 <HAL_RCC_OscConfig+0x240>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	691b      	ldr	r3, [r3, #16]
 800443e:	00db      	lsls	r3, r3, #3
 8004440:	4937      	ldr	r1, [pc, #220]	; (8004520 <HAL_RCC_OscConfig+0x240>)
 8004442:	4313      	orrs	r3, r2
 8004444:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004446:	e03a      	b.n	80044be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	68db      	ldr	r3, [r3, #12]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d020      	beq.n	8004492 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004450:	4b34      	ldr	r3, [pc, #208]	; (8004524 <HAL_RCC_OscConfig+0x244>)
 8004452:	2201      	movs	r2, #1
 8004454:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004456:	f7fd fabb 	bl	80019d0 <HAL_GetTick>
 800445a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800445c:	e008      	b.n	8004470 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800445e:	f7fd fab7 	bl	80019d0 <HAL_GetTick>
 8004462:	4602      	mov	r2, r0
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	1ad3      	subs	r3, r2, r3
 8004468:	2b02      	cmp	r3, #2
 800446a:	d901      	bls.n	8004470 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800446c:	2303      	movs	r3, #3
 800446e:	e1a8      	b.n	80047c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004470:	4b2b      	ldr	r3, [pc, #172]	; (8004520 <HAL_RCC_OscConfig+0x240>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f003 0302 	and.w	r3, r3, #2
 8004478:	2b00      	cmp	r3, #0
 800447a:	d0f0      	beq.n	800445e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800447c:	4b28      	ldr	r3, [pc, #160]	; (8004520 <HAL_RCC_OscConfig+0x240>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	691b      	ldr	r3, [r3, #16]
 8004488:	00db      	lsls	r3, r3, #3
 800448a:	4925      	ldr	r1, [pc, #148]	; (8004520 <HAL_RCC_OscConfig+0x240>)
 800448c:	4313      	orrs	r3, r2
 800448e:	600b      	str	r3, [r1, #0]
 8004490:	e015      	b.n	80044be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004492:	4b24      	ldr	r3, [pc, #144]	; (8004524 <HAL_RCC_OscConfig+0x244>)
 8004494:	2200      	movs	r2, #0
 8004496:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004498:	f7fd fa9a 	bl	80019d0 <HAL_GetTick>
 800449c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800449e:	e008      	b.n	80044b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044a0:	f7fd fa96 	bl	80019d0 <HAL_GetTick>
 80044a4:	4602      	mov	r2, r0
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	1ad3      	subs	r3, r2, r3
 80044aa:	2b02      	cmp	r3, #2
 80044ac:	d901      	bls.n	80044b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80044ae:	2303      	movs	r3, #3
 80044b0:	e187      	b.n	80047c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044b2:	4b1b      	ldr	r3, [pc, #108]	; (8004520 <HAL_RCC_OscConfig+0x240>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f003 0302 	and.w	r3, r3, #2
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d1f0      	bne.n	80044a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f003 0308 	and.w	r3, r3, #8
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d036      	beq.n	8004538 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	695b      	ldr	r3, [r3, #20]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d016      	beq.n	8004500 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044d2:	4b15      	ldr	r3, [pc, #84]	; (8004528 <HAL_RCC_OscConfig+0x248>)
 80044d4:	2201      	movs	r2, #1
 80044d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044d8:	f7fd fa7a 	bl	80019d0 <HAL_GetTick>
 80044dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044de:	e008      	b.n	80044f2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044e0:	f7fd fa76 	bl	80019d0 <HAL_GetTick>
 80044e4:	4602      	mov	r2, r0
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	1ad3      	subs	r3, r2, r3
 80044ea:	2b02      	cmp	r3, #2
 80044ec:	d901      	bls.n	80044f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80044ee:	2303      	movs	r3, #3
 80044f0:	e167      	b.n	80047c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044f2:	4b0b      	ldr	r3, [pc, #44]	; (8004520 <HAL_RCC_OscConfig+0x240>)
 80044f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044f6:	f003 0302 	and.w	r3, r3, #2
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d0f0      	beq.n	80044e0 <HAL_RCC_OscConfig+0x200>
 80044fe:	e01b      	b.n	8004538 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004500:	4b09      	ldr	r3, [pc, #36]	; (8004528 <HAL_RCC_OscConfig+0x248>)
 8004502:	2200      	movs	r2, #0
 8004504:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004506:	f7fd fa63 	bl	80019d0 <HAL_GetTick>
 800450a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800450c:	e00e      	b.n	800452c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800450e:	f7fd fa5f 	bl	80019d0 <HAL_GetTick>
 8004512:	4602      	mov	r2, r0
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	1ad3      	subs	r3, r2, r3
 8004518:	2b02      	cmp	r3, #2
 800451a:	d907      	bls.n	800452c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800451c:	2303      	movs	r3, #3
 800451e:	e150      	b.n	80047c2 <HAL_RCC_OscConfig+0x4e2>
 8004520:	40023800 	.word	0x40023800
 8004524:	42470000 	.word	0x42470000
 8004528:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800452c:	4b88      	ldr	r3, [pc, #544]	; (8004750 <HAL_RCC_OscConfig+0x470>)
 800452e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004530:	f003 0302 	and.w	r3, r3, #2
 8004534:	2b00      	cmp	r3, #0
 8004536:	d1ea      	bne.n	800450e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f003 0304 	and.w	r3, r3, #4
 8004540:	2b00      	cmp	r3, #0
 8004542:	f000 8097 	beq.w	8004674 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004546:	2300      	movs	r3, #0
 8004548:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800454a:	4b81      	ldr	r3, [pc, #516]	; (8004750 <HAL_RCC_OscConfig+0x470>)
 800454c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800454e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004552:	2b00      	cmp	r3, #0
 8004554:	d10f      	bne.n	8004576 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004556:	2300      	movs	r3, #0
 8004558:	60bb      	str	r3, [r7, #8]
 800455a:	4b7d      	ldr	r3, [pc, #500]	; (8004750 <HAL_RCC_OscConfig+0x470>)
 800455c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800455e:	4a7c      	ldr	r2, [pc, #496]	; (8004750 <HAL_RCC_OscConfig+0x470>)
 8004560:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004564:	6413      	str	r3, [r2, #64]	; 0x40
 8004566:	4b7a      	ldr	r3, [pc, #488]	; (8004750 <HAL_RCC_OscConfig+0x470>)
 8004568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800456a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800456e:	60bb      	str	r3, [r7, #8]
 8004570:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004572:	2301      	movs	r3, #1
 8004574:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004576:	4b77      	ldr	r3, [pc, #476]	; (8004754 <HAL_RCC_OscConfig+0x474>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800457e:	2b00      	cmp	r3, #0
 8004580:	d118      	bne.n	80045b4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004582:	4b74      	ldr	r3, [pc, #464]	; (8004754 <HAL_RCC_OscConfig+0x474>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a73      	ldr	r2, [pc, #460]	; (8004754 <HAL_RCC_OscConfig+0x474>)
 8004588:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800458c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800458e:	f7fd fa1f 	bl	80019d0 <HAL_GetTick>
 8004592:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004594:	e008      	b.n	80045a8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004596:	f7fd fa1b 	bl	80019d0 <HAL_GetTick>
 800459a:	4602      	mov	r2, r0
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	1ad3      	subs	r3, r2, r3
 80045a0:	2b02      	cmp	r3, #2
 80045a2:	d901      	bls.n	80045a8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80045a4:	2303      	movs	r3, #3
 80045a6:	e10c      	b.n	80047c2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045a8:	4b6a      	ldr	r3, [pc, #424]	; (8004754 <HAL_RCC_OscConfig+0x474>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d0f0      	beq.n	8004596 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	2b01      	cmp	r3, #1
 80045ba:	d106      	bne.n	80045ca <HAL_RCC_OscConfig+0x2ea>
 80045bc:	4b64      	ldr	r3, [pc, #400]	; (8004750 <HAL_RCC_OscConfig+0x470>)
 80045be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045c0:	4a63      	ldr	r2, [pc, #396]	; (8004750 <HAL_RCC_OscConfig+0x470>)
 80045c2:	f043 0301 	orr.w	r3, r3, #1
 80045c6:	6713      	str	r3, [r2, #112]	; 0x70
 80045c8:	e01c      	b.n	8004604 <HAL_RCC_OscConfig+0x324>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	689b      	ldr	r3, [r3, #8]
 80045ce:	2b05      	cmp	r3, #5
 80045d0:	d10c      	bne.n	80045ec <HAL_RCC_OscConfig+0x30c>
 80045d2:	4b5f      	ldr	r3, [pc, #380]	; (8004750 <HAL_RCC_OscConfig+0x470>)
 80045d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045d6:	4a5e      	ldr	r2, [pc, #376]	; (8004750 <HAL_RCC_OscConfig+0x470>)
 80045d8:	f043 0304 	orr.w	r3, r3, #4
 80045dc:	6713      	str	r3, [r2, #112]	; 0x70
 80045de:	4b5c      	ldr	r3, [pc, #368]	; (8004750 <HAL_RCC_OscConfig+0x470>)
 80045e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045e2:	4a5b      	ldr	r2, [pc, #364]	; (8004750 <HAL_RCC_OscConfig+0x470>)
 80045e4:	f043 0301 	orr.w	r3, r3, #1
 80045e8:	6713      	str	r3, [r2, #112]	; 0x70
 80045ea:	e00b      	b.n	8004604 <HAL_RCC_OscConfig+0x324>
 80045ec:	4b58      	ldr	r3, [pc, #352]	; (8004750 <HAL_RCC_OscConfig+0x470>)
 80045ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045f0:	4a57      	ldr	r2, [pc, #348]	; (8004750 <HAL_RCC_OscConfig+0x470>)
 80045f2:	f023 0301 	bic.w	r3, r3, #1
 80045f6:	6713      	str	r3, [r2, #112]	; 0x70
 80045f8:	4b55      	ldr	r3, [pc, #340]	; (8004750 <HAL_RCC_OscConfig+0x470>)
 80045fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045fc:	4a54      	ldr	r2, [pc, #336]	; (8004750 <HAL_RCC_OscConfig+0x470>)
 80045fe:	f023 0304 	bic.w	r3, r3, #4
 8004602:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d015      	beq.n	8004638 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800460c:	f7fd f9e0 	bl	80019d0 <HAL_GetTick>
 8004610:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004612:	e00a      	b.n	800462a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004614:	f7fd f9dc 	bl	80019d0 <HAL_GetTick>
 8004618:	4602      	mov	r2, r0
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	1ad3      	subs	r3, r2, r3
 800461e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004622:	4293      	cmp	r3, r2
 8004624:	d901      	bls.n	800462a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004626:	2303      	movs	r3, #3
 8004628:	e0cb      	b.n	80047c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800462a:	4b49      	ldr	r3, [pc, #292]	; (8004750 <HAL_RCC_OscConfig+0x470>)
 800462c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800462e:	f003 0302 	and.w	r3, r3, #2
 8004632:	2b00      	cmp	r3, #0
 8004634:	d0ee      	beq.n	8004614 <HAL_RCC_OscConfig+0x334>
 8004636:	e014      	b.n	8004662 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004638:	f7fd f9ca 	bl	80019d0 <HAL_GetTick>
 800463c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800463e:	e00a      	b.n	8004656 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004640:	f7fd f9c6 	bl	80019d0 <HAL_GetTick>
 8004644:	4602      	mov	r2, r0
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	1ad3      	subs	r3, r2, r3
 800464a:	f241 3288 	movw	r2, #5000	; 0x1388
 800464e:	4293      	cmp	r3, r2
 8004650:	d901      	bls.n	8004656 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004652:	2303      	movs	r3, #3
 8004654:	e0b5      	b.n	80047c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004656:	4b3e      	ldr	r3, [pc, #248]	; (8004750 <HAL_RCC_OscConfig+0x470>)
 8004658:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800465a:	f003 0302 	and.w	r3, r3, #2
 800465e:	2b00      	cmp	r3, #0
 8004660:	d1ee      	bne.n	8004640 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004662:	7dfb      	ldrb	r3, [r7, #23]
 8004664:	2b01      	cmp	r3, #1
 8004666:	d105      	bne.n	8004674 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004668:	4b39      	ldr	r3, [pc, #228]	; (8004750 <HAL_RCC_OscConfig+0x470>)
 800466a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800466c:	4a38      	ldr	r2, [pc, #224]	; (8004750 <HAL_RCC_OscConfig+0x470>)
 800466e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004672:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	699b      	ldr	r3, [r3, #24]
 8004678:	2b00      	cmp	r3, #0
 800467a:	f000 80a1 	beq.w	80047c0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800467e:	4b34      	ldr	r3, [pc, #208]	; (8004750 <HAL_RCC_OscConfig+0x470>)
 8004680:	689b      	ldr	r3, [r3, #8]
 8004682:	f003 030c 	and.w	r3, r3, #12
 8004686:	2b08      	cmp	r3, #8
 8004688:	d05c      	beq.n	8004744 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	699b      	ldr	r3, [r3, #24]
 800468e:	2b02      	cmp	r3, #2
 8004690:	d141      	bne.n	8004716 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004692:	4b31      	ldr	r3, [pc, #196]	; (8004758 <HAL_RCC_OscConfig+0x478>)
 8004694:	2200      	movs	r2, #0
 8004696:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004698:	f7fd f99a 	bl	80019d0 <HAL_GetTick>
 800469c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800469e:	e008      	b.n	80046b2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046a0:	f7fd f996 	bl	80019d0 <HAL_GetTick>
 80046a4:	4602      	mov	r2, r0
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	1ad3      	subs	r3, r2, r3
 80046aa:	2b02      	cmp	r3, #2
 80046ac:	d901      	bls.n	80046b2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80046ae:	2303      	movs	r3, #3
 80046b0:	e087      	b.n	80047c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046b2:	4b27      	ldr	r3, [pc, #156]	; (8004750 <HAL_RCC_OscConfig+0x470>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d1f0      	bne.n	80046a0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	69da      	ldr	r2, [r3, #28]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6a1b      	ldr	r3, [r3, #32]
 80046c6:	431a      	orrs	r2, r3
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046cc:	019b      	lsls	r3, r3, #6
 80046ce:	431a      	orrs	r2, r3
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046d4:	085b      	lsrs	r3, r3, #1
 80046d6:	3b01      	subs	r3, #1
 80046d8:	041b      	lsls	r3, r3, #16
 80046da:	431a      	orrs	r2, r3
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046e0:	061b      	lsls	r3, r3, #24
 80046e2:	491b      	ldr	r1, [pc, #108]	; (8004750 <HAL_RCC_OscConfig+0x470>)
 80046e4:	4313      	orrs	r3, r2
 80046e6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046e8:	4b1b      	ldr	r3, [pc, #108]	; (8004758 <HAL_RCC_OscConfig+0x478>)
 80046ea:	2201      	movs	r2, #1
 80046ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046ee:	f7fd f96f 	bl	80019d0 <HAL_GetTick>
 80046f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046f4:	e008      	b.n	8004708 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046f6:	f7fd f96b 	bl	80019d0 <HAL_GetTick>
 80046fa:	4602      	mov	r2, r0
 80046fc:	693b      	ldr	r3, [r7, #16]
 80046fe:	1ad3      	subs	r3, r2, r3
 8004700:	2b02      	cmp	r3, #2
 8004702:	d901      	bls.n	8004708 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004704:	2303      	movs	r3, #3
 8004706:	e05c      	b.n	80047c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004708:	4b11      	ldr	r3, [pc, #68]	; (8004750 <HAL_RCC_OscConfig+0x470>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004710:	2b00      	cmp	r3, #0
 8004712:	d0f0      	beq.n	80046f6 <HAL_RCC_OscConfig+0x416>
 8004714:	e054      	b.n	80047c0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004716:	4b10      	ldr	r3, [pc, #64]	; (8004758 <HAL_RCC_OscConfig+0x478>)
 8004718:	2200      	movs	r2, #0
 800471a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800471c:	f7fd f958 	bl	80019d0 <HAL_GetTick>
 8004720:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004722:	e008      	b.n	8004736 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004724:	f7fd f954 	bl	80019d0 <HAL_GetTick>
 8004728:	4602      	mov	r2, r0
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	1ad3      	subs	r3, r2, r3
 800472e:	2b02      	cmp	r3, #2
 8004730:	d901      	bls.n	8004736 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004732:	2303      	movs	r3, #3
 8004734:	e045      	b.n	80047c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004736:	4b06      	ldr	r3, [pc, #24]	; (8004750 <HAL_RCC_OscConfig+0x470>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800473e:	2b00      	cmp	r3, #0
 8004740:	d1f0      	bne.n	8004724 <HAL_RCC_OscConfig+0x444>
 8004742:	e03d      	b.n	80047c0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	699b      	ldr	r3, [r3, #24]
 8004748:	2b01      	cmp	r3, #1
 800474a:	d107      	bne.n	800475c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800474c:	2301      	movs	r3, #1
 800474e:	e038      	b.n	80047c2 <HAL_RCC_OscConfig+0x4e2>
 8004750:	40023800 	.word	0x40023800
 8004754:	40007000 	.word	0x40007000
 8004758:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800475c:	4b1b      	ldr	r3, [pc, #108]	; (80047cc <HAL_RCC_OscConfig+0x4ec>)
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	699b      	ldr	r3, [r3, #24]
 8004766:	2b01      	cmp	r3, #1
 8004768:	d028      	beq.n	80047bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004774:	429a      	cmp	r2, r3
 8004776:	d121      	bne.n	80047bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004782:	429a      	cmp	r2, r3
 8004784:	d11a      	bne.n	80047bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004786:	68fa      	ldr	r2, [r7, #12]
 8004788:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800478c:	4013      	ands	r3, r2
 800478e:	687a      	ldr	r2, [r7, #4]
 8004790:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004792:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004794:	4293      	cmp	r3, r2
 8004796:	d111      	bne.n	80047bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047a2:	085b      	lsrs	r3, r3, #1
 80047a4:	3b01      	subs	r3, #1
 80047a6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80047a8:	429a      	cmp	r2, r3
 80047aa:	d107      	bne.n	80047bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047b6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80047b8:	429a      	cmp	r2, r3
 80047ba:	d001      	beq.n	80047c0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80047bc:	2301      	movs	r3, #1
 80047be:	e000      	b.n	80047c2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80047c0:	2300      	movs	r3, #0
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	3718      	adds	r7, #24
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}
 80047ca:	bf00      	nop
 80047cc:	40023800 	.word	0x40023800

080047d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b084      	sub	sp, #16
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
 80047d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d101      	bne.n	80047e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80047e0:	2301      	movs	r3, #1
 80047e2:	e0cc      	b.n	800497e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80047e4:	4b68      	ldr	r3, [pc, #416]	; (8004988 <HAL_RCC_ClockConfig+0x1b8>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f003 0307 	and.w	r3, r3, #7
 80047ec:	683a      	ldr	r2, [r7, #0]
 80047ee:	429a      	cmp	r2, r3
 80047f0:	d90c      	bls.n	800480c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047f2:	4b65      	ldr	r3, [pc, #404]	; (8004988 <HAL_RCC_ClockConfig+0x1b8>)
 80047f4:	683a      	ldr	r2, [r7, #0]
 80047f6:	b2d2      	uxtb	r2, r2
 80047f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047fa:	4b63      	ldr	r3, [pc, #396]	; (8004988 <HAL_RCC_ClockConfig+0x1b8>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f003 0307 	and.w	r3, r3, #7
 8004802:	683a      	ldr	r2, [r7, #0]
 8004804:	429a      	cmp	r2, r3
 8004806:	d001      	beq.n	800480c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004808:	2301      	movs	r3, #1
 800480a:	e0b8      	b.n	800497e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f003 0302 	and.w	r3, r3, #2
 8004814:	2b00      	cmp	r3, #0
 8004816:	d020      	beq.n	800485a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f003 0304 	and.w	r3, r3, #4
 8004820:	2b00      	cmp	r3, #0
 8004822:	d005      	beq.n	8004830 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004824:	4b59      	ldr	r3, [pc, #356]	; (800498c <HAL_RCC_ClockConfig+0x1bc>)
 8004826:	689b      	ldr	r3, [r3, #8]
 8004828:	4a58      	ldr	r2, [pc, #352]	; (800498c <HAL_RCC_ClockConfig+0x1bc>)
 800482a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800482e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f003 0308 	and.w	r3, r3, #8
 8004838:	2b00      	cmp	r3, #0
 800483a:	d005      	beq.n	8004848 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800483c:	4b53      	ldr	r3, [pc, #332]	; (800498c <HAL_RCC_ClockConfig+0x1bc>)
 800483e:	689b      	ldr	r3, [r3, #8]
 8004840:	4a52      	ldr	r2, [pc, #328]	; (800498c <HAL_RCC_ClockConfig+0x1bc>)
 8004842:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004846:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004848:	4b50      	ldr	r3, [pc, #320]	; (800498c <HAL_RCC_ClockConfig+0x1bc>)
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	494d      	ldr	r1, [pc, #308]	; (800498c <HAL_RCC_ClockConfig+0x1bc>)
 8004856:	4313      	orrs	r3, r2
 8004858:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f003 0301 	and.w	r3, r3, #1
 8004862:	2b00      	cmp	r3, #0
 8004864:	d044      	beq.n	80048f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	2b01      	cmp	r3, #1
 800486c:	d107      	bne.n	800487e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800486e:	4b47      	ldr	r3, [pc, #284]	; (800498c <HAL_RCC_ClockConfig+0x1bc>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004876:	2b00      	cmp	r3, #0
 8004878:	d119      	bne.n	80048ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800487a:	2301      	movs	r3, #1
 800487c:	e07f      	b.n	800497e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	2b02      	cmp	r3, #2
 8004884:	d003      	beq.n	800488e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800488a:	2b03      	cmp	r3, #3
 800488c:	d107      	bne.n	800489e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800488e:	4b3f      	ldr	r3, [pc, #252]	; (800498c <HAL_RCC_ClockConfig+0x1bc>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004896:	2b00      	cmp	r3, #0
 8004898:	d109      	bne.n	80048ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800489a:	2301      	movs	r3, #1
 800489c:	e06f      	b.n	800497e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800489e:	4b3b      	ldr	r3, [pc, #236]	; (800498c <HAL_RCC_ClockConfig+0x1bc>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f003 0302 	and.w	r3, r3, #2
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d101      	bne.n	80048ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048aa:	2301      	movs	r3, #1
 80048ac:	e067      	b.n	800497e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80048ae:	4b37      	ldr	r3, [pc, #220]	; (800498c <HAL_RCC_ClockConfig+0x1bc>)
 80048b0:	689b      	ldr	r3, [r3, #8]
 80048b2:	f023 0203 	bic.w	r2, r3, #3
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	4934      	ldr	r1, [pc, #208]	; (800498c <HAL_RCC_ClockConfig+0x1bc>)
 80048bc:	4313      	orrs	r3, r2
 80048be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80048c0:	f7fd f886 	bl	80019d0 <HAL_GetTick>
 80048c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048c6:	e00a      	b.n	80048de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048c8:	f7fd f882 	bl	80019d0 <HAL_GetTick>
 80048cc:	4602      	mov	r2, r0
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	1ad3      	subs	r3, r2, r3
 80048d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d901      	bls.n	80048de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80048da:	2303      	movs	r3, #3
 80048dc:	e04f      	b.n	800497e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048de:	4b2b      	ldr	r3, [pc, #172]	; (800498c <HAL_RCC_ClockConfig+0x1bc>)
 80048e0:	689b      	ldr	r3, [r3, #8]
 80048e2:	f003 020c 	and.w	r2, r3, #12
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	009b      	lsls	r3, r3, #2
 80048ec:	429a      	cmp	r2, r3
 80048ee:	d1eb      	bne.n	80048c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80048f0:	4b25      	ldr	r3, [pc, #148]	; (8004988 <HAL_RCC_ClockConfig+0x1b8>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f003 0307 	and.w	r3, r3, #7
 80048f8:	683a      	ldr	r2, [r7, #0]
 80048fa:	429a      	cmp	r2, r3
 80048fc:	d20c      	bcs.n	8004918 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048fe:	4b22      	ldr	r3, [pc, #136]	; (8004988 <HAL_RCC_ClockConfig+0x1b8>)
 8004900:	683a      	ldr	r2, [r7, #0]
 8004902:	b2d2      	uxtb	r2, r2
 8004904:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004906:	4b20      	ldr	r3, [pc, #128]	; (8004988 <HAL_RCC_ClockConfig+0x1b8>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f003 0307 	and.w	r3, r3, #7
 800490e:	683a      	ldr	r2, [r7, #0]
 8004910:	429a      	cmp	r2, r3
 8004912:	d001      	beq.n	8004918 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004914:	2301      	movs	r3, #1
 8004916:	e032      	b.n	800497e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f003 0304 	and.w	r3, r3, #4
 8004920:	2b00      	cmp	r3, #0
 8004922:	d008      	beq.n	8004936 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004924:	4b19      	ldr	r3, [pc, #100]	; (800498c <HAL_RCC_ClockConfig+0x1bc>)
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	68db      	ldr	r3, [r3, #12]
 8004930:	4916      	ldr	r1, [pc, #88]	; (800498c <HAL_RCC_ClockConfig+0x1bc>)
 8004932:	4313      	orrs	r3, r2
 8004934:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f003 0308 	and.w	r3, r3, #8
 800493e:	2b00      	cmp	r3, #0
 8004940:	d009      	beq.n	8004956 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004942:	4b12      	ldr	r3, [pc, #72]	; (800498c <HAL_RCC_ClockConfig+0x1bc>)
 8004944:	689b      	ldr	r3, [r3, #8]
 8004946:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	691b      	ldr	r3, [r3, #16]
 800494e:	00db      	lsls	r3, r3, #3
 8004950:	490e      	ldr	r1, [pc, #56]	; (800498c <HAL_RCC_ClockConfig+0x1bc>)
 8004952:	4313      	orrs	r3, r2
 8004954:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004956:	f000 f821 	bl	800499c <HAL_RCC_GetSysClockFreq>
 800495a:	4602      	mov	r2, r0
 800495c:	4b0b      	ldr	r3, [pc, #44]	; (800498c <HAL_RCC_ClockConfig+0x1bc>)
 800495e:	689b      	ldr	r3, [r3, #8]
 8004960:	091b      	lsrs	r3, r3, #4
 8004962:	f003 030f 	and.w	r3, r3, #15
 8004966:	490a      	ldr	r1, [pc, #40]	; (8004990 <HAL_RCC_ClockConfig+0x1c0>)
 8004968:	5ccb      	ldrb	r3, [r1, r3]
 800496a:	fa22 f303 	lsr.w	r3, r2, r3
 800496e:	4a09      	ldr	r2, [pc, #36]	; (8004994 <HAL_RCC_ClockConfig+0x1c4>)
 8004970:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004972:	4b09      	ldr	r3, [pc, #36]	; (8004998 <HAL_RCC_ClockConfig+0x1c8>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4618      	mov	r0, r3
 8004978:	f7fc ffe6 	bl	8001948 <HAL_InitTick>

  return HAL_OK;
 800497c:	2300      	movs	r3, #0
}
 800497e:	4618      	mov	r0, r3
 8004980:	3710      	adds	r7, #16
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}
 8004986:	bf00      	nop
 8004988:	40023c00 	.word	0x40023c00
 800498c:	40023800 	.word	0x40023800
 8004990:	0800a1d0 	.word	0x0800a1d0
 8004994:	2000006c 	.word	0x2000006c
 8004998:	20000070 	.word	0x20000070

0800499c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800499c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80049a0:	b094      	sub	sp, #80	; 0x50
 80049a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80049a4:	2300      	movs	r3, #0
 80049a6:	647b      	str	r3, [r7, #68]	; 0x44
 80049a8:	2300      	movs	r3, #0
 80049aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80049ac:	2300      	movs	r3, #0
 80049ae:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80049b0:	2300      	movs	r3, #0
 80049b2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80049b4:	4b79      	ldr	r3, [pc, #484]	; (8004b9c <HAL_RCC_GetSysClockFreq+0x200>)
 80049b6:	689b      	ldr	r3, [r3, #8]
 80049b8:	f003 030c 	and.w	r3, r3, #12
 80049bc:	2b08      	cmp	r3, #8
 80049be:	d00d      	beq.n	80049dc <HAL_RCC_GetSysClockFreq+0x40>
 80049c0:	2b08      	cmp	r3, #8
 80049c2:	f200 80e1 	bhi.w	8004b88 <HAL_RCC_GetSysClockFreq+0x1ec>
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d002      	beq.n	80049d0 <HAL_RCC_GetSysClockFreq+0x34>
 80049ca:	2b04      	cmp	r3, #4
 80049cc:	d003      	beq.n	80049d6 <HAL_RCC_GetSysClockFreq+0x3a>
 80049ce:	e0db      	b.n	8004b88 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80049d0:	4b73      	ldr	r3, [pc, #460]	; (8004ba0 <HAL_RCC_GetSysClockFreq+0x204>)
 80049d2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80049d4:	e0db      	b.n	8004b8e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80049d6:	4b73      	ldr	r3, [pc, #460]	; (8004ba4 <HAL_RCC_GetSysClockFreq+0x208>)
 80049d8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80049da:	e0d8      	b.n	8004b8e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80049dc:	4b6f      	ldr	r3, [pc, #444]	; (8004b9c <HAL_RCC_GetSysClockFreq+0x200>)
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80049e4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80049e6:	4b6d      	ldr	r3, [pc, #436]	; (8004b9c <HAL_RCC_GetSysClockFreq+0x200>)
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d063      	beq.n	8004aba <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049f2:	4b6a      	ldr	r3, [pc, #424]	; (8004b9c <HAL_RCC_GetSysClockFreq+0x200>)
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	099b      	lsrs	r3, r3, #6
 80049f8:	2200      	movs	r2, #0
 80049fa:	63bb      	str	r3, [r7, #56]	; 0x38
 80049fc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80049fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a04:	633b      	str	r3, [r7, #48]	; 0x30
 8004a06:	2300      	movs	r3, #0
 8004a08:	637b      	str	r3, [r7, #52]	; 0x34
 8004a0a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004a0e:	4622      	mov	r2, r4
 8004a10:	462b      	mov	r3, r5
 8004a12:	f04f 0000 	mov.w	r0, #0
 8004a16:	f04f 0100 	mov.w	r1, #0
 8004a1a:	0159      	lsls	r1, r3, #5
 8004a1c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a20:	0150      	lsls	r0, r2, #5
 8004a22:	4602      	mov	r2, r0
 8004a24:	460b      	mov	r3, r1
 8004a26:	4621      	mov	r1, r4
 8004a28:	1a51      	subs	r1, r2, r1
 8004a2a:	6139      	str	r1, [r7, #16]
 8004a2c:	4629      	mov	r1, r5
 8004a2e:	eb63 0301 	sbc.w	r3, r3, r1
 8004a32:	617b      	str	r3, [r7, #20]
 8004a34:	f04f 0200 	mov.w	r2, #0
 8004a38:	f04f 0300 	mov.w	r3, #0
 8004a3c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004a40:	4659      	mov	r1, fp
 8004a42:	018b      	lsls	r3, r1, #6
 8004a44:	4651      	mov	r1, sl
 8004a46:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004a4a:	4651      	mov	r1, sl
 8004a4c:	018a      	lsls	r2, r1, #6
 8004a4e:	4651      	mov	r1, sl
 8004a50:	ebb2 0801 	subs.w	r8, r2, r1
 8004a54:	4659      	mov	r1, fp
 8004a56:	eb63 0901 	sbc.w	r9, r3, r1
 8004a5a:	f04f 0200 	mov.w	r2, #0
 8004a5e:	f04f 0300 	mov.w	r3, #0
 8004a62:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a66:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a6a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004a6e:	4690      	mov	r8, r2
 8004a70:	4699      	mov	r9, r3
 8004a72:	4623      	mov	r3, r4
 8004a74:	eb18 0303 	adds.w	r3, r8, r3
 8004a78:	60bb      	str	r3, [r7, #8]
 8004a7a:	462b      	mov	r3, r5
 8004a7c:	eb49 0303 	adc.w	r3, r9, r3
 8004a80:	60fb      	str	r3, [r7, #12]
 8004a82:	f04f 0200 	mov.w	r2, #0
 8004a86:	f04f 0300 	mov.w	r3, #0
 8004a8a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004a8e:	4629      	mov	r1, r5
 8004a90:	024b      	lsls	r3, r1, #9
 8004a92:	4621      	mov	r1, r4
 8004a94:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004a98:	4621      	mov	r1, r4
 8004a9a:	024a      	lsls	r2, r1, #9
 8004a9c:	4610      	mov	r0, r2
 8004a9e:	4619      	mov	r1, r3
 8004aa0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	62bb      	str	r3, [r7, #40]	; 0x28
 8004aa6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004aa8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004aac:	f7fb fbe8 	bl	8000280 <__aeabi_uldivmod>
 8004ab0:	4602      	mov	r2, r0
 8004ab2:	460b      	mov	r3, r1
 8004ab4:	4613      	mov	r3, r2
 8004ab6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ab8:	e058      	b.n	8004b6c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004aba:	4b38      	ldr	r3, [pc, #224]	; (8004b9c <HAL_RCC_GetSysClockFreq+0x200>)
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	099b      	lsrs	r3, r3, #6
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	4611      	mov	r1, r2
 8004ac6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004aca:	623b      	str	r3, [r7, #32]
 8004acc:	2300      	movs	r3, #0
 8004ace:	627b      	str	r3, [r7, #36]	; 0x24
 8004ad0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004ad4:	4642      	mov	r2, r8
 8004ad6:	464b      	mov	r3, r9
 8004ad8:	f04f 0000 	mov.w	r0, #0
 8004adc:	f04f 0100 	mov.w	r1, #0
 8004ae0:	0159      	lsls	r1, r3, #5
 8004ae2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ae6:	0150      	lsls	r0, r2, #5
 8004ae8:	4602      	mov	r2, r0
 8004aea:	460b      	mov	r3, r1
 8004aec:	4641      	mov	r1, r8
 8004aee:	ebb2 0a01 	subs.w	sl, r2, r1
 8004af2:	4649      	mov	r1, r9
 8004af4:	eb63 0b01 	sbc.w	fp, r3, r1
 8004af8:	f04f 0200 	mov.w	r2, #0
 8004afc:	f04f 0300 	mov.w	r3, #0
 8004b00:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004b04:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004b08:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004b0c:	ebb2 040a 	subs.w	r4, r2, sl
 8004b10:	eb63 050b 	sbc.w	r5, r3, fp
 8004b14:	f04f 0200 	mov.w	r2, #0
 8004b18:	f04f 0300 	mov.w	r3, #0
 8004b1c:	00eb      	lsls	r3, r5, #3
 8004b1e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b22:	00e2      	lsls	r2, r4, #3
 8004b24:	4614      	mov	r4, r2
 8004b26:	461d      	mov	r5, r3
 8004b28:	4643      	mov	r3, r8
 8004b2a:	18e3      	adds	r3, r4, r3
 8004b2c:	603b      	str	r3, [r7, #0]
 8004b2e:	464b      	mov	r3, r9
 8004b30:	eb45 0303 	adc.w	r3, r5, r3
 8004b34:	607b      	str	r3, [r7, #4]
 8004b36:	f04f 0200 	mov.w	r2, #0
 8004b3a:	f04f 0300 	mov.w	r3, #0
 8004b3e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004b42:	4629      	mov	r1, r5
 8004b44:	028b      	lsls	r3, r1, #10
 8004b46:	4621      	mov	r1, r4
 8004b48:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004b4c:	4621      	mov	r1, r4
 8004b4e:	028a      	lsls	r2, r1, #10
 8004b50:	4610      	mov	r0, r2
 8004b52:	4619      	mov	r1, r3
 8004b54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b56:	2200      	movs	r2, #0
 8004b58:	61bb      	str	r3, [r7, #24]
 8004b5a:	61fa      	str	r2, [r7, #28]
 8004b5c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b60:	f7fb fb8e 	bl	8000280 <__aeabi_uldivmod>
 8004b64:	4602      	mov	r2, r0
 8004b66:	460b      	mov	r3, r1
 8004b68:	4613      	mov	r3, r2
 8004b6a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004b6c:	4b0b      	ldr	r3, [pc, #44]	; (8004b9c <HAL_RCC_GetSysClockFreq+0x200>)
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	0c1b      	lsrs	r3, r3, #16
 8004b72:	f003 0303 	and.w	r3, r3, #3
 8004b76:	3301      	adds	r3, #1
 8004b78:	005b      	lsls	r3, r3, #1
 8004b7a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004b7c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004b7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b80:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b84:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004b86:	e002      	b.n	8004b8e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004b88:	4b05      	ldr	r3, [pc, #20]	; (8004ba0 <HAL_RCC_GetSysClockFreq+0x204>)
 8004b8a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004b8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004b90:	4618      	mov	r0, r3
 8004b92:	3750      	adds	r7, #80	; 0x50
 8004b94:	46bd      	mov	sp, r7
 8004b96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b9a:	bf00      	nop
 8004b9c:	40023800 	.word	0x40023800
 8004ba0:	00f42400 	.word	0x00f42400
 8004ba4:	007a1200 	.word	0x007a1200

08004ba8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004bac:	4b03      	ldr	r3, [pc, #12]	; (8004bbc <HAL_RCC_GetHCLKFreq+0x14>)
 8004bae:	681b      	ldr	r3, [r3, #0]
}
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb8:	4770      	bx	lr
 8004bba:	bf00      	nop
 8004bbc:	2000006c 	.word	0x2000006c

08004bc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004bc4:	f7ff fff0 	bl	8004ba8 <HAL_RCC_GetHCLKFreq>
 8004bc8:	4602      	mov	r2, r0
 8004bca:	4b05      	ldr	r3, [pc, #20]	; (8004be0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004bcc:	689b      	ldr	r3, [r3, #8]
 8004bce:	0a9b      	lsrs	r3, r3, #10
 8004bd0:	f003 0307 	and.w	r3, r3, #7
 8004bd4:	4903      	ldr	r1, [pc, #12]	; (8004be4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004bd6:	5ccb      	ldrb	r3, [r1, r3]
 8004bd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	bd80      	pop	{r7, pc}
 8004be0:	40023800 	.word	0x40023800
 8004be4:	0800a1e0 	.word	0x0800a1e0

08004be8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b086      	sub	sp, #24
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f003 0301 	and.w	r3, r3, #1
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d105      	bne.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d035      	beq.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004c10:	4b62      	ldr	r3, [pc, #392]	; (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004c12:	2200      	movs	r2, #0
 8004c14:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004c16:	f7fc fedb 	bl	80019d0 <HAL_GetTick>
 8004c1a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004c1c:	e008      	b.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004c1e:	f7fc fed7 	bl	80019d0 <HAL_GetTick>
 8004c22:	4602      	mov	r2, r0
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	1ad3      	subs	r3, r2, r3
 8004c28:	2b02      	cmp	r3, #2
 8004c2a:	d901      	bls.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c2c:	2303      	movs	r3, #3
 8004c2e:	e0b0      	b.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004c30:	4b5b      	ldr	r3, [pc, #364]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d1f0      	bne.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	019a      	lsls	r2, r3, #6
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	689b      	ldr	r3, [r3, #8]
 8004c46:	071b      	lsls	r3, r3, #28
 8004c48:	4955      	ldr	r1, [pc, #340]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004c50:	4b52      	ldr	r3, [pc, #328]	; (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004c52:	2201      	movs	r2, #1
 8004c54:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004c56:	f7fc febb 	bl	80019d0 <HAL_GetTick>
 8004c5a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004c5c:	e008      	b.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004c5e:	f7fc feb7 	bl	80019d0 <HAL_GetTick>
 8004c62:	4602      	mov	r2, r0
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	1ad3      	subs	r3, r2, r3
 8004c68:	2b02      	cmp	r3, #2
 8004c6a:	d901      	bls.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c6c:	2303      	movs	r3, #3
 8004c6e:	e090      	b.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004c70:	4b4b      	ldr	r3, [pc, #300]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d0f0      	beq.n	8004c5e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f003 0302 	and.w	r3, r3, #2
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	f000 8083 	beq.w	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	60fb      	str	r3, [r7, #12]
 8004c8e:	4b44      	ldr	r3, [pc, #272]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c92:	4a43      	ldr	r2, [pc, #268]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c98:	6413      	str	r3, [r2, #64]	; 0x40
 8004c9a:	4b41      	ldr	r3, [pc, #260]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ca2:	60fb      	str	r3, [r7, #12]
 8004ca4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004ca6:	4b3f      	ldr	r3, [pc, #252]	; (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a3e      	ldr	r2, [pc, #248]	; (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004cac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cb0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004cb2:	f7fc fe8d 	bl	80019d0 <HAL_GetTick>
 8004cb6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004cb8:	e008      	b.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004cba:	f7fc fe89 	bl	80019d0 <HAL_GetTick>
 8004cbe:	4602      	mov	r2, r0
 8004cc0:	697b      	ldr	r3, [r7, #20]
 8004cc2:	1ad3      	subs	r3, r2, r3
 8004cc4:	2b02      	cmp	r3, #2
 8004cc6:	d901      	bls.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004cc8:	2303      	movs	r3, #3
 8004cca:	e062      	b.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004ccc:	4b35      	ldr	r3, [pc, #212]	; (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d0f0      	beq.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004cd8:	4b31      	ldr	r3, [pc, #196]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cdc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ce0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d02f      	beq.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	68db      	ldr	r3, [r3, #12]
 8004cec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cf0:	693a      	ldr	r2, [r7, #16]
 8004cf2:	429a      	cmp	r2, r3
 8004cf4:	d028      	beq.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004cf6:	4b2a      	ldr	r3, [pc, #168]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cfa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cfe:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004d00:	4b29      	ldr	r3, [pc, #164]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004d02:	2201      	movs	r2, #1
 8004d04:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004d06:	4b28      	ldr	r3, [pc, #160]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004d08:	2200      	movs	r2, #0
 8004d0a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004d0c:	4a24      	ldr	r2, [pc, #144]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004d12:	4b23      	ldr	r3, [pc, #140]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d16:	f003 0301 	and.w	r3, r3, #1
 8004d1a:	2b01      	cmp	r3, #1
 8004d1c:	d114      	bne.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004d1e:	f7fc fe57 	bl	80019d0 <HAL_GetTick>
 8004d22:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d24:	e00a      	b.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d26:	f7fc fe53 	bl	80019d0 <HAL_GetTick>
 8004d2a:	4602      	mov	r2, r0
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	1ad3      	subs	r3, r2, r3
 8004d30:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d901      	bls.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004d38:	2303      	movs	r3, #3
 8004d3a:	e02a      	b.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d3c:	4b18      	ldr	r3, [pc, #96]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d40:	f003 0302 	and.w	r3, r3, #2
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d0ee      	beq.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	68db      	ldr	r3, [r3, #12]
 8004d4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d50:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d54:	d10d      	bne.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004d56:	4b12      	ldr	r3, [pc, #72]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d58:	689b      	ldr	r3, [r3, #8]
 8004d5a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	68db      	ldr	r3, [r3, #12]
 8004d62:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004d66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d6a:	490d      	ldr	r1, [pc, #52]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	608b      	str	r3, [r1, #8]
 8004d70:	e005      	b.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004d72:	4b0b      	ldr	r3, [pc, #44]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	4a0a      	ldr	r2, [pc, #40]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d78:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004d7c:	6093      	str	r3, [r2, #8]
 8004d7e:	4b08      	ldr	r3, [pc, #32]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d80:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	68db      	ldr	r3, [r3, #12]
 8004d86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d8a:	4905      	ldr	r1, [pc, #20]	; (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004d90:	2300      	movs	r3, #0
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	3718      	adds	r7, #24
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd80      	pop	{r7, pc}
 8004d9a:	bf00      	nop
 8004d9c:	42470068 	.word	0x42470068
 8004da0:	40023800 	.word	0x40023800
 8004da4:	40007000 	.word	0x40007000
 8004da8:	42470e40 	.word	0x42470e40

08004dac <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b087      	sub	sp, #28
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004db4:	2300      	movs	r3, #0
 8004db6:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004db8:	2300      	movs	r3, #0
 8004dba:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2b01      	cmp	r3, #1
 8004dc8:	d13e      	bne.n	8004e48 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004dca:	4b23      	ldr	r3, [pc, #140]	; (8004e58 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004dcc:	689b      	ldr	r3, [r3, #8]
 8004dce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004dd2:	60fb      	str	r3, [r7, #12]
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d005      	beq.n	8004de6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	2b01      	cmp	r3, #1
 8004dde:	d12f      	bne.n	8004e40 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004de0:	4b1e      	ldr	r3, [pc, #120]	; (8004e5c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004de2:	617b      	str	r3, [r7, #20]
          break;
 8004de4:	e02f      	b.n	8004e46 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004de6:	4b1c      	ldr	r3, [pc, #112]	; (8004e58 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004dee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004df2:	d108      	bne.n	8004e06 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004df4:	4b18      	ldr	r3, [pc, #96]	; (8004e58 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004dfc:	4a18      	ldr	r2, [pc, #96]	; (8004e60 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004dfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e02:	613b      	str	r3, [r7, #16]
 8004e04:	e007      	b.n	8004e16 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004e06:	4b14      	ldr	r3, [pc, #80]	; (8004e58 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e0e:	4a15      	ldr	r2, [pc, #84]	; (8004e64 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004e10:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e14:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004e16:	4b10      	ldr	r3, [pc, #64]	; (8004e58 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004e18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e1c:	099b      	lsrs	r3, r3, #6
 8004e1e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004e22:	693b      	ldr	r3, [r7, #16]
 8004e24:	fb02 f303 	mul.w	r3, r2, r3
 8004e28:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004e2a:	4b0b      	ldr	r3, [pc, #44]	; (8004e58 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004e2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e30:	0f1b      	lsrs	r3, r3, #28
 8004e32:	f003 0307 	and.w	r3, r3, #7
 8004e36:	68ba      	ldr	r2, [r7, #8]
 8004e38:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e3c:	617b      	str	r3, [r7, #20]
          break;
 8004e3e:	e002      	b.n	8004e46 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004e40:	2300      	movs	r3, #0
 8004e42:	617b      	str	r3, [r7, #20]
          break;
 8004e44:	bf00      	nop
        }
      }
      break;
 8004e46:	bf00      	nop
    }
  }
  return frequency;
 8004e48:	697b      	ldr	r3, [r7, #20]
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	371c      	adds	r7, #28
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e54:	4770      	bx	lr
 8004e56:	bf00      	nop
 8004e58:	40023800 	.word	0x40023800
 8004e5c:	00bb8000 	.word	0x00bb8000
 8004e60:	007a1200 	.word	0x007a1200
 8004e64:	00f42400 	.word	0x00f42400

08004e68 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b082      	sub	sp, #8
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d101      	bne.n	8004e7a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004e76:	2301      	movs	r3, #1
 8004e78:	e07b      	b.n	8004f72 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d108      	bne.n	8004e94 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e8a:	d009      	beq.n	8004ea0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	61da      	str	r2, [r3, #28]
 8004e92:	e005      	b.n	8004ea0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2200      	movs	r2, #0
 8004e98:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004eac:	b2db      	uxtb	r3, r3
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d106      	bne.n	8004ec0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	f7fc fc16 	bl	80016ec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2202      	movs	r2, #2
 8004ec4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	681a      	ldr	r2, [r3, #0]
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ed6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	689b      	ldr	r3, [r3, #8]
 8004ee4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004ee8:	431a      	orrs	r2, r3
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	68db      	ldr	r3, [r3, #12]
 8004eee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ef2:	431a      	orrs	r2, r3
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	691b      	ldr	r3, [r3, #16]
 8004ef8:	f003 0302 	and.w	r3, r3, #2
 8004efc:	431a      	orrs	r2, r3
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	695b      	ldr	r3, [r3, #20]
 8004f02:	f003 0301 	and.w	r3, r3, #1
 8004f06:	431a      	orrs	r2, r3
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	699b      	ldr	r3, [r3, #24]
 8004f0c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f10:	431a      	orrs	r2, r3
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	69db      	ldr	r3, [r3, #28]
 8004f16:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004f1a:	431a      	orrs	r2, r3
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6a1b      	ldr	r3, [r3, #32]
 8004f20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f24:	ea42 0103 	orr.w	r1, r2, r3
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f2c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	430a      	orrs	r2, r1
 8004f36:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	699b      	ldr	r3, [r3, #24]
 8004f3c:	0c1b      	lsrs	r3, r3, #16
 8004f3e:	f003 0104 	and.w	r1, r3, #4
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f46:	f003 0210 	and.w	r2, r3, #16
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	430a      	orrs	r2, r1
 8004f50:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	69da      	ldr	r2, [r3, #28]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f60:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2200      	movs	r2, #0
 8004f66:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004f70:	2300      	movs	r3, #0
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	3708      	adds	r7, #8
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}

08004f7a <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8004f7a:	b580      	push	{r7, lr}
 8004f7c:	b082      	sub	sp, #8
 8004f7e:	af00      	add	r7, sp, #0
 8004f80:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d101      	bne.n	8004f8c <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8004f88:	2301      	movs	r3, #1
 8004f8a:	e01a      	b.n	8004fc2 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2202      	movs	r2, #2
 8004f90:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	681a      	ldr	r2, [r3, #0]
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004fa2:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8004fa4:	6878      	ldr	r0, [r7, #4]
 8004fa6:	f7fc fbe9 	bl	800177c <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2200      	movs	r2, #0
 8004fae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004fc0:	2300      	movs	r3, #0
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	3708      	adds	r7, #8
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}

08004fca <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004fca:	b580      	push	{r7, lr}
 8004fcc:	b08c      	sub	sp, #48	; 0x30
 8004fce:	af00      	add	r7, sp, #0
 8004fd0:	60f8      	str	r0, [r7, #12]
 8004fd2:	60b9      	str	r1, [r7, #8]
 8004fd4:	607a      	str	r2, [r7, #4]
 8004fd6:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004fd8:	2301      	movs	r3, #1
 8004fda:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004fdc:	2300      	movs	r3, #0
 8004fde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	d101      	bne.n	8004ff0 <HAL_SPI_TransmitReceive+0x26>
 8004fec:	2302      	movs	r3, #2
 8004fee:	e18a      	b.n	8005306 <HAL_SPI_TransmitReceive+0x33c>
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004ff8:	f7fc fcea 	bl	80019d0 <HAL_GetTick>
 8004ffc:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005004:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800500e:	887b      	ldrh	r3, [r7, #2]
 8005010:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005012:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005016:	2b01      	cmp	r3, #1
 8005018:	d00f      	beq.n	800503a <HAL_SPI_TransmitReceive+0x70>
 800501a:	69fb      	ldr	r3, [r7, #28]
 800501c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005020:	d107      	bne.n	8005032 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	689b      	ldr	r3, [r3, #8]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d103      	bne.n	8005032 <HAL_SPI_TransmitReceive+0x68>
 800502a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800502e:	2b04      	cmp	r3, #4
 8005030:	d003      	beq.n	800503a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005032:	2302      	movs	r3, #2
 8005034:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005038:	e15b      	b.n	80052f2 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d005      	beq.n	800504c <HAL_SPI_TransmitReceive+0x82>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d002      	beq.n	800504c <HAL_SPI_TransmitReceive+0x82>
 8005046:	887b      	ldrh	r3, [r7, #2]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d103      	bne.n	8005054 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800504c:	2301      	movs	r3, #1
 800504e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005052:	e14e      	b.n	80052f2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800505a:	b2db      	uxtb	r3, r3
 800505c:	2b04      	cmp	r3, #4
 800505e:	d003      	beq.n	8005068 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	2205      	movs	r2, #5
 8005064:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	2200      	movs	r2, #0
 800506c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	687a      	ldr	r2, [r7, #4]
 8005072:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	887a      	ldrh	r2, [r7, #2]
 8005078:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	887a      	ldrh	r2, [r7, #2]
 800507e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	68ba      	ldr	r2, [r7, #8]
 8005084:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	887a      	ldrh	r2, [r7, #2]
 800508a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	887a      	ldrh	r2, [r7, #2]
 8005090:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	2200      	movs	r2, #0
 8005096:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2200      	movs	r2, #0
 800509c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050a8:	2b40      	cmp	r3, #64	; 0x40
 80050aa:	d007      	beq.n	80050bc <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	681a      	ldr	r2, [r3, #0]
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80050ba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	68db      	ldr	r3, [r3, #12]
 80050c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050c4:	d178      	bne.n	80051b8 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d002      	beq.n	80050d4 <HAL_SPI_TransmitReceive+0x10a>
 80050ce:	8b7b      	ldrh	r3, [r7, #26]
 80050d0:	2b01      	cmp	r3, #1
 80050d2:	d166      	bne.n	80051a2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050d8:	881a      	ldrh	r2, [r3, #0]
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050e4:	1c9a      	adds	r2, r3, #2
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050ee:	b29b      	uxth	r3, r3
 80050f0:	3b01      	subs	r3, #1
 80050f2:	b29a      	uxth	r2, r3
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80050f8:	e053      	b.n	80051a2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	689b      	ldr	r3, [r3, #8]
 8005100:	f003 0302 	and.w	r3, r3, #2
 8005104:	2b02      	cmp	r3, #2
 8005106:	d11b      	bne.n	8005140 <HAL_SPI_TransmitReceive+0x176>
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800510c:	b29b      	uxth	r3, r3
 800510e:	2b00      	cmp	r3, #0
 8005110:	d016      	beq.n	8005140 <HAL_SPI_TransmitReceive+0x176>
 8005112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005114:	2b01      	cmp	r3, #1
 8005116:	d113      	bne.n	8005140 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800511c:	881a      	ldrh	r2, [r3, #0]
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005128:	1c9a      	adds	r2, r3, #2
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005132:	b29b      	uxth	r3, r3
 8005134:	3b01      	subs	r3, #1
 8005136:	b29a      	uxth	r2, r3
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800513c:	2300      	movs	r3, #0
 800513e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	689b      	ldr	r3, [r3, #8]
 8005146:	f003 0301 	and.w	r3, r3, #1
 800514a:	2b01      	cmp	r3, #1
 800514c:	d119      	bne.n	8005182 <HAL_SPI_TransmitReceive+0x1b8>
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005152:	b29b      	uxth	r3, r3
 8005154:	2b00      	cmp	r3, #0
 8005156:	d014      	beq.n	8005182 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	68da      	ldr	r2, [r3, #12]
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005162:	b292      	uxth	r2, r2
 8005164:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800516a:	1c9a      	adds	r2, r3, #2
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005174:	b29b      	uxth	r3, r3
 8005176:	3b01      	subs	r3, #1
 8005178:	b29a      	uxth	r2, r3
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800517e:	2301      	movs	r3, #1
 8005180:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005182:	f7fc fc25 	bl	80019d0 <HAL_GetTick>
 8005186:	4602      	mov	r2, r0
 8005188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800518a:	1ad3      	subs	r3, r2, r3
 800518c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800518e:	429a      	cmp	r2, r3
 8005190:	d807      	bhi.n	80051a2 <HAL_SPI_TransmitReceive+0x1d8>
 8005192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005194:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005198:	d003      	beq.n	80051a2 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800519a:	2303      	movs	r3, #3
 800519c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80051a0:	e0a7      	b.n	80052f2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051a6:	b29b      	uxth	r3, r3
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d1a6      	bne.n	80050fa <HAL_SPI_TransmitReceive+0x130>
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051b0:	b29b      	uxth	r3, r3
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d1a1      	bne.n	80050fa <HAL_SPI_TransmitReceive+0x130>
 80051b6:	e07c      	b.n	80052b2 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d002      	beq.n	80051c6 <HAL_SPI_TransmitReceive+0x1fc>
 80051c0:	8b7b      	ldrh	r3, [r7, #26]
 80051c2:	2b01      	cmp	r3, #1
 80051c4:	d16b      	bne.n	800529e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	330c      	adds	r3, #12
 80051d0:	7812      	ldrb	r2, [r2, #0]
 80051d2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051d8:	1c5a      	adds	r2, r3, #1
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051e2:	b29b      	uxth	r3, r3
 80051e4:	3b01      	subs	r3, #1
 80051e6:	b29a      	uxth	r2, r3
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80051ec:	e057      	b.n	800529e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	689b      	ldr	r3, [r3, #8]
 80051f4:	f003 0302 	and.w	r3, r3, #2
 80051f8:	2b02      	cmp	r3, #2
 80051fa:	d11c      	bne.n	8005236 <HAL_SPI_TransmitReceive+0x26c>
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005200:	b29b      	uxth	r3, r3
 8005202:	2b00      	cmp	r3, #0
 8005204:	d017      	beq.n	8005236 <HAL_SPI_TransmitReceive+0x26c>
 8005206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005208:	2b01      	cmp	r3, #1
 800520a:	d114      	bne.n	8005236 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	330c      	adds	r3, #12
 8005216:	7812      	ldrb	r2, [r2, #0]
 8005218:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800521e:	1c5a      	adds	r2, r3, #1
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005228:	b29b      	uxth	r3, r3
 800522a:	3b01      	subs	r3, #1
 800522c:	b29a      	uxth	r2, r3
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005232:	2300      	movs	r3, #0
 8005234:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	689b      	ldr	r3, [r3, #8]
 800523c:	f003 0301 	and.w	r3, r3, #1
 8005240:	2b01      	cmp	r3, #1
 8005242:	d119      	bne.n	8005278 <HAL_SPI_TransmitReceive+0x2ae>
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005248:	b29b      	uxth	r3, r3
 800524a:	2b00      	cmp	r3, #0
 800524c:	d014      	beq.n	8005278 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	68da      	ldr	r2, [r3, #12]
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005258:	b2d2      	uxtb	r2, r2
 800525a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005260:	1c5a      	adds	r2, r3, #1
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800526a:	b29b      	uxth	r3, r3
 800526c:	3b01      	subs	r3, #1
 800526e:	b29a      	uxth	r2, r3
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005274:	2301      	movs	r3, #1
 8005276:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005278:	f7fc fbaa 	bl	80019d0 <HAL_GetTick>
 800527c:	4602      	mov	r2, r0
 800527e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005280:	1ad3      	subs	r3, r2, r3
 8005282:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005284:	429a      	cmp	r2, r3
 8005286:	d803      	bhi.n	8005290 <HAL_SPI_TransmitReceive+0x2c6>
 8005288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800528a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800528e:	d102      	bne.n	8005296 <HAL_SPI_TransmitReceive+0x2cc>
 8005290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005292:	2b00      	cmp	r3, #0
 8005294:	d103      	bne.n	800529e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005296:	2303      	movs	r3, #3
 8005298:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800529c:	e029      	b.n	80052f2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80052a2:	b29b      	uxth	r3, r3
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d1a2      	bne.n	80051ee <HAL_SPI_TransmitReceive+0x224>
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052ac:	b29b      	uxth	r3, r3
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d19d      	bne.n	80051ee <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80052b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052b4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80052b6:	68f8      	ldr	r0, [r7, #12]
 80052b8:	f000 f8c0 	bl	800543c <SPI_EndRxTxTransaction>
 80052bc:	4603      	mov	r3, r0
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d006      	beq.n	80052d0 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80052c2:	2301      	movs	r3, #1
 80052c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	2220      	movs	r2, #32
 80052cc:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80052ce:	e010      	b.n	80052f2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	689b      	ldr	r3, [r3, #8]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d10b      	bne.n	80052f0 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80052d8:	2300      	movs	r3, #0
 80052da:	617b      	str	r3, [r7, #20]
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	68db      	ldr	r3, [r3, #12]
 80052e2:	617b      	str	r3, [r7, #20]
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	689b      	ldr	r3, [r3, #8]
 80052ea:	617b      	str	r3, [r7, #20]
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	e000      	b.n	80052f2 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80052f0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	2201      	movs	r2, #1
 80052f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	2200      	movs	r2, #0
 80052fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005302:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005306:	4618      	mov	r0, r3
 8005308:	3730      	adds	r7, #48	; 0x30
 800530a:	46bd      	mov	sp, r7
 800530c:	bd80      	pop	{r7, pc}

0800530e <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800530e:	b480      	push	{r7}
 8005310:	b083      	sub	sp, #12
 8005312:	af00      	add	r7, sp, #0
 8005314:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800531c:	b2db      	uxtb	r3, r3
}
 800531e:	4618      	mov	r0, r3
 8005320:	370c      	adds	r7, #12
 8005322:	46bd      	mov	sp, r7
 8005324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005328:	4770      	bx	lr
	...

0800532c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b088      	sub	sp, #32
 8005330:	af00      	add	r7, sp, #0
 8005332:	60f8      	str	r0, [r7, #12]
 8005334:	60b9      	str	r1, [r7, #8]
 8005336:	603b      	str	r3, [r7, #0]
 8005338:	4613      	mov	r3, r2
 800533a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800533c:	f7fc fb48 	bl	80019d0 <HAL_GetTick>
 8005340:	4602      	mov	r2, r0
 8005342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005344:	1a9b      	subs	r3, r3, r2
 8005346:	683a      	ldr	r2, [r7, #0]
 8005348:	4413      	add	r3, r2
 800534a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800534c:	f7fc fb40 	bl	80019d0 <HAL_GetTick>
 8005350:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005352:	4b39      	ldr	r3, [pc, #228]	; (8005438 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	015b      	lsls	r3, r3, #5
 8005358:	0d1b      	lsrs	r3, r3, #20
 800535a:	69fa      	ldr	r2, [r7, #28]
 800535c:	fb02 f303 	mul.w	r3, r2, r3
 8005360:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005362:	e054      	b.n	800540e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	f1b3 3fff 	cmp.w	r3, #4294967295
 800536a:	d050      	beq.n	800540e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800536c:	f7fc fb30 	bl	80019d0 <HAL_GetTick>
 8005370:	4602      	mov	r2, r0
 8005372:	69bb      	ldr	r3, [r7, #24]
 8005374:	1ad3      	subs	r3, r2, r3
 8005376:	69fa      	ldr	r2, [r7, #28]
 8005378:	429a      	cmp	r2, r3
 800537a:	d902      	bls.n	8005382 <SPI_WaitFlagStateUntilTimeout+0x56>
 800537c:	69fb      	ldr	r3, [r7, #28]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d13d      	bne.n	80053fe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	685a      	ldr	r2, [r3, #4]
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005390:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800539a:	d111      	bne.n	80053c0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	689b      	ldr	r3, [r3, #8]
 80053a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053a4:	d004      	beq.n	80053b0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	689b      	ldr	r3, [r3, #8]
 80053aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053ae:	d107      	bne.n	80053c0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	681a      	ldr	r2, [r3, #0]
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053be:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053c8:	d10f      	bne.n	80053ea <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	681a      	ldr	r2, [r3, #0]
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80053d8:	601a      	str	r2, [r3, #0]
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	681a      	ldr	r2, [r3, #0]
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80053e8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	2201      	movs	r2, #1
 80053ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2200      	movs	r2, #0
 80053f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80053fa:	2303      	movs	r3, #3
 80053fc:	e017      	b.n	800542e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d101      	bne.n	8005408 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005404:	2300      	movs	r3, #0
 8005406:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	3b01      	subs	r3, #1
 800540c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	689a      	ldr	r2, [r3, #8]
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	4013      	ands	r3, r2
 8005418:	68ba      	ldr	r2, [r7, #8]
 800541a:	429a      	cmp	r2, r3
 800541c:	bf0c      	ite	eq
 800541e:	2301      	moveq	r3, #1
 8005420:	2300      	movne	r3, #0
 8005422:	b2db      	uxtb	r3, r3
 8005424:	461a      	mov	r2, r3
 8005426:	79fb      	ldrb	r3, [r7, #7]
 8005428:	429a      	cmp	r2, r3
 800542a:	d19b      	bne.n	8005364 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800542c:	2300      	movs	r3, #0
}
 800542e:	4618      	mov	r0, r3
 8005430:	3720      	adds	r7, #32
 8005432:	46bd      	mov	sp, r7
 8005434:	bd80      	pop	{r7, pc}
 8005436:	bf00      	nop
 8005438:	2000006c 	.word	0x2000006c

0800543c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b088      	sub	sp, #32
 8005440:	af02      	add	r7, sp, #8
 8005442:	60f8      	str	r0, [r7, #12]
 8005444:	60b9      	str	r1, [r7, #8]
 8005446:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005448:	4b1b      	ldr	r3, [pc, #108]	; (80054b8 <SPI_EndRxTxTransaction+0x7c>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a1b      	ldr	r2, [pc, #108]	; (80054bc <SPI_EndRxTxTransaction+0x80>)
 800544e:	fba2 2303 	umull	r2, r3, r2, r3
 8005452:	0d5b      	lsrs	r3, r3, #21
 8005454:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005458:	fb02 f303 	mul.w	r3, r2, r3
 800545c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005466:	d112      	bne.n	800548e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	9300      	str	r3, [sp, #0]
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	2200      	movs	r2, #0
 8005470:	2180      	movs	r1, #128	; 0x80
 8005472:	68f8      	ldr	r0, [r7, #12]
 8005474:	f7ff ff5a 	bl	800532c <SPI_WaitFlagStateUntilTimeout>
 8005478:	4603      	mov	r3, r0
 800547a:	2b00      	cmp	r3, #0
 800547c:	d016      	beq.n	80054ac <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005482:	f043 0220 	orr.w	r2, r3, #32
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800548a:	2303      	movs	r3, #3
 800548c:	e00f      	b.n	80054ae <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d00a      	beq.n	80054aa <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005494:	697b      	ldr	r3, [r7, #20]
 8005496:	3b01      	subs	r3, #1
 8005498:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	689b      	ldr	r3, [r3, #8]
 80054a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054a4:	2b80      	cmp	r3, #128	; 0x80
 80054a6:	d0f2      	beq.n	800548e <SPI_EndRxTxTransaction+0x52>
 80054a8:	e000      	b.n	80054ac <SPI_EndRxTxTransaction+0x70>
        break;
 80054aa:	bf00      	nop
  }

  return HAL_OK;
 80054ac:	2300      	movs	r3, #0
}
 80054ae:	4618      	mov	r0, r3
 80054b0:	3718      	adds	r7, #24
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bd80      	pop	{r7, pc}
 80054b6:	bf00      	nop
 80054b8:	2000006c 	.word	0x2000006c
 80054bc:	165e9f81 	.word	0x165e9f81

080054c0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80054c0:	b084      	sub	sp, #16
 80054c2:	b580      	push	{r7, lr}
 80054c4:	b084      	sub	sp, #16
 80054c6:	af00      	add	r7, sp, #0
 80054c8:	6078      	str	r0, [r7, #4]
 80054ca:	f107 001c 	add.w	r0, r7, #28
 80054ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80054d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054d4:	2b01      	cmp	r3, #1
 80054d6:	d122      	bne.n	800551e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054dc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	68db      	ldr	r3, [r3, #12]
 80054e8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80054ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054f0:	687a      	ldr	r2, [r7, #4]
 80054f2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	68db      	ldr	r3, [r3, #12]
 80054f8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005500:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005502:	2b01      	cmp	r3, #1
 8005504:	d105      	bne.n	8005512 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	68db      	ldr	r3, [r3, #12]
 800550a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005512:	6878      	ldr	r0, [r7, #4]
 8005514:	f001 fbee 	bl	8006cf4 <USB_CoreReset>
 8005518:	4603      	mov	r3, r0
 800551a:	73fb      	strb	r3, [r7, #15]
 800551c:	e01a      	b.n	8005554 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	68db      	ldr	r3, [r3, #12]
 8005522:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800552a:	6878      	ldr	r0, [r7, #4]
 800552c:	f001 fbe2 	bl	8006cf4 <USB_CoreReset>
 8005530:	4603      	mov	r3, r0
 8005532:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005534:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005536:	2b00      	cmp	r3, #0
 8005538:	d106      	bne.n	8005548 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800553e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	639a      	str	r2, [r3, #56]	; 0x38
 8005546:	e005      	b.n	8005554 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800554c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005556:	2b01      	cmp	r3, #1
 8005558:	d10b      	bne.n	8005572 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	689b      	ldr	r3, [r3, #8]
 800555e:	f043 0206 	orr.w	r2, r3, #6
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	689b      	ldr	r3, [r3, #8]
 800556a:	f043 0220 	orr.w	r2, r3, #32
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005572:	7bfb      	ldrb	r3, [r7, #15]
}
 8005574:	4618      	mov	r0, r3
 8005576:	3710      	adds	r7, #16
 8005578:	46bd      	mov	sp, r7
 800557a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800557e:	b004      	add	sp, #16
 8005580:	4770      	bx	lr
	...

08005584 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005584:	b480      	push	{r7}
 8005586:	b087      	sub	sp, #28
 8005588:	af00      	add	r7, sp, #0
 800558a:	60f8      	str	r0, [r7, #12]
 800558c:	60b9      	str	r1, [r7, #8]
 800558e:	4613      	mov	r3, r2
 8005590:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005592:	79fb      	ldrb	r3, [r7, #7]
 8005594:	2b02      	cmp	r3, #2
 8005596:	d165      	bne.n	8005664 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	4a41      	ldr	r2, [pc, #260]	; (80056a0 <USB_SetTurnaroundTime+0x11c>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d906      	bls.n	80055ae <USB_SetTurnaroundTime+0x2a>
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	4a40      	ldr	r2, [pc, #256]	; (80056a4 <USB_SetTurnaroundTime+0x120>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d202      	bcs.n	80055ae <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80055a8:	230f      	movs	r3, #15
 80055aa:	617b      	str	r3, [r7, #20]
 80055ac:	e062      	b.n	8005674 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	4a3c      	ldr	r2, [pc, #240]	; (80056a4 <USB_SetTurnaroundTime+0x120>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d306      	bcc.n	80055c4 <USB_SetTurnaroundTime+0x40>
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	4a3b      	ldr	r2, [pc, #236]	; (80056a8 <USB_SetTurnaroundTime+0x124>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d202      	bcs.n	80055c4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80055be:	230e      	movs	r3, #14
 80055c0:	617b      	str	r3, [r7, #20]
 80055c2:	e057      	b.n	8005674 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	4a38      	ldr	r2, [pc, #224]	; (80056a8 <USB_SetTurnaroundTime+0x124>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d306      	bcc.n	80055da <USB_SetTurnaroundTime+0x56>
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	4a37      	ldr	r2, [pc, #220]	; (80056ac <USB_SetTurnaroundTime+0x128>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d202      	bcs.n	80055da <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80055d4:	230d      	movs	r3, #13
 80055d6:	617b      	str	r3, [r7, #20]
 80055d8:	e04c      	b.n	8005674 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	4a33      	ldr	r2, [pc, #204]	; (80056ac <USB_SetTurnaroundTime+0x128>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d306      	bcc.n	80055f0 <USB_SetTurnaroundTime+0x6c>
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	4a32      	ldr	r2, [pc, #200]	; (80056b0 <USB_SetTurnaroundTime+0x12c>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d802      	bhi.n	80055f0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80055ea:	230c      	movs	r3, #12
 80055ec:	617b      	str	r3, [r7, #20]
 80055ee:	e041      	b.n	8005674 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	4a2f      	ldr	r2, [pc, #188]	; (80056b0 <USB_SetTurnaroundTime+0x12c>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d906      	bls.n	8005606 <USB_SetTurnaroundTime+0x82>
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	4a2e      	ldr	r2, [pc, #184]	; (80056b4 <USB_SetTurnaroundTime+0x130>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d802      	bhi.n	8005606 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005600:	230b      	movs	r3, #11
 8005602:	617b      	str	r3, [r7, #20]
 8005604:	e036      	b.n	8005674 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	4a2a      	ldr	r2, [pc, #168]	; (80056b4 <USB_SetTurnaroundTime+0x130>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d906      	bls.n	800561c <USB_SetTurnaroundTime+0x98>
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	4a29      	ldr	r2, [pc, #164]	; (80056b8 <USB_SetTurnaroundTime+0x134>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d802      	bhi.n	800561c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005616:	230a      	movs	r3, #10
 8005618:	617b      	str	r3, [r7, #20]
 800561a:	e02b      	b.n	8005674 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	4a26      	ldr	r2, [pc, #152]	; (80056b8 <USB_SetTurnaroundTime+0x134>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d906      	bls.n	8005632 <USB_SetTurnaroundTime+0xae>
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	4a25      	ldr	r2, [pc, #148]	; (80056bc <USB_SetTurnaroundTime+0x138>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d202      	bcs.n	8005632 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800562c:	2309      	movs	r3, #9
 800562e:	617b      	str	r3, [r7, #20]
 8005630:	e020      	b.n	8005674 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005632:	68bb      	ldr	r3, [r7, #8]
 8005634:	4a21      	ldr	r2, [pc, #132]	; (80056bc <USB_SetTurnaroundTime+0x138>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d306      	bcc.n	8005648 <USB_SetTurnaroundTime+0xc4>
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	4a20      	ldr	r2, [pc, #128]	; (80056c0 <USB_SetTurnaroundTime+0x13c>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d802      	bhi.n	8005648 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005642:	2308      	movs	r3, #8
 8005644:	617b      	str	r3, [r7, #20]
 8005646:	e015      	b.n	8005674 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	4a1d      	ldr	r2, [pc, #116]	; (80056c0 <USB_SetTurnaroundTime+0x13c>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d906      	bls.n	800565e <USB_SetTurnaroundTime+0xda>
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	4a1c      	ldr	r2, [pc, #112]	; (80056c4 <USB_SetTurnaroundTime+0x140>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d202      	bcs.n	800565e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005658:	2307      	movs	r3, #7
 800565a:	617b      	str	r3, [r7, #20]
 800565c:	e00a      	b.n	8005674 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800565e:	2306      	movs	r3, #6
 8005660:	617b      	str	r3, [r7, #20]
 8005662:	e007      	b.n	8005674 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005664:	79fb      	ldrb	r3, [r7, #7]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d102      	bne.n	8005670 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800566a:	2309      	movs	r3, #9
 800566c:	617b      	str	r3, [r7, #20]
 800566e:	e001      	b.n	8005674 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005670:	2309      	movs	r3, #9
 8005672:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	68db      	ldr	r3, [r3, #12]
 8005678:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	68da      	ldr	r2, [r3, #12]
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	029b      	lsls	r3, r3, #10
 8005688:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800568c:	431a      	orrs	r2, r3
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005692:	2300      	movs	r3, #0
}
 8005694:	4618      	mov	r0, r3
 8005696:	371c      	adds	r7, #28
 8005698:	46bd      	mov	sp, r7
 800569a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569e:	4770      	bx	lr
 80056a0:	00d8acbf 	.word	0x00d8acbf
 80056a4:	00e4e1c0 	.word	0x00e4e1c0
 80056a8:	00f42400 	.word	0x00f42400
 80056ac:	01067380 	.word	0x01067380
 80056b0:	011a499f 	.word	0x011a499f
 80056b4:	01312cff 	.word	0x01312cff
 80056b8:	014ca43f 	.word	0x014ca43f
 80056bc:	016e3600 	.word	0x016e3600
 80056c0:	01a6ab1f 	.word	0x01a6ab1f
 80056c4:	01e84800 	.word	0x01e84800

080056c8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80056c8:	b480      	push	{r7}
 80056ca:	b083      	sub	sp, #12
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	689b      	ldr	r3, [r3, #8]
 80056d4:	f043 0201 	orr.w	r2, r3, #1
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80056dc:	2300      	movs	r3, #0
}
 80056de:	4618      	mov	r0, r3
 80056e0:	370c      	adds	r7, #12
 80056e2:	46bd      	mov	sp, r7
 80056e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e8:	4770      	bx	lr

080056ea <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80056ea:	b480      	push	{r7}
 80056ec:	b083      	sub	sp, #12
 80056ee:	af00      	add	r7, sp, #0
 80056f0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	689b      	ldr	r3, [r3, #8]
 80056f6:	f023 0201 	bic.w	r2, r3, #1
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80056fe:	2300      	movs	r3, #0
}
 8005700:	4618      	mov	r0, r3
 8005702:	370c      	adds	r7, #12
 8005704:	46bd      	mov	sp, r7
 8005706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570a:	4770      	bx	lr

0800570c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b084      	sub	sp, #16
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
 8005714:	460b      	mov	r3, r1
 8005716:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005718:	2300      	movs	r3, #0
 800571a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	68db      	ldr	r3, [r3, #12]
 8005720:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005728:	78fb      	ldrb	r3, [r7, #3]
 800572a:	2b01      	cmp	r3, #1
 800572c:	d115      	bne.n	800575a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	68db      	ldr	r3, [r3, #12]
 8005732:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800573a:	2001      	movs	r0, #1
 800573c:	f7fc f954 	bl	80019e8 <HAL_Delay>
      ms++;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	3301      	adds	r3, #1
 8005744:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005746:	6878      	ldr	r0, [r7, #4]
 8005748:	f001 fa45 	bl	8006bd6 <USB_GetMode>
 800574c:	4603      	mov	r3, r0
 800574e:	2b01      	cmp	r3, #1
 8005750:	d01e      	beq.n	8005790 <USB_SetCurrentMode+0x84>
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	2b31      	cmp	r3, #49	; 0x31
 8005756:	d9f0      	bls.n	800573a <USB_SetCurrentMode+0x2e>
 8005758:	e01a      	b.n	8005790 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800575a:	78fb      	ldrb	r3, [r7, #3]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d115      	bne.n	800578c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	68db      	ldr	r3, [r3, #12]
 8005764:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800576c:	2001      	movs	r0, #1
 800576e:	f7fc f93b 	bl	80019e8 <HAL_Delay>
      ms++;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	3301      	adds	r3, #1
 8005776:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005778:	6878      	ldr	r0, [r7, #4]
 800577a:	f001 fa2c 	bl	8006bd6 <USB_GetMode>
 800577e:	4603      	mov	r3, r0
 8005780:	2b00      	cmp	r3, #0
 8005782:	d005      	beq.n	8005790 <USB_SetCurrentMode+0x84>
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	2b31      	cmp	r3, #49	; 0x31
 8005788:	d9f0      	bls.n	800576c <USB_SetCurrentMode+0x60>
 800578a:	e001      	b.n	8005790 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800578c:	2301      	movs	r3, #1
 800578e:	e005      	b.n	800579c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	2b32      	cmp	r3, #50	; 0x32
 8005794:	d101      	bne.n	800579a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005796:	2301      	movs	r3, #1
 8005798:	e000      	b.n	800579c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800579a:	2300      	movs	r3, #0
}
 800579c:	4618      	mov	r0, r3
 800579e:	3710      	adds	r7, #16
 80057a0:	46bd      	mov	sp, r7
 80057a2:	bd80      	pop	{r7, pc}

080057a4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80057a4:	b084      	sub	sp, #16
 80057a6:	b580      	push	{r7, lr}
 80057a8:	b086      	sub	sp, #24
 80057aa:	af00      	add	r7, sp, #0
 80057ac:	6078      	str	r0, [r7, #4]
 80057ae:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80057b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80057b6:	2300      	movs	r3, #0
 80057b8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80057be:	2300      	movs	r3, #0
 80057c0:	613b      	str	r3, [r7, #16]
 80057c2:	e009      	b.n	80057d8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80057c4:	687a      	ldr	r2, [r7, #4]
 80057c6:	693b      	ldr	r3, [r7, #16]
 80057c8:	3340      	adds	r3, #64	; 0x40
 80057ca:	009b      	lsls	r3, r3, #2
 80057cc:	4413      	add	r3, r2
 80057ce:	2200      	movs	r2, #0
 80057d0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80057d2:	693b      	ldr	r3, [r7, #16]
 80057d4:	3301      	adds	r3, #1
 80057d6:	613b      	str	r3, [r7, #16]
 80057d8:	693b      	ldr	r3, [r7, #16]
 80057da:	2b0e      	cmp	r3, #14
 80057dc:	d9f2      	bls.n	80057c4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80057de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d11c      	bne.n	800581e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057ea:	685b      	ldr	r3, [r3, #4]
 80057ec:	68fa      	ldr	r2, [r7, #12]
 80057ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80057f2:	f043 0302 	orr.w	r3, r3, #2
 80057f6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057fc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005808:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005814:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	639a      	str	r2, [r3, #56]	; 0x38
 800581c:	e00b      	b.n	8005836 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005822:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800582e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800583c:	461a      	mov	r2, r3
 800583e:	2300      	movs	r3, #0
 8005840:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005848:	4619      	mov	r1, r3
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005850:	461a      	mov	r2, r3
 8005852:	680b      	ldr	r3, [r1, #0]
 8005854:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005858:	2b01      	cmp	r3, #1
 800585a:	d10c      	bne.n	8005876 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800585c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800585e:	2b00      	cmp	r3, #0
 8005860:	d104      	bne.n	800586c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005862:	2100      	movs	r1, #0
 8005864:	6878      	ldr	r0, [r7, #4]
 8005866:	f000 f965 	bl	8005b34 <USB_SetDevSpeed>
 800586a:	e008      	b.n	800587e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800586c:	2101      	movs	r1, #1
 800586e:	6878      	ldr	r0, [r7, #4]
 8005870:	f000 f960 	bl	8005b34 <USB_SetDevSpeed>
 8005874:	e003      	b.n	800587e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005876:	2103      	movs	r1, #3
 8005878:	6878      	ldr	r0, [r7, #4]
 800587a:	f000 f95b 	bl	8005b34 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800587e:	2110      	movs	r1, #16
 8005880:	6878      	ldr	r0, [r7, #4]
 8005882:	f000 f8f3 	bl	8005a6c <USB_FlushTxFifo>
 8005886:	4603      	mov	r3, r0
 8005888:	2b00      	cmp	r3, #0
 800588a:	d001      	beq.n	8005890 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800588c:	2301      	movs	r3, #1
 800588e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005890:	6878      	ldr	r0, [r7, #4]
 8005892:	f000 f91f 	bl	8005ad4 <USB_FlushRxFifo>
 8005896:	4603      	mov	r3, r0
 8005898:	2b00      	cmp	r3, #0
 800589a:	d001      	beq.n	80058a0 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800589c:	2301      	movs	r3, #1
 800589e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058a6:	461a      	mov	r2, r3
 80058a8:	2300      	movs	r3, #0
 80058aa:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058b2:	461a      	mov	r2, r3
 80058b4:	2300      	movs	r3, #0
 80058b6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058be:	461a      	mov	r2, r3
 80058c0:	2300      	movs	r3, #0
 80058c2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80058c4:	2300      	movs	r3, #0
 80058c6:	613b      	str	r3, [r7, #16]
 80058c8:	e043      	b.n	8005952 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80058ca:	693b      	ldr	r3, [r7, #16]
 80058cc:	015a      	lsls	r2, r3, #5
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	4413      	add	r3, r2
 80058d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80058dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80058e0:	d118      	bne.n	8005914 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80058e2:	693b      	ldr	r3, [r7, #16]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d10a      	bne.n	80058fe <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80058e8:	693b      	ldr	r3, [r7, #16]
 80058ea:	015a      	lsls	r2, r3, #5
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	4413      	add	r3, r2
 80058f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058f4:	461a      	mov	r2, r3
 80058f6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80058fa:	6013      	str	r3, [r2, #0]
 80058fc:	e013      	b.n	8005926 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80058fe:	693b      	ldr	r3, [r7, #16]
 8005900:	015a      	lsls	r2, r3, #5
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	4413      	add	r3, r2
 8005906:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800590a:	461a      	mov	r2, r3
 800590c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005910:	6013      	str	r3, [r2, #0]
 8005912:	e008      	b.n	8005926 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005914:	693b      	ldr	r3, [r7, #16]
 8005916:	015a      	lsls	r2, r3, #5
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	4413      	add	r3, r2
 800591c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005920:	461a      	mov	r2, r3
 8005922:	2300      	movs	r3, #0
 8005924:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005926:	693b      	ldr	r3, [r7, #16]
 8005928:	015a      	lsls	r2, r3, #5
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	4413      	add	r3, r2
 800592e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005932:	461a      	mov	r2, r3
 8005934:	2300      	movs	r3, #0
 8005936:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005938:	693b      	ldr	r3, [r7, #16]
 800593a:	015a      	lsls	r2, r3, #5
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	4413      	add	r3, r2
 8005940:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005944:	461a      	mov	r2, r3
 8005946:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800594a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800594c:	693b      	ldr	r3, [r7, #16]
 800594e:	3301      	adds	r3, #1
 8005950:	613b      	str	r3, [r7, #16]
 8005952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005954:	693a      	ldr	r2, [r7, #16]
 8005956:	429a      	cmp	r2, r3
 8005958:	d3b7      	bcc.n	80058ca <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800595a:	2300      	movs	r3, #0
 800595c:	613b      	str	r3, [r7, #16]
 800595e:	e043      	b.n	80059e8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005960:	693b      	ldr	r3, [r7, #16]
 8005962:	015a      	lsls	r2, r3, #5
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	4413      	add	r3, r2
 8005968:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005972:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005976:	d118      	bne.n	80059aa <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005978:	693b      	ldr	r3, [r7, #16]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d10a      	bne.n	8005994 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800597e:	693b      	ldr	r3, [r7, #16]
 8005980:	015a      	lsls	r2, r3, #5
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	4413      	add	r3, r2
 8005986:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800598a:	461a      	mov	r2, r3
 800598c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005990:	6013      	str	r3, [r2, #0]
 8005992:	e013      	b.n	80059bc <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005994:	693b      	ldr	r3, [r7, #16]
 8005996:	015a      	lsls	r2, r3, #5
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	4413      	add	r3, r2
 800599c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059a0:	461a      	mov	r2, r3
 80059a2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80059a6:	6013      	str	r3, [r2, #0]
 80059a8:	e008      	b.n	80059bc <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80059aa:	693b      	ldr	r3, [r7, #16]
 80059ac:	015a      	lsls	r2, r3, #5
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	4413      	add	r3, r2
 80059b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059b6:	461a      	mov	r2, r3
 80059b8:	2300      	movs	r3, #0
 80059ba:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80059bc:	693b      	ldr	r3, [r7, #16]
 80059be:	015a      	lsls	r2, r3, #5
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	4413      	add	r3, r2
 80059c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059c8:	461a      	mov	r2, r3
 80059ca:	2300      	movs	r3, #0
 80059cc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80059ce:	693b      	ldr	r3, [r7, #16]
 80059d0:	015a      	lsls	r2, r3, #5
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	4413      	add	r3, r2
 80059d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059da:	461a      	mov	r2, r3
 80059dc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80059e0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80059e2:	693b      	ldr	r3, [r7, #16]
 80059e4:	3301      	adds	r3, #1
 80059e6:	613b      	str	r3, [r7, #16]
 80059e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ea:	693a      	ldr	r2, [r7, #16]
 80059ec:	429a      	cmp	r2, r3
 80059ee:	d3b7      	bcc.n	8005960 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059f6:	691b      	ldr	r3, [r3, #16]
 80059f8:	68fa      	ldr	r2, [r7, #12]
 80059fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80059fe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a02:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2200      	movs	r2, #0
 8005a08:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005a10:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d105      	bne.n	8005a24 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	699b      	ldr	r3, [r3, #24]
 8005a1c:	f043 0210 	orr.w	r2, r3, #16
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	699a      	ldr	r2, [r3, #24]
 8005a28:	4b0f      	ldr	r3, [pc, #60]	; (8005a68 <USB_DevInit+0x2c4>)
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	687a      	ldr	r2, [r7, #4]
 8005a2e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005a30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d005      	beq.n	8005a42 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	699b      	ldr	r3, [r3, #24]
 8005a3a:	f043 0208 	orr.w	r2, r3, #8
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005a42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a44:	2b01      	cmp	r3, #1
 8005a46:	d107      	bne.n	8005a58 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	699b      	ldr	r3, [r3, #24]
 8005a4c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005a50:	f043 0304 	orr.w	r3, r3, #4
 8005a54:	687a      	ldr	r2, [r7, #4]
 8005a56:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005a58:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	3718      	adds	r7, #24
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005a64:	b004      	add	sp, #16
 8005a66:	4770      	bx	lr
 8005a68:	803c3800 	.word	0x803c3800

08005a6c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b085      	sub	sp, #20
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
 8005a74:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005a76:	2300      	movs	r3, #0
 8005a78:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	3301      	adds	r3, #1
 8005a7e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	4a13      	ldr	r2, [pc, #76]	; (8005ad0 <USB_FlushTxFifo+0x64>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d901      	bls.n	8005a8c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005a88:	2303      	movs	r3, #3
 8005a8a:	e01b      	b.n	8005ac4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	691b      	ldr	r3, [r3, #16]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	daf2      	bge.n	8005a7a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005a94:	2300      	movs	r3, #0
 8005a96:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	019b      	lsls	r3, r3, #6
 8005a9c:	f043 0220 	orr.w	r2, r3, #32
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	3301      	adds	r3, #1
 8005aa8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	4a08      	ldr	r2, [pc, #32]	; (8005ad0 <USB_FlushTxFifo+0x64>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d901      	bls.n	8005ab6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005ab2:	2303      	movs	r3, #3
 8005ab4:	e006      	b.n	8005ac4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	691b      	ldr	r3, [r3, #16]
 8005aba:	f003 0320 	and.w	r3, r3, #32
 8005abe:	2b20      	cmp	r3, #32
 8005ac0:	d0f0      	beq.n	8005aa4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005ac2:	2300      	movs	r3, #0
}
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	3714      	adds	r7, #20
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ace:	4770      	bx	lr
 8005ad0:	00030d40 	.word	0x00030d40

08005ad4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b085      	sub	sp, #20
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005adc:	2300      	movs	r3, #0
 8005ade:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	3301      	adds	r3, #1
 8005ae4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	4a11      	ldr	r2, [pc, #68]	; (8005b30 <USB_FlushRxFifo+0x5c>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d901      	bls.n	8005af2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005aee:	2303      	movs	r3, #3
 8005af0:	e018      	b.n	8005b24 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	691b      	ldr	r3, [r3, #16]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	daf2      	bge.n	8005ae0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005afa:	2300      	movs	r3, #0
 8005afc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2210      	movs	r2, #16
 8005b02:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	3301      	adds	r3, #1
 8005b08:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	4a08      	ldr	r2, [pc, #32]	; (8005b30 <USB_FlushRxFifo+0x5c>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d901      	bls.n	8005b16 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005b12:	2303      	movs	r3, #3
 8005b14:	e006      	b.n	8005b24 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	691b      	ldr	r3, [r3, #16]
 8005b1a:	f003 0310 	and.w	r3, r3, #16
 8005b1e:	2b10      	cmp	r3, #16
 8005b20:	d0f0      	beq.n	8005b04 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005b22:	2300      	movs	r3, #0
}
 8005b24:	4618      	mov	r0, r3
 8005b26:	3714      	adds	r7, #20
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2e:	4770      	bx	lr
 8005b30:	00030d40 	.word	0x00030d40

08005b34 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005b34:	b480      	push	{r7}
 8005b36:	b085      	sub	sp, #20
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
 8005b3c:	460b      	mov	r3, r1
 8005b3e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b4a:	681a      	ldr	r2, [r3, #0]
 8005b4c:	78fb      	ldrb	r3, [r7, #3]
 8005b4e:	68f9      	ldr	r1, [r7, #12]
 8005b50:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b54:	4313      	orrs	r3, r2
 8005b56:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005b58:	2300      	movs	r3, #0
}
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	3714      	adds	r7, #20
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b64:	4770      	bx	lr

08005b66 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005b66:	b480      	push	{r7}
 8005b68:	b087      	sub	sp, #28
 8005b6a:	af00      	add	r7, sp, #0
 8005b6c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005b72:	693b      	ldr	r3, [r7, #16]
 8005b74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b78:	689b      	ldr	r3, [r3, #8]
 8005b7a:	f003 0306 	and.w	r3, r3, #6
 8005b7e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d102      	bne.n	8005b8c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005b86:	2300      	movs	r3, #0
 8005b88:	75fb      	strb	r3, [r7, #23]
 8005b8a:	e00a      	b.n	8005ba2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	2b02      	cmp	r3, #2
 8005b90:	d002      	beq.n	8005b98 <USB_GetDevSpeed+0x32>
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	2b06      	cmp	r3, #6
 8005b96:	d102      	bne.n	8005b9e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005b98:	2302      	movs	r3, #2
 8005b9a:	75fb      	strb	r3, [r7, #23]
 8005b9c:	e001      	b.n	8005ba2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005b9e:	230f      	movs	r3, #15
 8005ba0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005ba2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	371c      	adds	r7, #28
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bae:	4770      	bx	lr

08005bb0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	b085      	sub	sp, #20
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
 8005bb8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	781b      	ldrb	r3, [r3, #0]
 8005bc2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	785b      	ldrb	r3, [r3, #1]
 8005bc8:	2b01      	cmp	r3, #1
 8005bca:	d13a      	bne.n	8005c42 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bd2:	69da      	ldr	r2, [r3, #28]
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	781b      	ldrb	r3, [r3, #0]
 8005bd8:	f003 030f 	and.w	r3, r3, #15
 8005bdc:	2101      	movs	r1, #1
 8005bde:	fa01 f303 	lsl.w	r3, r1, r3
 8005be2:	b29b      	uxth	r3, r3
 8005be4:	68f9      	ldr	r1, [r7, #12]
 8005be6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005bea:	4313      	orrs	r3, r2
 8005bec:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005bee:	68bb      	ldr	r3, [r7, #8]
 8005bf0:	015a      	lsls	r2, r3, #5
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	4413      	add	r3, r2
 8005bf6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d155      	bne.n	8005cb0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	015a      	lsls	r2, r3, #5
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	4413      	add	r3, r2
 8005c0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c10:	681a      	ldr	r2, [r3, #0]
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	68db      	ldr	r3, [r3, #12]
 8005c16:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	791b      	ldrb	r3, [r3, #4]
 8005c1e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005c20:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	059b      	lsls	r3, r3, #22
 8005c26:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005c28:	4313      	orrs	r3, r2
 8005c2a:	68ba      	ldr	r2, [r7, #8]
 8005c2c:	0151      	lsls	r1, r2, #5
 8005c2e:	68fa      	ldr	r2, [r7, #12]
 8005c30:	440a      	add	r2, r1
 8005c32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c3e:	6013      	str	r3, [r2, #0]
 8005c40:	e036      	b.n	8005cb0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c48:	69da      	ldr	r2, [r3, #28]
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	781b      	ldrb	r3, [r3, #0]
 8005c4e:	f003 030f 	and.w	r3, r3, #15
 8005c52:	2101      	movs	r1, #1
 8005c54:	fa01 f303 	lsl.w	r3, r1, r3
 8005c58:	041b      	lsls	r3, r3, #16
 8005c5a:	68f9      	ldr	r1, [r7, #12]
 8005c5c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c60:	4313      	orrs	r3, r2
 8005c62:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	015a      	lsls	r2, r3, #5
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	4413      	add	r3, r2
 8005c6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d11a      	bne.n	8005cb0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	015a      	lsls	r2, r3, #5
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	4413      	add	r3, r2
 8005c82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c86:	681a      	ldr	r2, [r3, #0]
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	68db      	ldr	r3, [r3, #12]
 8005c8c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	791b      	ldrb	r3, [r3, #4]
 8005c94:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005c96:	430b      	orrs	r3, r1
 8005c98:	4313      	orrs	r3, r2
 8005c9a:	68ba      	ldr	r2, [r7, #8]
 8005c9c:	0151      	lsls	r1, r2, #5
 8005c9e:	68fa      	ldr	r2, [r7, #12]
 8005ca0:	440a      	add	r2, r1
 8005ca2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ca6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005caa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cae:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005cb0:	2300      	movs	r3, #0
}
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	3714      	adds	r7, #20
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbc:	4770      	bx	lr
	...

08005cc0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	b085      	sub	sp, #20
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
 8005cc8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	781b      	ldrb	r3, [r3, #0]
 8005cd2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	785b      	ldrb	r3, [r3, #1]
 8005cd8:	2b01      	cmp	r3, #1
 8005cda:	d161      	bne.n	8005da0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	015a      	lsls	r2, r3, #5
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	4413      	add	r3, r2
 8005ce4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005cee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005cf2:	d11f      	bne.n	8005d34 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	015a      	lsls	r2, r3, #5
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	4413      	add	r3, r2
 8005cfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	68ba      	ldr	r2, [r7, #8]
 8005d04:	0151      	lsls	r1, r2, #5
 8005d06:	68fa      	ldr	r2, [r7, #12]
 8005d08:	440a      	add	r2, r1
 8005d0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d0e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005d12:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	015a      	lsls	r2, r3, #5
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	4413      	add	r3, r2
 8005d1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	68ba      	ldr	r2, [r7, #8]
 8005d24:	0151      	lsls	r1, r2, #5
 8005d26:	68fa      	ldr	r2, [r7, #12]
 8005d28:	440a      	add	r2, r1
 8005d2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d2e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005d32:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	781b      	ldrb	r3, [r3, #0]
 8005d40:	f003 030f 	and.w	r3, r3, #15
 8005d44:	2101      	movs	r1, #1
 8005d46:	fa01 f303 	lsl.w	r3, r1, r3
 8005d4a:	b29b      	uxth	r3, r3
 8005d4c:	43db      	mvns	r3, r3
 8005d4e:	68f9      	ldr	r1, [r7, #12]
 8005d50:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d54:	4013      	ands	r3, r2
 8005d56:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d5e:	69da      	ldr	r2, [r3, #28]
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	781b      	ldrb	r3, [r3, #0]
 8005d64:	f003 030f 	and.w	r3, r3, #15
 8005d68:	2101      	movs	r1, #1
 8005d6a:	fa01 f303 	lsl.w	r3, r1, r3
 8005d6e:	b29b      	uxth	r3, r3
 8005d70:	43db      	mvns	r3, r3
 8005d72:	68f9      	ldr	r1, [r7, #12]
 8005d74:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d78:	4013      	ands	r3, r2
 8005d7a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	015a      	lsls	r2, r3, #5
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	4413      	add	r3, r2
 8005d84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d88:	681a      	ldr	r2, [r3, #0]
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	0159      	lsls	r1, r3, #5
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	440b      	add	r3, r1
 8005d92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d96:	4619      	mov	r1, r3
 8005d98:	4b35      	ldr	r3, [pc, #212]	; (8005e70 <USB_DeactivateEndpoint+0x1b0>)
 8005d9a:	4013      	ands	r3, r2
 8005d9c:	600b      	str	r3, [r1, #0]
 8005d9e:	e060      	b.n	8005e62 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	015a      	lsls	r2, r3, #5
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	4413      	add	r3, r2
 8005da8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005db2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005db6:	d11f      	bne.n	8005df8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	015a      	lsls	r2, r3, #5
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	4413      	add	r3, r2
 8005dc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	68ba      	ldr	r2, [r7, #8]
 8005dc8:	0151      	lsls	r1, r2, #5
 8005dca:	68fa      	ldr	r2, [r7, #12]
 8005dcc:	440a      	add	r2, r1
 8005dce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005dd2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005dd6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	015a      	lsls	r2, r3, #5
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	4413      	add	r3, r2
 8005de0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	68ba      	ldr	r2, [r7, #8]
 8005de8:	0151      	lsls	r1, r2, #5
 8005dea:	68fa      	ldr	r2, [r7, #12]
 8005dec:	440a      	add	r2, r1
 8005dee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005df2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005df6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dfe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	781b      	ldrb	r3, [r3, #0]
 8005e04:	f003 030f 	and.w	r3, r3, #15
 8005e08:	2101      	movs	r1, #1
 8005e0a:	fa01 f303 	lsl.w	r3, r1, r3
 8005e0e:	041b      	lsls	r3, r3, #16
 8005e10:	43db      	mvns	r3, r3
 8005e12:	68f9      	ldr	r1, [r7, #12]
 8005e14:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005e18:	4013      	ands	r3, r2
 8005e1a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e22:	69da      	ldr	r2, [r3, #28]
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	781b      	ldrb	r3, [r3, #0]
 8005e28:	f003 030f 	and.w	r3, r3, #15
 8005e2c:	2101      	movs	r1, #1
 8005e2e:	fa01 f303 	lsl.w	r3, r1, r3
 8005e32:	041b      	lsls	r3, r3, #16
 8005e34:	43db      	mvns	r3, r3
 8005e36:	68f9      	ldr	r1, [r7, #12]
 8005e38:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005e3c:	4013      	ands	r3, r2
 8005e3e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	015a      	lsls	r2, r3, #5
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	4413      	add	r3, r2
 8005e48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e4c:	681a      	ldr	r2, [r3, #0]
 8005e4e:	68bb      	ldr	r3, [r7, #8]
 8005e50:	0159      	lsls	r1, r3, #5
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	440b      	add	r3, r1
 8005e56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e5a:	4619      	mov	r1, r3
 8005e5c:	4b05      	ldr	r3, [pc, #20]	; (8005e74 <USB_DeactivateEndpoint+0x1b4>)
 8005e5e:	4013      	ands	r3, r2
 8005e60:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005e62:	2300      	movs	r3, #0
}
 8005e64:	4618      	mov	r0, r3
 8005e66:	3714      	adds	r7, #20
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6e:	4770      	bx	lr
 8005e70:	ec337800 	.word	0xec337800
 8005e74:	eff37800 	.word	0xeff37800

08005e78 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b08a      	sub	sp, #40	; 0x28
 8005e7c:	af02      	add	r7, sp, #8
 8005e7e:	60f8      	str	r0, [r7, #12]
 8005e80:	60b9      	str	r1, [r7, #8]
 8005e82:	4613      	mov	r3, r2
 8005e84:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005e8a:	68bb      	ldr	r3, [r7, #8]
 8005e8c:	781b      	ldrb	r3, [r3, #0]
 8005e8e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	785b      	ldrb	r3, [r3, #1]
 8005e94:	2b01      	cmp	r3, #1
 8005e96:	f040 815c 	bne.w	8006152 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	699b      	ldr	r3, [r3, #24]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d132      	bne.n	8005f08 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005ea2:	69bb      	ldr	r3, [r7, #24]
 8005ea4:	015a      	lsls	r2, r3, #5
 8005ea6:	69fb      	ldr	r3, [r7, #28]
 8005ea8:	4413      	add	r3, r2
 8005eaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005eae:	691b      	ldr	r3, [r3, #16]
 8005eb0:	69ba      	ldr	r2, [r7, #24]
 8005eb2:	0151      	lsls	r1, r2, #5
 8005eb4:	69fa      	ldr	r2, [r7, #28]
 8005eb6:	440a      	add	r2, r1
 8005eb8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ebc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005ec0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005ec4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005ec6:	69bb      	ldr	r3, [r7, #24]
 8005ec8:	015a      	lsls	r2, r3, #5
 8005eca:	69fb      	ldr	r3, [r7, #28]
 8005ecc:	4413      	add	r3, r2
 8005ece:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ed2:	691b      	ldr	r3, [r3, #16]
 8005ed4:	69ba      	ldr	r2, [r7, #24]
 8005ed6:	0151      	lsls	r1, r2, #5
 8005ed8:	69fa      	ldr	r2, [r7, #28]
 8005eda:	440a      	add	r2, r1
 8005edc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ee0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005ee4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005ee6:	69bb      	ldr	r3, [r7, #24]
 8005ee8:	015a      	lsls	r2, r3, #5
 8005eea:	69fb      	ldr	r3, [r7, #28]
 8005eec:	4413      	add	r3, r2
 8005eee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ef2:	691b      	ldr	r3, [r3, #16]
 8005ef4:	69ba      	ldr	r2, [r7, #24]
 8005ef6:	0151      	lsls	r1, r2, #5
 8005ef8:	69fa      	ldr	r2, [r7, #28]
 8005efa:	440a      	add	r2, r1
 8005efc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f00:	0cdb      	lsrs	r3, r3, #19
 8005f02:	04db      	lsls	r3, r3, #19
 8005f04:	6113      	str	r3, [r2, #16]
 8005f06:	e074      	b.n	8005ff2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005f08:	69bb      	ldr	r3, [r7, #24]
 8005f0a:	015a      	lsls	r2, r3, #5
 8005f0c:	69fb      	ldr	r3, [r7, #28]
 8005f0e:	4413      	add	r3, r2
 8005f10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f14:	691b      	ldr	r3, [r3, #16]
 8005f16:	69ba      	ldr	r2, [r7, #24]
 8005f18:	0151      	lsls	r1, r2, #5
 8005f1a:	69fa      	ldr	r2, [r7, #28]
 8005f1c:	440a      	add	r2, r1
 8005f1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f22:	0cdb      	lsrs	r3, r3, #19
 8005f24:	04db      	lsls	r3, r3, #19
 8005f26:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005f28:	69bb      	ldr	r3, [r7, #24]
 8005f2a:	015a      	lsls	r2, r3, #5
 8005f2c:	69fb      	ldr	r3, [r7, #28]
 8005f2e:	4413      	add	r3, r2
 8005f30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f34:	691b      	ldr	r3, [r3, #16]
 8005f36:	69ba      	ldr	r2, [r7, #24]
 8005f38:	0151      	lsls	r1, r2, #5
 8005f3a:	69fa      	ldr	r2, [r7, #28]
 8005f3c:	440a      	add	r2, r1
 8005f3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f42:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005f46:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005f4a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005f4c:	69bb      	ldr	r3, [r7, #24]
 8005f4e:	015a      	lsls	r2, r3, #5
 8005f50:	69fb      	ldr	r3, [r7, #28]
 8005f52:	4413      	add	r3, r2
 8005f54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f58:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005f5a:	68bb      	ldr	r3, [r7, #8]
 8005f5c:	6999      	ldr	r1, [r3, #24]
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	68db      	ldr	r3, [r3, #12]
 8005f62:	440b      	add	r3, r1
 8005f64:	1e59      	subs	r1, r3, #1
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	68db      	ldr	r3, [r3, #12]
 8005f6a:	fbb1 f3f3 	udiv	r3, r1, r3
 8005f6e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005f70:	4b9d      	ldr	r3, [pc, #628]	; (80061e8 <USB_EPStartXfer+0x370>)
 8005f72:	400b      	ands	r3, r1
 8005f74:	69b9      	ldr	r1, [r7, #24]
 8005f76:	0148      	lsls	r0, r1, #5
 8005f78:	69f9      	ldr	r1, [r7, #28]
 8005f7a:	4401      	add	r1, r0
 8005f7c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005f80:	4313      	orrs	r3, r2
 8005f82:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005f84:	69bb      	ldr	r3, [r7, #24]
 8005f86:	015a      	lsls	r2, r3, #5
 8005f88:	69fb      	ldr	r3, [r7, #28]
 8005f8a:	4413      	add	r3, r2
 8005f8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f90:	691a      	ldr	r2, [r3, #16]
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	699b      	ldr	r3, [r3, #24]
 8005f96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f9a:	69b9      	ldr	r1, [r7, #24]
 8005f9c:	0148      	lsls	r0, r1, #5
 8005f9e:	69f9      	ldr	r1, [r7, #28]
 8005fa0:	4401      	add	r1, r0
 8005fa2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	791b      	ldrb	r3, [r3, #4]
 8005fae:	2b01      	cmp	r3, #1
 8005fb0:	d11f      	bne.n	8005ff2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005fb2:	69bb      	ldr	r3, [r7, #24]
 8005fb4:	015a      	lsls	r2, r3, #5
 8005fb6:	69fb      	ldr	r3, [r7, #28]
 8005fb8:	4413      	add	r3, r2
 8005fba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fbe:	691b      	ldr	r3, [r3, #16]
 8005fc0:	69ba      	ldr	r2, [r7, #24]
 8005fc2:	0151      	lsls	r1, r2, #5
 8005fc4:	69fa      	ldr	r2, [r7, #28]
 8005fc6:	440a      	add	r2, r1
 8005fc8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fcc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005fd0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005fd2:	69bb      	ldr	r3, [r7, #24]
 8005fd4:	015a      	lsls	r2, r3, #5
 8005fd6:	69fb      	ldr	r3, [r7, #28]
 8005fd8:	4413      	add	r3, r2
 8005fda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fde:	691b      	ldr	r3, [r3, #16]
 8005fe0:	69ba      	ldr	r2, [r7, #24]
 8005fe2:	0151      	lsls	r1, r2, #5
 8005fe4:	69fa      	ldr	r2, [r7, #28]
 8005fe6:	440a      	add	r2, r1
 8005fe8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fec:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005ff0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005ff2:	79fb      	ldrb	r3, [r7, #7]
 8005ff4:	2b01      	cmp	r3, #1
 8005ff6:	d14b      	bne.n	8006090 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	695b      	ldr	r3, [r3, #20]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d009      	beq.n	8006014 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006000:	69bb      	ldr	r3, [r7, #24]
 8006002:	015a      	lsls	r2, r3, #5
 8006004:	69fb      	ldr	r3, [r7, #28]
 8006006:	4413      	add	r3, r2
 8006008:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800600c:	461a      	mov	r2, r3
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	695b      	ldr	r3, [r3, #20]
 8006012:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	791b      	ldrb	r3, [r3, #4]
 8006018:	2b01      	cmp	r3, #1
 800601a:	d128      	bne.n	800606e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800601c:	69fb      	ldr	r3, [r7, #28]
 800601e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006022:	689b      	ldr	r3, [r3, #8]
 8006024:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006028:	2b00      	cmp	r3, #0
 800602a:	d110      	bne.n	800604e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800602c:	69bb      	ldr	r3, [r7, #24]
 800602e:	015a      	lsls	r2, r3, #5
 8006030:	69fb      	ldr	r3, [r7, #28]
 8006032:	4413      	add	r3, r2
 8006034:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	69ba      	ldr	r2, [r7, #24]
 800603c:	0151      	lsls	r1, r2, #5
 800603e:	69fa      	ldr	r2, [r7, #28]
 8006040:	440a      	add	r2, r1
 8006042:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006046:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800604a:	6013      	str	r3, [r2, #0]
 800604c:	e00f      	b.n	800606e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800604e:	69bb      	ldr	r3, [r7, #24]
 8006050:	015a      	lsls	r2, r3, #5
 8006052:	69fb      	ldr	r3, [r7, #28]
 8006054:	4413      	add	r3, r2
 8006056:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	69ba      	ldr	r2, [r7, #24]
 800605e:	0151      	lsls	r1, r2, #5
 8006060:	69fa      	ldr	r2, [r7, #28]
 8006062:	440a      	add	r2, r1
 8006064:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006068:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800606c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800606e:	69bb      	ldr	r3, [r7, #24]
 8006070:	015a      	lsls	r2, r3, #5
 8006072:	69fb      	ldr	r3, [r7, #28]
 8006074:	4413      	add	r3, r2
 8006076:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	69ba      	ldr	r2, [r7, #24]
 800607e:	0151      	lsls	r1, r2, #5
 8006080:	69fa      	ldr	r2, [r7, #28]
 8006082:	440a      	add	r2, r1
 8006084:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006088:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800608c:	6013      	str	r3, [r2, #0]
 800608e:	e133      	b.n	80062f8 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006090:	69bb      	ldr	r3, [r7, #24]
 8006092:	015a      	lsls	r2, r3, #5
 8006094:	69fb      	ldr	r3, [r7, #28]
 8006096:	4413      	add	r3, r2
 8006098:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	69ba      	ldr	r2, [r7, #24]
 80060a0:	0151      	lsls	r1, r2, #5
 80060a2:	69fa      	ldr	r2, [r7, #28]
 80060a4:	440a      	add	r2, r1
 80060a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060aa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80060ae:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	791b      	ldrb	r3, [r3, #4]
 80060b4:	2b01      	cmp	r3, #1
 80060b6:	d015      	beq.n	80060e4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80060b8:	68bb      	ldr	r3, [r7, #8]
 80060ba:	699b      	ldr	r3, [r3, #24]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	f000 811b 	beq.w	80062f8 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80060c2:	69fb      	ldr	r3, [r7, #28]
 80060c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80060ca:	68bb      	ldr	r3, [r7, #8]
 80060cc:	781b      	ldrb	r3, [r3, #0]
 80060ce:	f003 030f 	and.w	r3, r3, #15
 80060d2:	2101      	movs	r1, #1
 80060d4:	fa01 f303 	lsl.w	r3, r1, r3
 80060d8:	69f9      	ldr	r1, [r7, #28]
 80060da:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80060de:	4313      	orrs	r3, r2
 80060e0:	634b      	str	r3, [r1, #52]	; 0x34
 80060e2:	e109      	b.n	80062f8 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80060e4:	69fb      	ldr	r3, [r7, #28]
 80060e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060ea:	689b      	ldr	r3, [r3, #8]
 80060ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d110      	bne.n	8006116 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80060f4:	69bb      	ldr	r3, [r7, #24]
 80060f6:	015a      	lsls	r2, r3, #5
 80060f8:	69fb      	ldr	r3, [r7, #28]
 80060fa:	4413      	add	r3, r2
 80060fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	69ba      	ldr	r2, [r7, #24]
 8006104:	0151      	lsls	r1, r2, #5
 8006106:	69fa      	ldr	r2, [r7, #28]
 8006108:	440a      	add	r2, r1
 800610a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800610e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006112:	6013      	str	r3, [r2, #0]
 8006114:	e00f      	b.n	8006136 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006116:	69bb      	ldr	r3, [r7, #24]
 8006118:	015a      	lsls	r2, r3, #5
 800611a:	69fb      	ldr	r3, [r7, #28]
 800611c:	4413      	add	r3, r2
 800611e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	69ba      	ldr	r2, [r7, #24]
 8006126:	0151      	lsls	r1, r2, #5
 8006128:	69fa      	ldr	r2, [r7, #28]
 800612a:	440a      	add	r2, r1
 800612c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006130:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006134:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	6919      	ldr	r1, [r3, #16]
 800613a:	68bb      	ldr	r3, [r7, #8]
 800613c:	781a      	ldrb	r2, [r3, #0]
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	699b      	ldr	r3, [r3, #24]
 8006142:	b298      	uxth	r0, r3
 8006144:	79fb      	ldrb	r3, [r7, #7]
 8006146:	9300      	str	r3, [sp, #0]
 8006148:	4603      	mov	r3, r0
 800614a:	68f8      	ldr	r0, [r7, #12]
 800614c:	f000 fade 	bl	800670c <USB_WritePacket>
 8006150:	e0d2      	b.n	80062f8 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006152:	69bb      	ldr	r3, [r7, #24]
 8006154:	015a      	lsls	r2, r3, #5
 8006156:	69fb      	ldr	r3, [r7, #28]
 8006158:	4413      	add	r3, r2
 800615a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800615e:	691b      	ldr	r3, [r3, #16]
 8006160:	69ba      	ldr	r2, [r7, #24]
 8006162:	0151      	lsls	r1, r2, #5
 8006164:	69fa      	ldr	r2, [r7, #28]
 8006166:	440a      	add	r2, r1
 8006168:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800616c:	0cdb      	lsrs	r3, r3, #19
 800616e:	04db      	lsls	r3, r3, #19
 8006170:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006172:	69bb      	ldr	r3, [r7, #24]
 8006174:	015a      	lsls	r2, r3, #5
 8006176:	69fb      	ldr	r3, [r7, #28]
 8006178:	4413      	add	r3, r2
 800617a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800617e:	691b      	ldr	r3, [r3, #16]
 8006180:	69ba      	ldr	r2, [r7, #24]
 8006182:	0151      	lsls	r1, r2, #5
 8006184:	69fa      	ldr	r2, [r7, #28]
 8006186:	440a      	add	r2, r1
 8006188:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800618c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006190:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006194:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	699b      	ldr	r3, [r3, #24]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d126      	bne.n	80061ec <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800619e:	69bb      	ldr	r3, [r7, #24]
 80061a0:	015a      	lsls	r2, r3, #5
 80061a2:	69fb      	ldr	r3, [r7, #28]
 80061a4:	4413      	add	r3, r2
 80061a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061aa:	691a      	ldr	r2, [r3, #16]
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	68db      	ldr	r3, [r3, #12]
 80061b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80061b4:	69b9      	ldr	r1, [r7, #24]
 80061b6:	0148      	lsls	r0, r1, #5
 80061b8:	69f9      	ldr	r1, [r7, #28]
 80061ba:	4401      	add	r1, r0
 80061bc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80061c0:	4313      	orrs	r3, r2
 80061c2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80061c4:	69bb      	ldr	r3, [r7, #24]
 80061c6:	015a      	lsls	r2, r3, #5
 80061c8:	69fb      	ldr	r3, [r7, #28]
 80061ca:	4413      	add	r3, r2
 80061cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061d0:	691b      	ldr	r3, [r3, #16]
 80061d2:	69ba      	ldr	r2, [r7, #24]
 80061d4:	0151      	lsls	r1, r2, #5
 80061d6:	69fa      	ldr	r2, [r7, #28]
 80061d8:	440a      	add	r2, r1
 80061da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061de:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80061e2:	6113      	str	r3, [r2, #16]
 80061e4:	e03a      	b.n	800625c <USB_EPStartXfer+0x3e4>
 80061e6:	bf00      	nop
 80061e8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80061ec:	68bb      	ldr	r3, [r7, #8]
 80061ee:	699a      	ldr	r2, [r3, #24]
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	68db      	ldr	r3, [r3, #12]
 80061f4:	4413      	add	r3, r2
 80061f6:	1e5a      	subs	r2, r3, #1
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	68db      	ldr	r3, [r3, #12]
 80061fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006200:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	68db      	ldr	r3, [r3, #12]
 8006206:	8afa      	ldrh	r2, [r7, #22]
 8006208:	fb03 f202 	mul.w	r2, r3, r2
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006210:	69bb      	ldr	r3, [r7, #24]
 8006212:	015a      	lsls	r2, r3, #5
 8006214:	69fb      	ldr	r3, [r7, #28]
 8006216:	4413      	add	r3, r2
 8006218:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800621c:	691a      	ldr	r2, [r3, #16]
 800621e:	8afb      	ldrh	r3, [r7, #22]
 8006220:	04d9      	lsls	r1, r3, #19
 8006222:	4b38      	ldr	r3, [pc, #224]	; (8006304 <USB_EPStartXfer+0x48c>)
 8006224:	400b      	ands	r3, r1
 8006226:	69b9      	ldr	r1, [r7, #24]
 8006228:	0148      	lsls	r0, r1, #5
 800622a:	69f9      	ldr	r1, [r7, #28]
 800622c:	4401      	add	r1, r0
 800622e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006232:	4313      	orrs	r3, r2
 8006234:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006236:	69bb      	ldr	r3, [r7, #24]
 8006238:	015a      	lsls	r2, r3, #5
 800623a:	69fb      	ldr	r3, [r7, #28]
 800623c:	4413      	add	r3, r2
 800623e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006242:	691a      	ldr	r2, [r3, #16]
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	69db      	ldr	r3, [r3, #28]
 8006248:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800624c:	69b9      	ldr	r1, [r7, #24]
 800624e:	0148      	lsls	r0, r1, #5
 8006250:	69f9      	ldr	r1, [r7, #28]
 8006252:	4401      	add	r1, r0
 8006254:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006258:	4313      	orrs	r3, r2
 800625a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800625c:	79fb      	ldrb	r3, [r7, #7]
 800625e:	2b01      	cmp	r3, #1
 8006260:	d10d      	bne.n	800627e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	691b      	ldr	r3, [r3, #16]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d009      	beq.n	800627e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800626a:	68bb      	ldr	r3, [r7, #8]
 800626c:	6919      	ldr	r1, [r3, #16]
 800626e:	69bb      	ldr	r3, [r7, #24]
 8006270:	015a      	lsls	r2, r3, #5
 8006272:	69fb      	ldr	r3, [r7, #28]
 8006274:	4413      	add	r3, r2
 8006276:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800627a:	460a      	mov	r2, r1
 800627c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	791b      	ldrb	r3, [r3, #4]
 8006282:	2b01      	cmp	r3, #1
 8006284:	d128      	bne.n	80062d8 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006286:	69fb      	ldr	r3, [r7, #28]
 8006288:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800628c:	689b      	ldr	r3, [r3, #8]
 800628e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006292:	2b00      	cmp	r3, #0
 8006294:	d110      	bne.n	80062b8 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006296:	69bb      	ldr	r3, [r7, #24]
 8006298:	015a      	lsls	r2, r3, #5
 800629a:	69fb      	ldr	r3, [r7, #28]
 800629c:	4413      	add	r3, r2
 800629e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	69ba      	ldr	r2, [r7, #24]
 80062a6:	0151      	lsls	r1, r2, #5
 80062a8:	69fa      	ldr	r2, [r7, #28]
 80062aa:	440a      	add	r2, r1
 80062ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062b0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80062b4:	6013      	str	r3, [r2, #0]
 80062b6:	e00f      	b.n	80062d8 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80062b8:	69bb      	ldr	r3, [r7, #24]
 80062ba:	015a      	lsls	r2, r3, #5
 80062bc:	69fb      	ldr	r3, [r7, #28]
 80062be:	4413      	add	r3, r2
 80062c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	69ba      	ldr	r2, [r7, #24]
 80062c8:	0151      	lsls	r1, r2, #5
 80062ca:	69fa      	ldr	r2, [r7, #28]
 80062cc:	440a      	add	r2, r1
 80062ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062d6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80062d8:	69bb      	ldr	r3, [r7, #24]
 80062da:	015a      	lsls	r2, r3, #5
 80062dc:	69fb      	ldr	r3, [r7, #28]
 80062de:	4413      	add	r3, r2
 80062e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	69ba      	ldr	r2, [r7, #24]
 80062e8:	0151      	lsls	r1, r2, #5
 80062ea:	69fa      	ldr	r2, [r7, #28]
 80062ec:	440a      	add	r2, r1
 80062ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062f2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80062f6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80062f8:	2300      	movs	r3, #0
}
 80062fa:	4618      	mov	r0, r3
 80062fc:	3720      	adds	r7, #32
 80062fe:	46bd      	mov	sp, r7
 8006300:	bd80      	pop	{r7, pc}
 8006302:	bf00      	nop
 8006304:	1ff80000 	.word	0x1ff80000

08006308 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006308:	b480      	push	{r7}
 800630a:	b087      	sub	sp, #28
 800630c:	af00      	add	r7, sp, #0
 800630e:	60f8      	str	r0, [r7, #12]
 8006310:	60b9      	str	r1, [r7, #8]
 8006312:	4613      	mov	r3, r2
 8006314:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800631a:	68bb      	ldr	r3, [r7, #8]
 800631c:	781b      	ldrb	r3, [r3, #0]
 800631e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006320:	68bb      	ldr	r3, [r7, #8]
 8006322:	785b      	ldrb	r3, [r3, #1]
 8006324:	2b01      	cmp	r3, #1
 8006326:	f040 80ce 	bne.w	80064c6 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800632a:	68bb      	ldr	r3, [r7, #8]
 800632c:	699b      	ldr	r3, [r3, #24]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d132      	bne.n	8006398 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006332:	693b      	ldr	r3, [r7, #16]
 8006334:	015a      	lsls	r2, r3, #5
 8006336:	697b      	ldr	r3, [r7, #20]
 8006338:	4413      	add	r3, r2
 800633a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800633e:	691b      	ldr	r3, [r3, #16]
 8006340:	693a      	ldr	r2, [r7, #16]
 8006342:	0151      	lsls	r1, r2, #5
 8006344:	697a      	ldr	r2, [r7, #20]
 8006346:	440a      	add	r2, r1
 8006348:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800634c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006350:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006354:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006356:	693b      	ldr	r3, [r7, #16]
 8006358:	015a      	lsls	r2, r3, #5
 800635a:	697b      	ldr	r3, [r7, #20]
 800635c:	4413      	add	r3, r2
 800635e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006362:	691b      	ldr	r3, [r3, #16]
 8006364:	693a      	ldr	r2, [r7, #16]
 8006366:	0151      	lsls	r1, r2, #5
 8006368:	697a      	ldr	r2, [r7, #20]
 800636a:	440a      	add	r2, r1
 800636c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006370:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006374:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006376:	693b      	ldr	r3, [r7, #16]
 8006378:	015a      	lsls	r2, r3, #5
 800637a:	697b      	ldr	r3, [r7, #20]
 800637c:	4413      	add	r3, r2
 800637e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006382:	691b      	ldr	r3, [r3, #16]
 8006384:	693a      	ldr	r2, [r7, #16]
 8006386:	0151      	lsls	r1, r2, #5
 8006388:	697a      	ldr	r2, [r7, #20]
 800638a:	440a      	add	r2, r1
 800638c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006390:	0cdb      	lsrs	r3, r3, #19
 8006392:	04db      	lsls	r3, r3, #19
 8006394:	6113      	str	r3, [r2, #16]
 8006396:	e04e      	b.n	8006436 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006398:	693b      	ldr	r3, [r7, #16]
 800639a:	015a      	lsls	r2, r3, #5
 800639c:	697b      	ldr	r3, [r7, #20]
 800639e:	4413      	add	r3, r2
 80063a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063a4:	691b      	ldr	r3, [r3, #16]
 80063a6:	693a      	ldr	r2, [r7, #16]
 80063a8:	0151      	lsls	r1, r2, #5
 80063aa:	697a      	ldr	r2, [r7, #20]
 80063ac:	440a      	add	r2, r1
 80063ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063b2:	0cdb      	lsrs	r3, r3, #19
 80063b4:	04db      	lsls	r3, r3, #19
 80063b6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80063b8:	693b      	ldr	r3, [r7, #16]
 80063ba:	015a      	lsls	r2, r3, #5
 80063bc:	697b      	ldr	r3, [r7, #20]
 80063be:	4413      	add	r3, r2
 80063c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063c4:	691b      	ldr	r3, [r3, #16]
 80063c6:	693a      	ldr	r2, [r7, #16]
 80063c8:	0151      	lsls	r1, r2, #5
 80063ca:	697a      	ldr	r2, [r7, #20]
 80063cc:	440a      	add	r2, r1
 80063ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063d2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80063d6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80063da:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	699a      	ldr	r2, [r3, #24]
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	68db      	ldr	r3, [r3, #12]
 80063e4:	429a      	cmp	r2, r3
 80063e6:	d903      	bls.n	80063f0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80063e8:	68bb      	ldr	r3, [r7, #8]
 80063ea:	68da      	ldr	r2, [r3, #12]
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80063f0:	693b      	ldr	r3, [r7, #16]
 80063f2:	015a      	lsls	r2, r3, #5
 80063f4:	697b      	ldr	r3, [r7, #20]
 80063f6:	4413      	add	r3, r2
 80063f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063fc:	691b      	ldr	r3, [r3, #16]
 80063fe:	693a      	ldr	r2, [r7, #16]
 8006400:	0151      	lsls	r1, r2, #5
 8006402:	697a      	ldr	r2, [r7, #20]
 8006404:	440a      	add	r2, r1
 8006406:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800640a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800640e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006410:	693b      	ldr	r3, [r7, #16]
 8006412:	015a      	lsls	r2, r3, #5
 8006414:	697b      	ldr	r3, [r7, #20]
 8006416:	4413      	add	r3, r2
 8006418:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800641c:	691a      	ldr	r2, [r3, #16]
 800641e:	68bb      	ldr	r3, [r7, #8]
 8006420:	699b      	ldr	r3, [r3, #24]
 8006422:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006426:	6939      	ldr	r1, [r7, #16]
 8006428:	0148      	lsls	r0, r1, #5
 800642a:	6979      	ldr	r1, [r7, #20]
 800642c:	4401      	add	r1, r0
 800642e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006432:	4313      	orrs	r3, r2
 8006434:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006436:	79fb      	ldrb	r3, [r7, #7]
 8006438:	2b01      	cmp	r3, #1
 800643a:	d11e      	bne.n	800647a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	695b      	ldr	r3, [r3, #20]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d009      	beq.n	8006458 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006444:	693b      	ldr	r3, [r7, #16]
 8006446:	015a      	lsls	r2, r3, #5
 8006448:	697b      	ldr	r3, [r7, #20]
 800644a:	4413      	add	r3, r2
 800644c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006450:	461a      	mov	r2, r3
 8006452:	68bb      	ldr	r3, [r7, #8]
 8006454:	695b      	ldr	r3, [r3, #20]
 8006456:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006458:	693b      	ldr	r3, [r7, #16]
 800645a:	015a      	lsls	r2, r3, #5
 800645c:	697b      	ldr	r3, [r7, #20]
 800645e:	4413      	add	r3, r2
 8006460:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	693a      	ldr	r2, [r7, #16]
 8006468:	0151      	lsls	r1, r2, #5
 800646a:	697a      	ldr	r2, [r7, #20]
 800646c:	440a      	add	r2, r1
 800646e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006472:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006476:	6013      	str	r3, [r2, #0]
 8006478:	e097      	b.n	80065aa <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800647a:	693b      	ldr	r3, [r7, #16]
 800647c:	015a      	lsls	r2, r3, #5
 800647e:	697b      	ldr	r3, [r7, #20]
 8006480:	4413      	add	r3, r2
 8006482:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	693a      	ldr	r2, [r7, #16]
 800648a:	0151      	lsls	r1, r2, #5
 800648c:	697a      	ldr	r2, [r7, #20]
 800648e:	440a      	add	r2, r1
 8006490:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006494:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006498:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	699b      	ldr	r3, [r3, #24]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	f000 8083 	beq.w	80065aa <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80064a4:	697b      	ldr	r3, [r7, #20]
 80064a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	781b      	ldrb	r3, [r3, #0]
 80064b0:	f003 030f 	and.w	r3, r3, #15
 80064b4:	2101      	movs	r1, #1
 80064b6:	fa01 f303 	lsl.w	r3, r1, r3
 80064ba:	6979      	ldr	r1, [r7, #20]
 80064bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80064c0:	4313      	orrs	r3, r2
 80064c2:	634b      	str	r3, [r1, #52]	; 0x34
 80064c4:	e071      	b.n	80065aa <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80064c6:	693b      	ldr	r3, [r7, #16]
 80064c8:	015a      	lsls	r2, r3, #5
 80064ca:	697b      	ldr	r3, [r7, #20]
 80064cc:	4413      	add	r3, r2
 80064ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064d2:	691b      	ldr	r3, [r3, #16]
 80064d4:	693a      	ldr	r2, [r7, #16]
 80064d6:	0151      	lsls	r1, r2, #5
 80064d8:	697a      	ldr	r2, [r7, #20]
 80064da:	440a      	add	r2, r1
 80064dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064e0:	0cdb      	lsrs	r3, r3, #19
 80064e2:	04db      	lsls	r3, r3, #19
 80064e4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80064e6:	693b      	ldr	r3, [r7, #16]
 80064e8:	015a      	lsls	r2, r3, #5
 80064ea:	697b      	ldr	r3, [r7, #20]
 80064ec:	4413      	add	r3, r2
 80064ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064f2:	691b      	ldr	r3, [r3, #16]
 80064f4:	693a      	ldr	r2, [r7, #16]
 80064f6:	0151      	lsls	r1, r2, #5
 80064f8:	697a      	ldr	r2, [r7, #20]
 80064fa:	440a      	add	r2, r1
 80064fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006500:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006504:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006508:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800650a:	68bb      	ldr	r3, [r7, #8]
 800650c:	699b      	ldr	r3, [r3, #24]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d003      	beq.n	800651a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	68da      	ldr	r2, [r3, #12]
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800651a:	68bb      	ldr	r3, [r7, #8]
 800651c:	68da      	ldr	r2, [r3, #12]
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006522:	693b      	ldr	r3, [r7, #16]
 8006524:	015a      	lsls	r2, r3, #5
 8006526:	697b      	ldr	r3, [r7, #20]
 8006528:	4413      	add	r3, r2
 800652a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800652e:	691b      	ldr	r3, [r3, #16]
 8006530:	693a      	ldr	r2, [r7, #16]
 8006532:	0151      	lsls	r1, r2, #5
 8006534:	697a      	ldr	r2, [r7, #20]
 8006536:	440a      	add	r2, r1
 8006538:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800653c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006540:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006542:	693b      	ldr	r3, [r7, #16]
 8006544:	015a      	lsls	r2, r3, #5
 8006546:	697b      	ldr	r3, [r7, #20]
 8006548:	4413      	add	r3, r2
 800654a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800654e:	691a      	ldr	r2, [r3, #16]
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	69db      	ldr	r3, [r3, #28]
 8006554:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006558:	6939      	ldr	r1, [r7, #16]
 800655a:	0148      	lsls	r0, r1, #5
 800655c:	6979      	ldr	r1, [r7, #20]
 800655e:	4401      	add	r1, r0
 8006560:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006564:	4313      	orrs	r3, r2
 8006566:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006568:	79fb      	ldrb	r3, [r7, #7]
 800656a:	2b01      	cmp	r3, #1
 800656c:	d10d      	bne.n	800658a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	691b      	ldr	r3, [r3, #16]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d009      	beq.n	800658a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006576:	68bb      	ldr	r3, [r7, #8]
 8006578:	6919      	ldr	r1, [r3, #16]
 800657a:	693b      	ldr	r3, [r7, #16]
 800657c:	015a      	lsls	r2, r3, #5
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	4413      	add	r3, r2
 8006582:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006586:	460a      	mov	r2, r1
 8006588:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800658a:	693b      	ldr	r3, [r7, #16]
 800658c:	015a      	lsls	r2, r3, #5
 800658e:	697b      	ldr	r3, [r7, #20]
 8006590:	4413      	add	r3, r2
 8006592:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	693a      	ldr	r2, [r7, #16]
 800659a:	0151      	lsls	r1, r2, #5
 800659c:	697a      	ldr	r2, [r7, #20]
 800659e:	440a      	add	r2, r1
 80065a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065a4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80065a8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80065aa:	2300      	movs	r3, #0
}
 80065ac:	4618      	mov	r0, r3
 80065ae:	371c      	adds	r7, #28
 80065b0:	46bd      	mov	sp, r7
 80065b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b6:	4770      	bx	lr

080065b8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80065b8:	b480      	push	{r7}
 80065ba:	b087      	sub	sp, #28
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
 80065c0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80065c2:	2300      	movs	r3, #0
 80065c4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80065c6:	2300      	movs	r3, #0
 80065c8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	785b      	ldrb	r3, [r3, #1]
 80065d2:	2b01      	cmp	r3, #1
 80065d4:	d14a      	bne.n	800666c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	781b      	ldrb	r3, [r3, #0]
 80065da:	015a      	lsls	r2, r3, #5
 80065dc:	693b      	ldr	r3, [r7, #16]
 80065de:	4413      	add	r3, r2
 80065e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80065ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80065ee:	f040 8086 	bne.w	80066fe <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	781b      	ldrb	r3, [r3, #0]
 80065f6:	015a      	lsls	r2, r3, #5
 80065f8:	693b      	ldr	r3, [r7, #16]
 80065fa:	4413      	add	r3, r2
 80065fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	683a      	ldr	r2, [r7, #0]
 8006604:	7812      	ldrb	r2, [r2, #0]
 8006606:	0151      	lsls	r1, r2, #5
 8006608:	693a      	ldr	r2, [r7, #16]
 800660a:	440a      	add	r2, r1
 800660c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006610:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006614:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	781b      	ldrb	r3, [r3, #0]
 800661a:	015a      	lsls	r2, r3, #5
 800661c:	693b      	ldr	r3, [r7, #16]
 800661e:	4413      	add	r3, r2
 8006620:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	683a      	ldr	r2, [r7, #0]
 8006628:	7812      	ldrb	r2, [r2, #0]
 800662a:	0151      	lsls	r1, r2, #5
 800662c:	693a      	ldr	r2, [r7, #16]
 800662e:	440a      	add	r2, r1
 8006630:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006634:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006638:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	3301      	adds	r3, #1
 800663e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	f242 7210 	movw	r2, #10000	; 0x2710
 8006646:	4293      	cmp	r3, r2
 8006648:	d902      	bls.n	8006650 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800664a:	2301      	movs	r3, #1
 800664c:	75fb      	strb	r3, [r7, #23]
          break;
 800664e:	e056      	b.n	80066fe <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	781b      	ldrb	r3, [r3, #0]
 8006654:	015a      	lsls	r2, r3, #5
 8006656:	693b      	ldr	r3, [r7, #16]
 8006658:	4413      	add	r3, r2
 800665a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006664:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006668:	d0e7      	beq.n	800663a <USB_EPStopXfer+0x82>
 800666a:	e048      	b.n	80066fe <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	781b      	ldrb	r3, [r3, #0]
 8006670:	015a      	lsls	r2, r3, #5
 8006672:	693b      	ldr	r3, [r7, #16]
 8006674:	4413      	add	r3, r2
 8006676:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006680:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006684:	d13b      	bne.n	80066fe <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	781b      	ldrb	r3, [r3, #0]
 800668a:	015a      	lsls	r2, r3, #5
 800668c:	693b      	ldr	r3, [r7, #16]
 800668e:	4413      	add	r3, r2
 8006690:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	683a      	ldr	r2, [r7, #0]
 8006698:	7812      	ldrb	r2, [r2, #0]
 800669a:	0151      	lsls	r1, r2, #5
 800669c:	693a      	ldr	r2, [r7, #16]
 800669e:	440a      	add	r2, r1
 80066a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80066a4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80066a8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	781b      	ldrb	r3, [r3, #0]
 80066ae:	015a      	lsls	r2, r3, #5
 80066b0:	693b      	ldr	r3, [r7, #16]
 80066b2:	4413      	add	r3, r2
 80066b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	683a      	ldr	r2, [r7, #0]
 80066bc:	7812      	ldrb	r2, [r2, #0]
 80066be:	0151      	lsls	r1, r2, #5
 80066c0:	693a      	ldr	r2, [r7, #16]
 80066c2:	440a      	add	r2, r1
 80066c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80066c8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80066cc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	3301      	adds	r3, #1
 80066d2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	f242 7210 	movw	r2, #10000	; 0x2710
 80066da:	4293      	cmp	r3, r2
 80066dc:	d902      	bls.n	80066e4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80066de:	2301      	movs	r3, #1
 80066e0:	75fb      	strb	r3, [r7, #23]
          break;
 80066e2:	e00c      	b.n	80066fe <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	781b      	ldrb	r3, [r3, #0]
 80066e8:	015a      	lsls	r2, r3, #5
 80066ea:	693b      	ldr	r3, [r7, #16]
 80066ec:	4413      	add	r3, r2
 80066ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80066f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80066fc:	d0e7      	beq.n	80066ce <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80066fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8006700:	4618      	mov	r0, r3
 8006702:	371c      	adds	r7, #28
 8006704:	46bd      	mov	sp, r7
 8006706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670a:	4770      	bx	lr

0800670c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800670c:	b480      	push	{r7}
 800670e:	b089      	sub	sp, #36	; 0x24
 8006710:	af00      	add	r7, sp, #0
 8006712:	60f8      	str	r0, [r7, #12]
 8006714:	60b9      	str	r1, [r7, #8]
 8006716:	4611      	mov	r1, r2
 8006718:	461a      	mov	r2, r3
 800671a:	460b      	mov	r3, r1
 800671c:	71fb      	strb	r3, [r7, #7]
 800671e:	4613      	mov	r3, r2
 8006720:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006726:	68bb      	ldr	r3, [r7, #8]
 8006728:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800672a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800672e:	2b00      	cmp	r3, #0
 8006730:	d123      	bne.n	800677a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006732:	88bb      	ldrh	r3, [r7, #4]
 8006734:	3303      	adds	r3, #3
 8006736:	089b      	lsrs	r3, r3, #2
 8006738:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800673a:	2300      	movs	r3, #0
 800673c:	61bb      	str	r3, [r7, #24]
 800673e:	e018      	b.n	8006772 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006740:	79fb      	ldrb	r3, [r7, #7]
 8006742:	031a      	lsls	r2, r3, #12
 8006744:	697b      	ldr	r3, [r7, #20]
 8006746:	4413      	add	r3, r2
 8006748:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800674c:	461a      	mov	r2, r3
 800674e:	69fb      	ldr	r3, [r7, #28]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006754:	69fb      	ldr	r3, [r7, #28]
 8006756:	3301      	adds	r3, #1
 8006758:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800675a:	69fb      	ldr	r3, [r7, #28]
 800675c:	3301      	adds	r3, #1
 800675e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006760:	69fb      	ldr	r3, [r7, #28]
 8006762:	3301      	adds	r3, #1
 8006764:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006766:	69fb      	ldr	r3, [r7, #28]
 8006768:	3301      	adds	r3, #1
 800676a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800676c:	69bb      	ldr	r3, [r7, #24]
 800676e:	3301      	adds	r3, #1
 8006770:	61bb      	str	r3, [r7, #24]
 8006772:	69ba      	ldr	r2, [r7, #24]
 8006774:	693b      	ldr	r3, [r7, #16]
 8006776:	429a      	cmp	r2, r3
 8006778:	d3e2      	bcc.n	8006740 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800677a:	2300      	movs	r3, #0
}
 800677c:	4618      	mov	r0, r3
 800677e:	3724      	adds	r7, #36	; 0x24
 8006780:	46bd      	mov	sp, r7
 8006782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006786:	4770      	bx	lr

08006788 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006788:	b480      	push	{r7}
 800678a:	b08b      	sub	sp, #44	; 0x2c
 800678c:	af00      	add	r7, sp, #0
 800678e:	60f8      	str	r0, [r7, #12]
 8006790:	60b9      	str	r1, [r7, #8]
 8006792:	4613      	mov	r3, r2
 8006794:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800679a:	68bb      	ldr	r3, [r7, #8]
 800679c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800679e:	88fb      	ldrh	r3, [r7, #6]
 80067a0:	089b      	lsrs	r3, r3, #2
 80067a2:	b29b      	uxth	r3, r3
 80067a4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80067a6:	88fb      	ldrh	r3, [r7, #6]
 80067a8:	f003 0303 	and.w	r3, r3, #3
 80067ac:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80067ae:	2300      	movs	r3, #0
 80067b0:	623b      	str	r3, [r7, #32]
 80067b2:	e014      	b.n	80067de <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80067b4:	69bb      	ldr	r3, [r7, #24]
 80067b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067ba:	681a      	ldr	r2, [r3, #0]
 80067bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067be:	601a      	str	r2, [r3, #0]
    pDest++;
 80067c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067c2:	3301      	adds	r3, #1
 80067c4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80067c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067c8:	3301      	adds	r3, #1
 80067ca:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80067cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ce:	3301      	adds	r3, #1
 80067d0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80067d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067d4:	3301      	adds	r3, #1
 80067d6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80067d8:	6a3b      	ldr	r3, [r7, #32]
 80067da:	3301      	adds	r3, #1
 80067dc:	623b      	str	r3, [r7, #32]
 80067de:	6a3a      	ldr	r2, [r7, #32]
 80067e0:	697b      	ldr	r3, [r7, #20]
 80067e2:	429a      	cmp	r2, r3
 80067e4:	d3e6      	bcc.n	80067b4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80067e6:	8bfb      	ldrh	r3, [r7, #30]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d01e      	beq.n	800682a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80067ec:	2300      	movs	r3, #0
 80067ee:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80067f0:	69bb      	ldr	r3, [r7, #24]
 80067f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067f6:	461a      	mov	r2, r3
 80067f8:	f107 0310 	add.w	r3, r7, #16
 80067fc:	6812      	ldr	r2, [r2, #0]
 80067fe:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006800:	693a      	ldr	r2, [r7, #16]
 8006802:	6a3b      	ldr	r3, [r7, #32]
 8006804:	b2db      	uxtb	r3, r3
 8006806:	00db      	lsls	r3, r3, #3
 8006808:	fa22 f303 	lsr.w	r3, r2, r3
 800680c:	b2da      	uxtb	r2, r3
 800680e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006810:	701a      	strb	r2, [r3, #0]
      i++;
 8006812:	6a3b      	ldr	r3, [r7, #32]
 8006814:	3301      	adds	r3, #1
 8006816:	623b      	str	r3, [r7, #32]
      pDest++;
 8006818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800681a:	3301      	adds	r3, #1
 800681c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800681e:	8bfb      	ldrh	r3, [r7, #30]
 8006820:	3b01      	subs	r3, #1
 8006822:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006824:	8bfb      	ldrh	r3, [r7, #30]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d1ea      	bne.n	8006800 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800682a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800682c:	4618      	mov	r0, r3
 800682e:	372c      	adds	r7, #44	; 0x2c
 8006830:	46bd      	mov	sp, r7
 8006832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006836:	4770      	bx	lr

08006838 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006838:	b480      	push	{r7}
 800683a:	b085      	sub	sp, #20
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
 8006840:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	781b      	ldrb	r3, [r3, #0]
 800684a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	785b      	ldrb	r3, [r3, #1]
 8006850:	2b01      	cmp	r3, #1
 8006852:	d12c      	bne.n	80068ae <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006854:	68bb      	ldr	r3, [r7, #8]
 8006856:	015a      	lsls	r2, r3, #5
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	4413      	add	r3, r2
 800685c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	2b00      	cmp	r3, #0
 8006864:	db12      	blt.n	800688c <USB_EPSetStall+0x54>
 8006866:	68bb      	ldr	r3, [r7, #8]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d00f      	beq.n	800688c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800686c:	68bb      	ldr	r3, [r7, #8]
 800686e:	015a      	lsls	r2, r3, #5
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	4413      	add	r3, r2
 8006874:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	68ba      	ldr	r2, [r7, #8]
 800687c:	0151      	lsls	r1, r2, #5
 800687e:	68fa      	ldr	r2, [r7, #12]
 8006880:	440a      	add	r2, r1
 8006882:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006886:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800688a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800688c:	68bb      	ldr	r3, [r7, #8]
 800688e:	015a      	lsls	r2, r3, #5
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	4413      	add	r3, r2
 8006894:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	68ba      	ldr	r2, [r7, #8]
 800689c:	0151      	lsls	r1, r2, #5
 800689e:	68fa      	ldr	r2, [r7, #12]
 80068a0:	440a      	add	r2, r1
 80068a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068a6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80068aa:	6013      	str	r3, [r2, #0]
 80068ac:	e02b      	b.n	8006906 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80068ae:	68bb      	ldr	r3, [r7, #8]
 80068b0:	015a      	lsls	r2, r3, #5
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	4413      	add	r3, r2
 80068b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	db12      	blt.n	80068e6 <USB_EPSetStall+0xae>
 80068c0:	68bb      	ldr	r3, [r7, #8]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d00f      	beq.n	80068e6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80068c6:	68bb      	ldr	r3, [r7, #8]
 80068c8:	015a      	lsls	r2, r3, #5
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	4413      	add	r3, r2
 80068ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	68ba      	ldr	r2, [r7, #8]
 80068d6:	0151      	lsls	r1, r2, #5
 80068d8:	68fa      	ldr	r2, [r7, #12]
 80068da:	440a      	add	r2, r1
 80068dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80068e0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80068e4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80068e6:	68bb      	ldr	r3, [r7, #8]
 80068e8:	015a      	lsls	r2, r3, #5
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	4413      	add	r3, r2
 80068ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	68ba      	ldr	r2, [r7, #8]
 80068f6:	0151      	lsls	r1, r2, #5
 80068f8:	68fa      	ldr	r2, [r7, #12]
 80068fa:	440a      	add	r2, r1
 80068fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006900:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006904:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006906:	2300      	movs	r3, #0
}
 8006908:	4618      	mov	r0, r3
 800690a:	3714      	adds	r7, #20
 800690c:	46bd      	mov	sp, r7
 800690e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006912:	4770      	bx	lr

08006914 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006914:	b480      	push	{r7}
 8006916:	b085      	sub	sp, #20
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
 800691c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	781b      	ldrb	r3, [r3, #0]
 8006926:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	785b      	ldrb	r3, [r3, #1]
 800692c:	2b01      	cmp	r3, #1
 800692e:	d128      	bne.n	8006982 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	015a      	lsls	r2, r3, #5
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	4413      	add	r3, r2
 8006938:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	68ba      	ldr	r2, [r7, #8]
 8006940:	0151      	lsls	r1, r2, #5
 8006942:	68fa      	ldr	r2, [r7, #12]
 8006944:	440a      	add	r2, r1
 8006946:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800694a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800694e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	791b      	ldrb	r3, [r3, #4]
 8006954:	2b03      	cmp	r3, #3
 8006956:	d003      	beq.n	8006960 <USB_EPClearStall+0x4c>
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	791b      	ldrb	r3, [r3, #4]
 800695c:	2b02      	cmp	r3, #2
 800695e:	d138      	bne.n	80069d2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006960:	68bb      	ldr	r3, [r7, #8]
 8006962:	015a      	lsls	r2, r3, #5
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	4413      	add	r3, r2
 8006968:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	68ba      	ldr	r2, [r7, #8]
 8006970:	0151      	lsls	r1, r2, #5
 8006972:	68fa      	ldr	r2, [r7, #12]
 8006974:	440a      	add	r2, r1
 8006976:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800697a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800697e:	6013      	str	r3, [r2, #0]
 8006980:	e027      	b.n	80069d2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	015a      	lsls	r2, r3, #5
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	4413      	add	r3, r2
 800698a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	68ba      	ldr	r2, [r7, #8]
 8006992:	0151      	lsls	r1, r2, #5
 8006994:	68fa      	ldr	r2, [r7, #12]
 8006996:	440a      	add	r2, r1
 8006998:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800699c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80069a0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	791b      	ldrb	r3, [r3, #4]
 80069a6:	2b03      	cmp	r3, #3
 80069a8:	d003      	beq.n	80069b2 <USB_EPClearStall+0x9e>
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	791b      	ldrb	r3, [r3, #4]
 80069ae:	2b02      	cmp	r3, #2
 80069b0:	d10f      	bne.n	80069d2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80069b2:	68bb      	ldr	r3, [r7, #8]
 80069b4:	015a      	lsls	r2, r3, #5
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	4413      	add	r3, r2
 80069ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	68ba      	ldr	r2, [r7, #8]
 80069c2:	0151      	lsls	r1, r2, #5
 80069c4:	68fa      	ldr	r2, [r7, #12]
 80069c6:	440a      	add	r2, r1
 80069c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80069d0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80069d2:	2300      	movs	r3, #0
}
 80069d4:	4618      	mov	r0, r3
 80069d6:	3714      	adds	r7, #20
 80069d8:	46bd      	mov	sp, r7
 80069da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069de:	4770      	bx	lr

080069e0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80069e0:	b480      	push	{r7}
 80069e2:	b085      	sub	sp, #20
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
 80069e8:	460b      	mov	r3, r1
 80069ea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	68fa      	ldr	r2, [r7, #12]
 80069fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80069fe:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006a02:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a0a:	681a      	ldr	r2, [r3, #0]
 8006a0c:	78fb      	ldrb	r3, [r7, #3]
 8006a0e:	011b      	lsls	r3, r3, #4
 8006a10:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006a14:	68f9      	ldr	r1, [r7, #12]
 8006a16:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006a1a:	4313      	orrs	r3, r2
 8006a1c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006a1e:	2300      	movs	r3, #0
}
 8006a20:	4618      	mov	r0, r3
 8006a22:	3714      	adds	r7, #20
 8006a24:	46bd      	mov	sp, r7
 8006a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2a:	4770      	bx	lr

08006a2c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	b085      	sub	sp, #20
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	68fa      	ldr	r2, [r7, #12]
 8006a42:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006a46:	f023 0303 	bic.w	r3, r3, #3
 8006a4a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a52:	685b      	ldr	r3, [r3, #4]
 8006a54:	68fa      	ldr	r2, [r7, #12]
 8006a56:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006a5a:	f023 0302 	bic.w	r3, r3, #2
 8006a5e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006a60:	2300      	movs	r3, #0
}
 8006a62:	4618      	mov	r0, r3
 8006a64:	3714      	adds	r7, #20
 8006a66:	46bd      	mov	sp, r7
 8006a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6c:	4770      	bx	lr

08006a6e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006a6e:	b480      	push	{r7}
 8006a70:	b085      	sub	sp, #20
 8006a72:	af00      	add	r7, sp, #0
 8006a74:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	68fa      	ldr	r2, [r7, #12]
 8006a84:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006a88:	f023 0303 	bic.w	r3, r3, #3
 8006a8c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a94:	685b      	ldr	r3, [r3, #4]
 8006a96:	68fa      	ldr	r2, [r7, #12]
 8006a98:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006a9c:	f043 0302 	orr.w	r3, r3, #2
 8006aa0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006aa2:	2300      	movs	r3, #0
}
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	3714      	adds	r7, #20
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aae:	4770      	bx	lr

08006ab0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006ab0:	b480      	push	{r7}
 8006ab2:	b085      	sub	sp, #20
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	695b      	ldr	r3, [r3, #20]
 8006abc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	699b      	ldr	r3, [r3, #24]
 8006ac2:	68fa      	ldr	r2, [r7, #12]
 8006ac4:	4013      	ands	r3, r2
 8006ac6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
}
 8006aca:	4618      	mov	r0, r3
 8006acc:	3714      	adds	r7, #20
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad4:	4770      	bx	lr

08006ad6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006ad6:	b480      	push	{r7}
 8006ad8:	b085      	sub	sp, #20
 8006ada:	af00      	add	r7, sp, #0
 8006adc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ae8:	699b      	ldr	r3, [r3, #24]
 8006aea:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006af2:	69db      	ldr	r3, [r3, #28]
 8006af4:	68ba      	ldr	r2, [r7, #8]
 8006af6:	4013      	ands	r3, r2
 8006af8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006afa:	68bb      	ldr	r3, [r7, #8]
 8006afc:	0c1b      	lsrs	r3, r3, #16
}
 8006afe:	4618      	mov	r0, r3
 8006b00:	3714      	adds	r7, #20
 8006b02:	46bd      	mov	sp, r7
 8006b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b08:	4770      	bx	lr

08006b0a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006b0a:	b480      	push	{r7}
 8006b0c:	b085      	sub	sp, #20
 8006b0e:	af00      	add	r7, sp, #0
 8006b10:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b1c:	699b      	ldr	r3, [r3, #24]
 8006b1e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b26:	69db      	ldr	r3, [r3, #28]
 8006b28:	68ba      	ldr	r2, [r7, #8]
 8006b2a:	4013      	ands	r3, r2
 8006b2c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006b2e:	68bb      	ldr	r3, [r7, #8]
 8006b30:	b29b      	uxth	r3, r3
}
 8006b32:	4618      	mov	r0, r3
 8006b34:	3714      	adds	r7, #20
 8006b36:	46bd      	mov	sp, r7
 8006b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3c:	4770      	bx	lr

08006b3e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006b3e:	b480      	push	{r7}
 8006b40:	b085      	sub	sp, #20
 8006b42:	af00      	add	r7, sp, #0
 8006b44:	6078      	str	r0, [r7, #4]
 8006b46:	460b      	mov	r3, r1
 8006b48:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006b4e:	78fb      	ldrb	r3, [r7, #3]
 8006b50:	015a      	lsls	r2, r3, #5
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	4413      	add	r3, r2
 8006b56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b5a:	689b      	ldr	r3, [r3, #8]
 8006b5c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b64:	695b      	ldr	r3, [r3, #20]
 8006b66:	68ba      	ldr	r2, [r7, #8]
 8006b68:	4013      	ands	r3, r2
 8006b6a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006b6c:	68bb      	ldr	r3, [r7, #8]
}
 8006b6e:	4618      	mov	r0, r3
 8006b70:	3714      	adds	r7, #20
 8006b72:	46bd      	mov	sp, r7
 8006b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b78:	4770      	bx	lr

08006b7a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006b7a:	b480      	push	{r7}
 8006b7c:	b087      	sub	sp, #28
 8006b7e:	af00      	add	r7, sp, #0
 8006b80:	6078      	str	r0, [r7, #4]
 8006b82:	460b      	mov	r3, r1
 8006b84:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006b8a:	697b      	ldr	r3, [r7, #20]
 8006b8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b90:	691b      	ldr	r3, [r3, #16]
 8006b92:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006b94:	697b      	ldr	r3, [r7, #20]
 8006b96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b9c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006b9e:	78fb      	ldrb	r3, [r7, #3]
 8006ba0:	f003 030f 	and.w	r3, r3, #15
 8006ba4:	68fa      	ldr	r2, [r7, #12]
 8006ba6:	fa22 f303 	lsr.w	r3, r2, r3
 8006baa:	01db      	lsls	r3, r3, #7
 8006bac:	b2db      	uxtb	r3, r3
 8006bae:	693a      	ldr	r2, [r7, #16]
 8006bb0:	4313      	orrs	r3, r2
 8006bb2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006bb4:	78fb      	ldrb	r3, [r7, #3]
 8006bb6:	015a      	lsls	r2, r3, #5
 8006bb8:	697b      	ldr	r3, [r7, #20]
 8006bba:	4413      	add	r3, r2
 8006bbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bc0:	689b      	ldr	r3, [r3, #8]
 8006bc2:	693a      	ldr	r2, [r7, #16]
 8006bc4:	4013      	ands	r3, r2
 8006bc6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006bc8:	68bb      	ldr	r3, [r7, #8]
}
 8006bca:	4618      	mov	r0, r3
 8006bcc:	371c      	adds	r7, #28
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd4:	4770      	bx	lr

08006bd6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006bd6:	b480      	push	{r7}
 8006bd8:	b083      	sub	sp, #12
 8006bda:	af00      	add	r7, sp, #0
 8006bdc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	695b      	ldr	r3, [r3, #20]
 8006be2:	f003 0301 	and.w	r3, r3, #1
}
 8006be6:	4618      	mov	r0, r3
 8006be8:	370c      	adds	r7, #12
 8006bea:	46bd      	mov	sp, r7
 8006bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf0:	4770      	bx	lr

08006bf2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006bf2:	b480      	push	{r7}
 8006bf4:	b085      	sub	sp, #20
 8006bf6:	af00      	add	r7, sp, #0
 8006bf8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	68fa      	ldr	r2, [r7, #12]
 8006c08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c0c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006c10:	f023 0307 	bic.w	r3, r3, #7
 8006c14:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c1c:	685b      	ldr	r3, [r3, #4]
 8006c1e:	68fa      	ldr	r2, [r7, #12]
 8006c20:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006c24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c28:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006c2a:	2300      	movs	r3, #0
}
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	3714      	adds	r7, #20
 8006c30:	46bd      	mov	sp, r7
 8006c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c36:	4770      	bx	lr

08006c38 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006c38:	b480      	push	{r7}
 8006c3a:	b087      	sub	sp, #28
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	60f8      	str	r0, [r7, #12]
 8006c40:	460b      	mov	r3, r1
 8006c42:	607a      	str	r2, [r7, #4]
 8006c44:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	333c      	adds	r3, #60	; 0x3c
 8006c4e:	3304      	adds	r3, #4
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006c54:	693b      	ldr	r3, [r7, #16]
 8006c56:	4a26      	ldr	r2, [pc, #152]	; (8006cf0 <USB_EP0_OutStart+0xb8>)
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d90a      	bls.n	8006c72 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006c5c:	697b      	ldr	r3, [r7, #20]
 8006c5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006c68:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006c6c:	d101      	bne.n	8006c72 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006c6e:	2300      	movs	r3, #0
 8006c70:	e037      	b.n	8006ce2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006c72:	697b      	ldr	r3, [r7, #20]
 8006c74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c78:	461a      	mov	r2, r3
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006c7e:	697b      	ldr	r3, [r7, #20]
 8006c80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c84:	691b      	ldr	r3, [r3, #16]
 8006c86:	697a      	ldr	r2, [r7, #20]
 8006c88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c8c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006c90:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006c92:	697b      	ldr	r3, [r7, #20]
 8006c94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c98:	691b      	ldr	r3, [r3, #16]
 8006c9a:	697a      	ldr	r2, [r7, #20]
 8006c9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ca0:	f043 0318 	orr.w	r3, r3, #24
 8006ca4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006ca6:	697b      	ldr	r3, [r7, #20]
 8006ca8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cac:	691b      	ldr	r3, [r3, #16]
 8006cae:	697a      	ldr	r2, [r7, #20]
 8006cb0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006cb4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006cb8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006cba:	7afb      	ldrb	r3, [r7, #11]
 8006cbc:	2b01      	cmp	r3, #1
 8006cbe:	d10f      	bne.n	8006ce0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006cc0:	697b      	ldr	r3, [r7, #20]
 8006cc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cc6:	461a      	mov	r2, r3
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006ccc:	697b      	ldr	r3, [r7, #20]
 8006cce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	697a      	ldr	r2, [r7, #20]
 8006cd6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006cda:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006cde:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006ce0:	2300      	movs	r3, #0
}
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	371c      	adds	r7, #28
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cec:	4770      	bx	lr
 8006cee:	bf00      	nop
 8006cf0:	4f54300a 	.word	0x4f54300a

08006cf4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	b085      	sub	sp, #20
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	3301      	adds	r3, #1
 8006d04:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	4a13      	ldr	r2, [pc, #76]	; (8006d58 <USB_CoreReset+0x64>)
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d901      	bls.n	8006d12 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006d0e:	2303      	movs	r3, #3
 8006d10:	e01b      	b.n	8006d4a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	691b      	ldr	r3, [r3, #16]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	daf2      	bge.n	8006d00 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	691b      	ldr	r3, [r3, #16]
 8006d22:	f043 0201 	orr.w	r2, r3, #1
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	3301      	adds	r3, #1
 8006d2e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	4a09      	ldr	r2, [pc, #36]	; (8006d58 <USB_CoreReset+0x64>)
 8006d34:	4293      	cmp	r3, r2
 8006d36:	d901      	bls.n	8006d3c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006d38:	2303      	movs	r3, #3
 8006d3a:	e006      	b.n	8006d4a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	691b      	ldr	r3, [r3, #16]
 8006d40:	f003 0301 	and.w	r3, r3, #1
 8006d44:	2b01      	cmp	r3, #1
 8006d46:	d0f0      	beq.n	8006d2a <USB_CoreReset+0x36>

  return HAL_OK;
 8006d48:	2300      	movs	r3, #0
}
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	3714      	adds	r7, #20
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d54:	4770      	bx	lr
 8006d56:	bf00      	nop
 8006d58:	00030d40 	.word	0x00030d40

08006d5c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b084      	sub	sp, #16
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
 8006d64:	460b      	mov	r3, r1
 8006d66:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006d68:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006d6c:	f002 fcee 	bl	800974c <USBD_static_malloc>
 8006d70:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d109      	bne.n	8006d8c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	32b0      	adds	r2, #176	; 0xb0
 8006d82:	2100      	movs	r1, #0
 8006d84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006d88:	2302      	movs	r3, #2
 8006d8a:	e0d4      	b.n	8006f36 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006d8c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8006d90:	2100      	movs	r1, #0
 8006d92:	68f8      	ldr	r0, [r7, #12]
 8006d94:	f002 fd48 	bl	8009828 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	32b0      	adds	r2, #176	; 0xb0
 8006da2:	68f9      	ldr	r1, [r7, #12]
 8006da4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	32b0      	adds	r2, #176	; 0xb0
 8006db2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	7c1b      	ldrb	r3, [r3, #16]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d138      	bne.n	8006e36 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006dc4:	4b5e      	ldr	r3, [pc, #376]	; (8006f40 <USBD_CDC_Init+0x1e4>)
 8006dc6:	7819      	ldrb	r1, [r3, #0]
 8006dc8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006dcc:	2202      	movs	r2, #2
 8006dce:	6878      	ldr	r0, [r7, #4]
 8006dd0:	f002 fb99 	bl	8009506 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006dd4:	4b5a      	ldr	r3, [pc, #360]	; (8006f40 <USBD_CDC_Init+0x1e4>)
 8006dd6:	781b      	ldrb	r3, [r3, #0]
 8006dd8:	f003 020f 	and.w	r2, r3, #15
 8006ddc:	6879      	ldr	r1, [r7, #4]
 8006dde:	4613      	mov	r3, r2
 8006de0:	009b      	lsls	r3, r3, #2
 8006de2:	4413      	add	r3, r2
 8006de4:	009b      	lsls	r3, r3, #2
 8006de6:	440b      	add	r3, r1
 8006de8:	3324      	adds	r3, #36	; 0x24
 8006dea:	2201      	movs	r2, #1
 8006dec:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006dee:	4b55      	ldr	r3, [pc, #340]	; (8006f44 <USBD_CDC_Init+0x1e8>)
 8006df0:	7819      	ldrb	r1, [r3, #0]
 8006df2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006df6:	2202      	movs	r2, #2
 8006df8:	6878      	ldr	r0, [r7, #4]
 8006dfa:	f002 fb84 	bl	8009506 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006dfe:	4b51      	ldr	r3, [pc, #324]	; (8006f44 <USBD_CDC_Init+0x1e8>)
 8006e00:	781b      	ldrb	r3, [r3, #0]
 8006e02:	f003 020f 	and.w	r2, r3, #15
 8006e06:	6879      	ldr	r1, [r7, #4]
 8006e08:	4613      	mov	r3, r2
 8006e0a:	009b      	lsls	r3, r3, #2
 8006e0c:	4413      	add	r3, r2
 8006e0e:	009b      	lsls	r3, r3, #2
 8006e10:	440b      	add	r3, r1
 8006e12:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006e16:	2201      	movs	r2, #1
 8006e18:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006e1a:	4b4b      	ldr	r3, [pc, #300]	; (8006f48 <USBD_CDC_Init+0x1ec>)
 8006e1c:	781b      	ldrb	r3, [r3, #0]
 8006e1e:	f003 020f 	and.w	r2, r3, #15
 8006e22:	6879      	ldr	r1, [r7, #4]
 8006e24:	4613      	mov	r3, r2
 8006e26:	009b      	lsls	r3, r3, #2
 8006e28:	4413      	add	r3, r2
 8006e2a:	009b      	lsls	r3, r3, #2
 8006e2c:	440b      	add	r3, r1
 8006e2e:	3326      	adds	r3, #38	; 0x26
 8006e30:	2210      	movs	r2, #16
 8006e32:	801a      	strh	r2, [r3, #0]
 8006e34:	e035      	b.n	8006ea2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006e36:	4b42      	ldr	r3, [pc, #264]	; (8006f40 <USBD_CDC_Init+0x1e4>)
 8006e38:	7819      	ldrb	r1, [r3, #0]
 8006e3a:	2340      	movs	r3, #64	; 0x40
 8006e3c:	2202      	movs	r2, #2
 8006e3e:	6878      	ldr	r0, [r7, #4]
 8006e40:	f002 fb61 	bl	8009506 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006e44:	4b3e      	ldr	r3, [pc, #248]	; (8006f40 <USBD_CDC_Init+0x1e4>)
 8006e46:	781b      	ldrb	r3, [r3, #0]
 8006e48:	f003 020f 	and.w	r2, r3, #15
 8006e4c:	6879      	ldr	r1, [r7, #4]
 8006e4e:	4613      	mov	r3, r2
 8006e50:	009b      	lsls	r3, r3, #2
 8006e52:	4413      	add	r3, r2
 8006e54:	009b      	lsls	r3, r3, #2
 8006e56:	440b      	add	r3, r1
 8006e58:	3324      	adds	r3, #36	; 0x24
 8006e5a:	2201      	movs	r2, #1
 8006e5c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006e5e:	4b39      	ldr	r3, [pc, #228]	; (8006f44 <USBD_CDC_Init+0x1e8>)
 8006e60:	7819      	ldrb	r1, [r3, #0]
 8006e62:	2340      	movs	r3, #64	; 0x40
 8006e64:	2202      	movs	r2, #2
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	f002 fb4d 	bl	8009506 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006e6c:	4b35      	ldr	r3, [pc, #212]	; (8006f44 <USBD_CDC_Init+0x1e8>)
 8006e6e:	781b      	ldrb	r3, [r3, #0]
 8006e70:	f003 020f 	and.w	r2, r3, #15
 8006e74:	6879      	ldr	r1, [r7, #4]
 8006e76:	4613      	mov	r3, r2
 8006e78:	009b      	lsls	r3, r3, #2
 8006e7a:	4413      	add	r3, r2
 8006e7c:	009b      	lsls	r3, r3, #2
 8006e7e:	440b      	add	r3, r1
 8006e80:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006e84:	2201      	movs	r2, #1
 8006e86:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006e88:	4b2f      	ldr	r3, [pc, #188]	; (8006f48 <USBD_CDC_Init+0x1ec>)
 8006e8a:	781b      	ldrb	r3, [r3, #0]
 8006e8c:	f003 020f 	and.w	r2, r3, #15
 8006e90:	6879      	ldr	r1, [r7, #4]
 8006e92:	4613      	mov	r3, r2
 8006e94:	009b      	lsls	r3, r3, #2
 8006e96:	4413      	add	r3, r2
 8006e98:	009b      	lsls	r3, r3, #2
 8006e9a:	440b      	add	r3, r1
 8006e9c:	3326      	adds	r3, #38	; 0x26
 8006e9e:	2210      	movs	r2, #16
 8006ea0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006ea2:	4b29      	ldr	r3, [pc, #164]	; (8006f48 <USBD_CDC_Init+0x1ec>)
 8006ea4:	7819      	ldrb	r1, [r3, #0]
 8006ea6:	2308      	movs	r3, #8
 8006ea8:	2203      	movs	r2, #3
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	f002 fb2b 	bl	8009506 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006eb0:	4b25      	ldr	r3, [pc, #148]	; (8006f48 <USBD_CDC_Init+0x1ec>)
 8006eb2:	781b      	ldrb	r3, [r3, #0]
 8006eb4:	f003 020f 	and.w	r2, r3, #15
 8006eb8:	6879      	ldr	r1, [r7, #4]
 8006eba:	4613      	mov	r3, r2
 8006ebc:	009b      	lsls	r3, r3, #2
 8006ebe:	4413      	add	r3, r2
 8006ec0:	009b      	lsls	r3, r3, #2
 8006ec2:	440b      	add	r3, r1
 8006ec4:	3324      	adds	r3, #36	; 0x24
 8006ec6:	2201      	movs	r2, #1
 8006ec8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	2200      	movs	r2, #0
 8006ece:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006ed8:	687a      	ldr	r2, [r7, #4]
 8006eda:	33b0      	adds	r3, #176	; 0xb0
 8006edc:	009b      	lsls	r3, r3, #2
 8006ede:	4413      	add	r3, r2
 8006ee0:	685b      	ldr	r3, [r3, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	2200      	movs	r2, #0
 8006eea:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d101      	bne.n	8006f04 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006f00:	2302      	movs	r3, #2
 8006f02:	e018      	b.n	8006f36 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	7c1b      	ldrb	r3, [r3, #16]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d10a      	bne.n	8006f22 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006f0c:	4b0d      	ldr	r3, [pc, #52]	; (8006f44 <USBD_CDC_Init+0x1e8>)
 8006f0e:	7819      	ldrb	r1, [r3, #0]
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006f16:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006f1a:	6878      	ldr	r0, [r7, #4]
 8006f1c:	f002 fbe2 	bl	80096e4 <USBD_LL_PrepareReceive>
 8006f20:	e008      	b.n	8006f34 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006f22:	4b08      	ldr	r3, [pc, #32]	; (8006f44 <USBD_CDC_Init+0x1e8>)
 8006f24:	7819      	ldrb	r1, [r3, #0]
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006f2c:	2340      	movs	r3, #64	; 0x40
 8006f2e:	6878      	ldr	r0, [r7, #4]
 8006f30:	f002 fbd8 	bl	80096e4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006f34:	2300      	movs	r3, #0
}
 8006f36:	4618      	mov	r0, r3
 8006f38:	3710      	adds	r7, #16
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	bd80      	pop	{r7, pc}
 8006f3e:	bf00      	nop
 8006f40:	200000ff 	.word	0x200000ff
 8006f44:	20000100 	.word	0x20000100
 8006f48:	20000101 	.word	0x20000101

08006f4c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b082      	sub	sp, #8
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
 8006f54:	460b      	mov	r3, r1
 8006f56:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006f58:	4b3a      	ldr	r3, [pc, #232]	; (8007044 <USBD_CDC_DeInit+0xf8>)
 8006f5a:	781b      	ldrb	r3, [r3, #0]
 8006f5c:	4619      	mov	r1, r3
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	f002 faf7 	bl	8009552 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006f64:	4b37      	ldr	r3, [pc, #220]	; (8007044 <USBD_CDC_DeInit+0xf8>)
 8006f66:	781b      	ldrb	r3, [r3, #0]
 8006f68:	f003 020f 	and.w	r2, r3, #15
 8006f6c:	6879      	ldr	r1, [r7, #4]
 8006f6e:	4613      	mov	r3, r2
 8006f70:	009b      	lsls	r3, r3, #2
 8006f72:	4413      	add	r3, r2
 8006f74:	009b      	lsls	r3, r3, #2
 8006f76:	440b      	add	r3, r1
 8006f78:	3324      	adds	r3, #36	; 0x24
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006f7e:	4b32      	ldr	r3, [pc, #200]	; (8007048 <USBD_CDC_DeInit+0xfc>)
 8006f80:	781b      	ldrb	r3, [r3, #0]
 8006f82:	4619      	mov	r1, r3
 8006f84:	6878      	ldr	r0, [r7, #4]
 8006f86:	f002 fae4 	bl	8009552 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006f8a:	4b2f      	ldr	r3, [pc, #188]	; (8007048 <USBD_CDC_DeInit+0xfc>)
 8006f8c:	781b      	ldrb	r3, [r3, #0]
 8006f8e:	f003 020f 	and.w	r2, r3, #15
 8006f92:	6879      	ldr	r1, [r7, #4]
 8006f94:	4613      	mov	r3, r2
 8006f96:	009b      	lsls	r3, r3, #2
 8006f98:	4413      	add	r3, r2
 8006f9a:	009b      	lsls	r3, r3, #2
 8006f9c:	440b      	add	r3, r1
 8006f9e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006fa6:	4b29      	ldr	r3, [pc, #164]	; (800704c <USBD_CDC_DeInit+0x100>)
 8006fa8:	781b      	ldrb	r3, [r3, #0]
 8006faa:	4619      	mov	r1, r3
 8006fac:	6878      	ldr	r0, [r7, #4]
 8006fae:	f002 fad0 	bl	8009552 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006fb2:	4b26      	ldr	r3, [pc, #152]	; (800704c <USBD_CDC_DeInit+0x100>)
 8006fb4:	781b      	ldrb	r3, [r3, #0]
 8006fb6:	f003 020f 	and.w	r2, r3, #15
 8006fba:	6879      	ldr	r1, [r7, #4]
 8006fbc:	4613      	mov	r3, r2
 8006fbe:	009b      	lsls	r3, r3, #2
 8006fc0:	4413      	add	r3, r2
 8006fc2:	009b      	lsls	r3, r3, #2
 8006fc4:	440b      	add	r3, r1
 8006fc6:	3324      	adds	r3, #36	; 0x24
 8006fc8:	2200      	movs	r2, #0
 8006fca:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006fcc:	4b1f      	ldr	r3, [pc, #124]	; (800704c <USBD_CDC_DeInit+0x100>)
 8006fce:	781b      	ldrb	r3, [r3, #0]
 8006fd0:	f003 020f 	and.w	r2, r3, #15
 8006fd4:	6879      	ldr	r1, [r7, #4]
 8006fd6:	4613      	mov	r3, r2
 8006fd8:	009b      	lsls	r3, r3, #2
 8006fda:	4413      	add	r3, r2
 8006fdc:	009b      	lsls	r3, r3, #2
 8006fde:	440b      	add	r3, r1
 8006fe0:	3326      	adds	r3, #38	; 0x26
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	32b0      	adds	r2, #176	; 0xb0
 8006ff0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d01f      	beq.n	8007038 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006ffe:	687a      	ldr	r2, [r7, #4]
 8007000:	33b0      	adds	r3, #176	; 0xb0
 8007002:	009b      	lsls	r3, r3, #2
 8007004:	4413      	add	r3, r2
 8007006:	685b      	ldr	r3, [r3, #4]
 8007008:	685b      	ldr	r3, [r3, #4]
 800700a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	32b0      	adds	r2, #176	; 0xb0
 8007016:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800701a:	4618      	mov	r0, r3
 800701c:	f002 fba4 	bl	8009768 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	32b0      	adds	r2, #176	; 0xb0
 800702a:	2100      	movs	r1, #0
 800702c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2200      	movs	r2, #0
 8007034:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007038:	2300      	movs	r3, #0
}
 800703a:	4618      	mov	r0, r3
 800703c:	3708      	adds	r7, #8
 800703e:	46bd      	mov	sp, r7
 8007040:	bd80      	pop	{r7, pc}
 8007042:	bf00      	nop
 8007044:	200000ff 	.word	0x200000ff
 8007048:	20000100 	.word	0x20000100
 800704c:	20000101 	.word	0x20000101

08007050 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007050:	b580      	push	{r7, lr}
 8007052:	b086      	sub	sp, #24
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
 8007058:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	32b0      	adds	r2, #176	; 0xb0
 8007064:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007068:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800706a:	2300      	movs	r3, #0
 800706c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800706e:	2300      	movs	r3, #0
 8007070:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007072:	2300      	movs	r3, #0
 8007074:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007076:	693b      	ldr	r3, [r7, #16]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d101      	bne.n	8007080 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800707c:	2303      	movs	r3, #3
 800707e:	e0bf      	b.n	8007200 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	781b      	ldrb	r3, [r3, #0]
 8007084:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007088:	2b00      	cmp	r3, #0
 800708a:	d050      	beq.n	800712e <USBD_CDC_Setup+0xde>
 800708c:	2b20      	cmp	r3, #32
 800708e:	f040 80af 	bne.w	80071f0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	88db      	ldrh	r3, [r3, #6]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d03a      	beq.n	8007110 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	781b      	ldrb	r3, [r3, #0]
 800709e:	b25b      	sxtb	r3, r3
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	da1b      	bge.n	80070dc <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80070aa:	687a      	ldr	r2, [r7, #4]
 80070ac:	33b0      	adds	r3, #176	; 0xb0
 80070ae:	009b      	lsls	r3, r3, #2
 80070b0:	4413      	add	r3, r2
 80070b2:	685b      	ldr	r3, [r3, #4]
 80070b4:	689b      	ldr	r3, [r3, #8]
 80070b6:	683a      	ldr	r2, [r7, #0]
 80070b8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80070ba:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80070bc:	683a      	ldr	r2, [r7, #0]
 80070be:	88d2      	ldrh	r2, [r2, #6]
 80070c0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	88db      	ldrh	r3, [r3, #6]
 80070c6:	2b07      	cmp	r3, #7
 80070c8:	bf28      	it	cs
 80070ca:	2307      	movcs	r3, #7
 80070cc:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80070ce:	693b      	ldr	r3, [r7, #16]
 80070d0:	89fa      	ldrh	r2, [r7, #14]
 80070d2:	4619      	mov	r1, r3
 80070d4:	6878      	ldr	r0, [r7, #4]
 80070d6:	f001 fd89 	bl	8008bec <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80070da:	e090      	b.n	80071fe <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	785a      	ldrb	r2, [r3, #1]
 80070e0:	693b      	ldr	r3, [r7, #16]
 80070e2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	88db      	ldrh	r3, [r3, #6]
 80070ea:	2b3f      	cmp	r3, #63	; 0x3f
 80070ec:	d803      	bhi.n	80070f6 <USBD_CDC_Setup+0xa6>
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	88db      	ldrh	r3, [r3, #6]
 80070f2:	b2da      	uxtb	r2, r3
 80070f4:	e000      	b.n	80070f8 <USBD_CDC_Setup+0xa8>
 80070f6:	2240      	movs	r2, #64	; 0x40
 80070f8:	693b      	ldr	r3, [r7, #16]
 80070fa:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80070fe:	6939      	ldr	r1, [r7, #16]
 8007100:	693b      	ldr	r3, [r7, #16]
 8007102:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8007106:	461a      	mov	r2, r3
 8007108:	6878      	ldr	r0, [r7, #4]
 800710a:	f001 fd9b 	bl	8008c44 <USBD_CtlPrepareRx>
      break;
 800710e:	e076      	b.n	80071fe <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007116:	687a      	ldr	r2, [r7, #4]
 8007118:	33b0      	adds	r3, #176	; 0xb0
 800711a:	009b      	lsls	r3, r3, #2
 800711c:	4413      	add	r3, r2
 800711e:	685b      	ldr	r3, [r3, #4]
 8007120:	689b      	ldr	r3, [r3, #8]
 8007122:	683a      	ldr	r2, [r7, #0]
 8007124:	7850      	ldrb	r0, [r2, #1]
 8007126:	2200      	movs	r2, #0
 8007128:	6839      	ldr	r1, [r7, #0]
 800712a:	4798      	blx	r3
      break;
 800712c:	e067      	b.n	80071fe <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	785b      	ldrb	r3, [r3, #1]
 8007132:	2b0b      	cmp	r3, #11
 8007134:	d851      	bhi.n	80071da <USBD_CDC_Setup+0x18a>
 8007136:	a201      	add	r2, pc, #4	; (adr r2, 800713c <USBD_CDC_Setup+0xec>)
 8007138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800713c:	0800716d 	.word	0x0800716d
 8007140:	080071e9 	.word	0x080071e9
 8007144:	080071db 	.word	0x080071db
 8007148:	080071db 	.word	0x080071db
 800714c:	080071db 	.word	0x080071db
 8007150:	080071db 	.word	0x080071db
 8007154:	080071db 	.word	0x080071db
 8007158:	080071db 	.word	0x080071db
 800715c:	080071db 	.word	0x080071db
 8007160:	080071db 	.word	0x080071db
 8007164:	08007197 	.word	0x08007197
 8007168:	080071c1 	.word	0x080071c1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007172:	b2db      	uxtb	r3, r3
 8007174:	2b03      	cmp	r3, #3
 8007176:	d107      	bne.n	8007188 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007178:	f107 030a 	add.w	r3, r7, #10
 800717c:	2202      	movs	r2, #2
 800717e:	4619      	mov	r1, r3
 8007180:	6878      	ldr	r0, [r7, #4]
 8007182:	f001 fd33 	bl	8008bec <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007186:	e032      	b.n	80071ee <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007188:	6839      	ldr	r1, [r7, #0]
 800718a:	6878      	ldr	r0, [r7, #4]
 800718c:	f001 fcbd 	bl	8008b0a <USBD_CtlError>
            ret = USBD_FAIL;
 8007190:	2303      	movs	r3, #3
 8007192:	75fb      	strb	r3, [r7, #23]
          break;
 8007194:	e02b      	b.n	80071ee <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800719c:	b2db      	uxtb	r3, r3
 800719e:	2b03      	cmp	r3, #3
 80071a0:	d107      	bne.n	80071b2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80071a2:	f107 030d 	add.w	r3, r7, #13
 80071a6:	2201      	movs	r2, #1
 80071a8:	4619      	mov	r1, r3
 80071aa:	6878      	ldr	r0, [r7, #4]
 80071ac:	f001 fd1e 	bl	8008bec <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80071b0:	e01d      	b.n	80071ee <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80071b2:	6839      	ldr	r1, [r7, #0]
 80071b4:	6878      	ldr	r0, [r7, #4]
 80071b6:	f001 fca8 	bl	8008b0a <USBD_CtlError>
            ret = USBD_FAIL;
 80071ba:	2303      	movs	r3, #3
 80071bc:	75fb      	strb	r3, [r7, #23]
          break;
 80071be:	e016      	b.n	80071ee <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071c6:	b2db      	uxtb	r3, r3
 80071c8:	2b03      	cmp	r3, #3
 80071ca:	d00f      	beq.n	80071ec <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80071cc:	6839      	ldr	r1, [r7, #0]
 80071ce:	6878      	ldr	r0, [r7, #4]
 80071d0:	f001 fc9b 	bl	8008b0a <USBD_CtlError>
            ret = USBD_FAIL;
 80071d4:	2303      	movs	r3, #3
 80071d6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80071d8:	e008      	b.n	80071ec <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80071da:	6839      	ldr	r1, [r7, #0]
 80071dc:	6878      	ldr	r0, [r7, #4]
 80071de:	f001 fc94 	bl	8008b0a <USBD_CtlError>
          ret = USBD_FAIL;
 80071e2:	2303      	movs	r3, #3
 80071e4:	75fb      	strb	r3, [r7, #23]
          break;
 80071e6:	e002      	b.n	80071ee <USBD_CDC_Setup+0x19e>
          break;
 80071e8:	bf00      	nop
 80071ea:	e008      	b.n	80071fe <USBD_CDC_Setup+0x1ae>
          break;
 80071ec:	bf00      	nop
      }
      break;
 80071ee:	e006      	b.n	80071fe <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80071f0:	6839      	ldr	r1, [r7, #0]
 80071f2:	6878      	ldr	r0, [r7, #4]
 80071f4:	f001 fc89 	bl	8008b0a <USBD_CtlError>
      ret = USBD_FAIL;
 80071f8:	2303      	movs	r3, #3
 80071fa:	75fb      	strb	r3, [r7, #23]
      break;
 80071fc:	bf00      	nop
  }

  return (uint8_t)ret;
 80071fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8007200:	4618      	mov	r0, r3
 8007202:	3718      	adds	r7, #24
 8007204:	46bd      	mov	sp, r7
 8007206:	bd80      	pop	{r7, pc}

08007208 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b084      	sub	sp, #16
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
 8007210:	460b      	mov	r3, r1
 8007212:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800721a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	32b0      	adds	r2, #176	; 0xb0
 8007226:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d101      	bne.n	8007232 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800722e:	2303      	movs	r3, #3
 8007230:	e065      	b.n	80072fe <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	32b0      	adds	r2, #176	; 0xb0
 800723c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007240:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007242:	78fb      	ldrb	r3, [r7, #3]
 8007244:	f003 020f 	and.w	r2, r3, #15
 8007248:	6879      	ldr	r1, [r7, #4]
 800724a:	4613      	mov	r3, r2
 800724c:	009b      	lsls	r3, r3, #2
 800724e:	4413      	add	r3, r2
 8007250:	009b      	lsls	r3, r3, #2
 8007252:	440b      	add	r3, r1
 8007254:	3318      	adds	r3, #24
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d02f      	beq.n	80072bc <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800725c:	78fb      	ldrb	r3, [r7, #3]
 800725e:	f003 020f 	and.w	r2, r3, #15
 8007262:	6879      	ldr	r1, [r7, #4]
 8007264:	4613      	mov	r3, r2
 8007266:	009b      	lsls	r3, r3, #2
 8007268:	4413      	add	r3, r2
 800726a:	009b      	lsls	r3, r3, #2
 800726c:	440b      	add	r3, r1
 800726e:	3318      	adds	r3, #24
 8007270:	681a      	ldr	r2, [r3, #0]
 8007272:	78fb      	ldrb	r3, [r7, #3]
 8007274:	f003 010f 	and.w	r1, r3, #15
 8007278:	68f8      	ldr	r0, [r7, #12]
 800727a:	460b      	mov	r3, r1
 800727c:	00db      	lsls	r3, r3, #3
 800727e:	440b      	add	r3, r1
 8007280:	009b      	lsls	r3, r3, #2
 8007282:	4403      	add	r3, r0
 8007284:	3348      	adds	r3, #72	; 0x48
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	fbb2 f1f3 	udiv	r1, r2, r3
 800728c:	fb01 f303 	mul.w	r3, r1, r3
 8007290:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007292:	2b00      	cmp	r3, #0
 8007294:	d112      	bne.n	80072bc <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8007296:	78fb      	ldrb	r3, [r7, #3]
 8007298:	f003 020f 	and.w	r2, r3, #15
 800729c:	6879      	ldr	r1, [r7, #4]
 800729e:	4613      	mov	r3, r2
 80072a0:	009b      	lsls	r3, r3, #2
 80072a2:	4413      	add	r3, r2
 80072a4:	009b      	lsls	r3, r3, #2
 80072a6:	440b      	add	r3, r1
 80072a8:	3318      	adds	r3, #24
 80072aa:	2200      	movs	r2, #0
 80072ac:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80072ae:	78f9      	ldrb	r1, [r7, #3]
 80072b0:	2300      	movs	r3, #0
 80072b2:	2200      	movs	r2, #0
 80072b4:	6878      	ldr	r0, [r7, #4]
 80072b6:	f002 f9f4 	bl	80096a2 <USBD_LL_Transmit>
 80072ba:	e01f      	b.n	80072fc <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80072bc:	68bb      	ldr	r3, [r7, #8]
 80072be:	2200      	movs	r2, #0
 80072c0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80072ca:	687a      	ldr	r2, [r7, #4]
 80072cc:	33b0      	adds	r3, #176	; 0xb0
 80072ce:	009b      	lsls	r3, r3, #2
 80072d0:	4413      	add	r3, r2
 80072d2:	685b      	ldr	r3, [r3, #4]
 80072d4:	691b      	ldr	r3, [r3, #16]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d010      	beq.n	80072fc <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80072e0:	687a      	ldr	r2, [r7, #4]
 80072e2:	33b0      	adds	r3, #176	; 0xb0
 80072e4:	009b      	lsls	r3, r3, #2
 80072e6:	4413      	add	r3, r2
 80072e8:	685b      	ldr	r3, [r3, #4]
 80072ea:	691b      	ldr	r3, [r3, #16]
 80072ec:	68ba      	ldr	r2, [r7, #8]
 80072ee:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80072f2:	68ba      	ldr	r2, [r7, #8]
 80072f4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80072f8:	78fa      	ldrb	r2, [r7, #3]
 80072fa:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80072fc:	2300      	movs	r3, #0
}
 80072fe:	4618      	mov	r0, r3
 8007300:	3710      	adds	r7, #16
 8007302:	46bd      	mov	sp, r7
 8007304:	bd80      	pop	{r7, pc}

08007306 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007306:	b580      	push	{r7, lr}
 8007308:	b084      	sub	sp, #16
 800730a:	af00      	add	r7, sp, #0
 800730c:	6078      	str	r0, [r7, #4]
 800730e:	460b      	mov	r3, r1
 8007310:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	32b0      	adds	r2, #176	; 0xb0
 800731c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007320:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	32b0      	adds	r2, #176	; 0xb0
 800732c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d101      	bne.n	8007338 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007334:	2303      	movs	r3, #3
 8007336:	e01a      	b.n	800736e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007338:	78fb      	ldrb	r3, [r7, #3]
 800733a:	4619      	mov	r1, r3
 800733c:	6878      	ldr	r0, [r7, #4]
 800733e:	f002 f9f2 	bl	8009726 <USBD_LL_GetRxDataSize>
 8007342:	4602      	mov	r2, r0
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007350:	687a      	ldr	r2, [r7, #4]
 8007352:	33b0      	adds	r3, #176	; 0xb0
 8007354:	009b      	lsls	r3, r3, #2
 8007356:	4413      	add	r3, r2
 8007358:	685b      	ldr	r3, [r3, #4]
 800735a:	68db      	ldr	r3, [r3, #12]
 800735c:	68fa      	ldr	r2, [r7, #12]
 800735e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007362:	68fa      	ldr	r2, [r7, #12]
 8007364:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007368:	4611      	mov	r1, r2
 800736a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800736c:	2300      	movs	r3, #0
}
 800736e:	4618      	mov	r0, r3
 8007370:	3710      	adds	r7, #16
 8007372:	46bd      	mov	sp, r7
 8007374:	bd80      	pop	{r7, pc}

08007376 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007376:	b580      	push	{r7, lr}
 8007378:	b084      	sub	sp, #16
 800737a:	af00      	add	r7, sp, #0
 800737c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	32b0      	adds	r2, #176	; 0xb0
 8007388:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800738c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d101      	bne.n	8007398 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007394:	2303      	movs	r3, #3
 8007396:	e025      	b.n	80073e4 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800739e:	687a      	ldr	r2, [r7, #4]
 80073a0:	33b0      	adds	r3, #176	; 0xb0
 80073a2:	009b      	lsls	r3, r3, #2
 80073a4:	4413      	add	r3, r2
 80073a6:	685b      	ldr	r3, [r3, #4]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d01a      	beq.n	80073e2 <USBD_CDC_EP0_RxReady+0x6c>
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80073b2:	2bff      	cmp	r3, #255	; 0xff
 80073b4:	d015      	beq.n	80073e2 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80073bc:	687a      	ldr	r2, [r7, #4]
 80073be:	33b0      	adds	r3, #176	; 0xb0
 80073c0:	009b      	lsls	r3, r3, #2
 80073c2:	4413      	add	r3, r2
 80073c4:	685b      	ldr	r3, [r3, #4]
 80073c6:	689b      	ldr	r3, [r3, #8]
 80073c8:	68fa      	ldr	r2, [r7, #12]
 80073ca:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80073ce:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80073d0:	68fa      	ldr	r2, [r7, #12]
 80073d2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80073d6:	b292      	uxth	r2, r2
 80073d8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	22ff      	movs	r2, #255	; 0xff
 80073de:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80073e2:	2300      	movs	r3, #0
}
 80073e4:	4618      	mov	r0, r3
 80073e6:	3710      	adds	r7, #16
 80073e8:	46bd      	mov	sp, r7
 80073ea:	bd80      	pop	{r7, pc}

080073ec <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b086      	sub	sp, #24
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80073f4:	2182      	movs	r1, #130	; 0x82
 80073f6:	4818      	ldr	r0, [pc, #96]	; (8007458 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80073f8:	f000 fd4f 	bl	8007e9a <USBD_GetEpDesc>
 80073fc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80073fe:	2101      	movs	r1, #1
 8007400:	4815      	ldr	r0, [pc, #84]	; (8007458 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007402:	f000 fd4a 	bl	8007e9a <USBD_GetEpDesc>
 8007406:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007408:	2181      	movs	r1, #129	; 0x81
 800740a:	4813      	ldr	r0, [pc, #76]	; (8007458 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800740c:	f000 fd45 	bl	8007e9a <USBD_GetEpDesc>
 8007410:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007412:	697b      	ldr	r3, [r7, #20]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d002      	beq.n	800741e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007418:	697b      	ldr	r3, [r7, #20]
 800741a:	2210      	movs	r2, #16
 800741c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800741e:	693b      	ldr	r3, [r7, #16]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d006      	beq.n	8007432 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007424:	693b      	ldr	r3, [r7, #16]
 8007426:	2200      	movs	r2, #0
 8007428:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800742c:	711a      	strb	r2, [r3, #4]
 800742e:	2200      	movs	r2, #0
 8007430:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d006      	beq.n	8007446 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	2200      	movs	r2, #0
 800743c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007440:	711a      	strb	r2, [r3, #4]
 8007442:	2200      	movs	r2, #0
 8007444:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2243      	movs	r2, #67	; 0x43
 800744a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800744c:	4b02      	ldr	r3, [pc, #8]	; (8007458 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800744e:	4618      	mov	r0, r3
 8007450:	3718      	adds	r7, #24
 8007452:	46bd      	mov	sp, r7
 8007454:	bd80      	pop	{r7, pc}
 8007456:	bf00      	nop
 8007458:	200000bc 	.word	0x200000bc

0800745c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b086      	sub	sp, #24
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007464:	2182      	movs	r1, #130	; 0x82
 8007466:	4818      	ldr	r0, [pc, #96]	; (80074c8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007468:	f000 fd17 	bl	8007e9a <USBD_GetEpDesc>
 800746c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800746e:	2101      	movs	r1, #1
 8007470:	4815      	ldr	r0, [pc, #84]	; (80074c8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007472:	f000 fd12 	bl	8007e9a <USBD_GetEpDesc>
 8007476:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007478:	2181      	movs	r1, #129	; 0x81
 800747a:	4813      	ldr	r0, [pc, #76]	; (80074c8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800747c:	f000 fd0d 	bl	8007e9a <USBD_GetEpDesc>
 8007480:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007482:	697b      	ldr	r3, [r7, #20]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d002      	beq.n	800748e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007488:	697b      	ldr	r3, [r7, #20]
 800748a:	2210      	movs	r2, #16
 800748c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800748e:	693b      	ldr	r3, [r7, #16]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d006      	beq.n	80074a2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007494:	693b      	ldr	r3, [r7, #16]
 8007496:	2200      	movs	r2, #0
 8007498:	711a      	strb	r2, [r3, #4]
 800749a:	2200      	movs	r2, #0
 800749c:	f042 0202 	orr.w	r2, r2, #2
 80074a0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d006      	beq.n	80074b6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	2200      	movs	r2, #0
 80074ac:	711a      	strb	r2, [r3, #4]
 80074ae:	2200      	movs	r2, #0
 80074b0:	f042 0202 	orr.w	r2, r2, #2
 80074b4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2243      	movs	r2, #67	; 0x43
 80074ba:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80074bc:	4b02      	ldr	r3, [pc, #8]	; (80074c8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80074be:	4618      	mov	r0, r3
 80074c0:	3718      	adds	r7, #24
 80074c2:	46bd      	mov	sp, r7
 80074c4:	bd80      	pop	{r7, pc}
 80074c6:	bf00      	nop
 80074c8:	200000bc 	.word	0x200000bc

080074cc <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b086      	sub	sp, #24
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80074d4:	2182      	movs	r1, #130	; 0x82
 80074d6:	4818      	ldr	r0, [pc, #96]	; (8007538 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80074d8:	f000 fcdf 	bl	8007e9a <USBD_GetEpDesc>
 80074dc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80074de:	2101      	movs	r1, #1
 80074e0:	4815      	ldr	r0, [pc, #84]	; (8007538 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80074e2:	f000 fcda 	bl	8007e9a <USBD_GetEpDesc>
 80074e6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80074e8:	2181      	movs	r1, #129	; 0x81
 80074ea:	4813      	ldr	r0, [pc, #76]	; (8007538 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80074ec:	f000 fcd5 	bl	8007e9a <USBD_GetEpDesc>
 80074f0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80074f2:	697b      	ldr	r3, [r7, #20]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d002      	beq.n	80074fe <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80074f8:	697b      	ldr	r3, [r7, #20]
 80074fa:	2210      	movs	r2, #16
 80074fc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80074fe:	693b      	ldr	r3, [r7, #16]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d006      	beq.n	8007512 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007504:	693b      	ldr	r3, [r7, #16]
 8007506:	2200      	movs	r2, #0
 8007508:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800750c:	711a      	strb	r2, [r3, #4]
 800750e:	2200      	movs	r2, #0
 8007510:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d006      	beq.n	8007526 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	2200      	movs	r2, #0
 800751c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007520:	711a      	strb	r2, [r3, #4]
 8007522:	2200      	movs	r2, #0
 8007524:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2243      	movs	r2, #67	; 0x43
 800752a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800752c:	4b02      	ldr	r3, [pc, #8]	; (8007538 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800752e:	4618      	mov	r0, r3
 8007530:	3718      	adds	r7, #24
 8007532:	46bd      	mov	sp, r7
 8007534:	bd80      	pop	{r7, pc}
 8007536:	bf00      	nop
 8007538:	200000bc 	.word	0x200000bc

0800753c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800753c:	b480      	push	{r7}
 800753e:	b083      	sub	sp, #12
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	220a      	movs	r2, #10
 8007548:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800754a:	4b03      	ldr	r3, [pc, #12]	; (8007558 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800754c:	4618      	mov	r0, r3
 800754e:	370c      	adds	r7, #12
 8007550:	46bd      	mov	sp, r7
 8007552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007556:	4770      	bx	lr
 8007558:	20000078 	.word	0x20000078

0800755c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800755c:	b480      	push	{r7}
 800755e:	b083      	sub	sp, #12
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
 8007564:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d101      	bne.n	8007570 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800756c:	2303      	movs	r3, #3
 800756e:	e009      	b.n	8007584 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007576:	687a      	ldr	r2, [r7, #4]
 8007578:	33b0      	adds	r3, #176	; 0xb0
 800757a:	009b      	lsls	r3, r3, #2
 800757c:	4413      	add	r3, r2
 800757e:	683a      	ldr	r2, [r7, #0]
 8007580:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007582:	2300      	movs	r3, #0
}
 8007584:	4618      	mov	r0, r3
 8007586:	370c      	adds	r7, #12
 8007588:	46bd      	mov	sp, r7
 800758a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758e:	4770      	bx	lr

08007590 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007590:	b480      	push	{r7}
 8007592:	b087      	sub	sp, #28
 8007594:	af00      	add	r7, sp, #0
 8007596:	60f8      	str	r0, [r7, #12]
 8007598:	60b9      	str	r1, [r7, #8]
 800759a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	32b0      	adds	r2, #176	; 0xb0
 80075a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075aa:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80075ac:	697b      	ldr	r3, [r7, #20]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d101      	bne.n	80075b6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80075b2:	2303      	movs	r3, #3
 80075b4:	e008      	b.n	80075c8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80075b6:	697b      	ldr	r3, [r7, #20]
 80075b8:	68ba      	ldr	r2, [r7, #8]
 80075ba:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80075be:	697b      	ldr	r3, [r7, #20]
 80075c0:	687a      	ldr	r2, [r7, #4]
 80075c2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80075c6:	2300      	movs	r3, #0
}
 80075c8:	4618      	mov	r0, r3
 80075ca:	371c      	adds	r7, #28
 80075cc:	46bd      	mov	sp, r7
 80075ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d2:	4770      	bx	lr

080075d4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80075d4:	b480      	push	{r7}
 80075d6:	b085      	sub	sp, #20
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
 80075dc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	32b0      	adds	r2, #176	; 0xb0
 80075e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075ec:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d101      	bne.n	80075f8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80075f4:	2303      	movs	r3, #3
 80075f6:	e004      	b.n	8007602 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	683a      	ldr	r2, [r7, #0]
 80075fc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007600:	2300      	movs	r3, #0
}
 8007602:	4618      	mov	r0, r3
 8007604:	3714      	adds	r7, #20
 8007606:	46bd      	mov	sp, r7
 8007608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760c:	4770      	bx	lr
	...

08007610 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b084      	sub	sp, #16
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	32b0      	adds	r2, #176	; 0xb0
 8007622:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007626:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8007628:	2301      	movs	r3, #1
 800762a:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	32b0      	adds	r2, #176	; 0xb0
 8007636:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d101      	bne.n	8007642 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800763e:	2303      	movs	r3, #3
 8007640:	e025      	b.n	800768e <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8007642:	68bb      	ldr	r3, [r7, #8]
 8007644:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007648:	2b00      	cmp	r3, #0
 800764a:	d11f      	bne.n	800768c <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800764c:	68bb      	ldr	r3, [r7, #8]
 800764e:	2201      	movs	r2, #1
 8007650:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8007654:	4b10      	ldr	r3, [pc, #64]	; (8007698 <USBD_CDC_TransmitPacket+0x88>)
 8007656:	781b      	ldrb	r3, [r3, #0]
 8007658:	f003 020f 	and.w	r2, r3, #15
 800765c:	68bb      	ldr	r3, [r7, #8]
 800765e:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8007662:	6878      	ldr	r0, [r7, #4]
 8007664:	4613      	mov	r3, r2
 8007666:	009b      	lsls	r3, r3, #2
 8007668:	4413      	add	r3, r2
 800766a:	009b      	lsls	r3, r3, #2
 800766c:	4403      	add	r3, r0
 800766e:	3318      	adds	r3, #24
 8007670:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8007672:	4b09      	ldr	r3, [pc, #36]	; (8007698 <USBD_CDC_TransmitPacket+0x88>)
 8007674:	7819      	ldrb	r1, [r3, #0]
 8007676:	68bb      	ldr	r3, [r7, #8]
 8007678:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800767c:	68bb      	ldr	r3, [r7, #8]
 800767e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007682:	6878      	ldr	r0, [r7, #4]
 8007684:	f002 f80d 	bl	80096a2 <USBD_LL_Transmit>

    ret = USBD_OK;
 8007688:	2300      	movs	r3, #0
 800768a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800768c:	7bfb      	ldrb	r3, [r7, #15]
}
 800768e:	4618      	mov	r0, r3
 8007690:	3710      	adds	r7, #16
 8007692:	46bd      	mov	sp, r7
 8007694:	bd80      	pop	{r7, pc}
 8007696:	bf00      	nop
 8007698:	200000ff 	.word	0x200000ff

0800769c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b084      	sub	sp, #16
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	32b0      	adds	r2, #176	; 0xb0
 80076ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076b2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	32b0      	adds	r2, #176	; 0xb0
 80076be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d101      	bne.n	80076ca <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80076c6:	2303      	movs	r3, #3
 80076c8:	e018      	b.n	80076fc <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	7c1b      	ldrb	r3, [r3, #16]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d10a      	bne.n	80076e8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80076d2:	4b0c      	ldr	r3, [pc, #48]	; (8007704 <USBD_CDC_ReceivePacket+0x68>)
 80076d4:	7819      	ldrb	r1, [r3, #0]
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80076dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80076e0:	6878      	ldr	r0, [r7, #4]
 80076e2:	f001 ffff 	bl	80096e4 <USBD_LL_PrepareReceive>
 80076e6:	e008      	b.n	80076fa <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80076e8:	4b06      	ldr	r3, [pc, #24]	; (8007704 <USBD_CDC_ReceivePacket+0x68>)
 80076ea:	7819      	ldrb	r1, [r3, #0]
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80076f2:	2340      	movs	r3, #64	; 0x40
 80076f4:	6878      	ldr	r0, [r7, #4]
 80076f6:	f001 fff5 	bl	80096e4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80076fa:	2300      	movs	r3, #0
}
 80076fc:	4618      	mov	r0, r3
 80076fe:	3710      	adds	r7, #16
 8007700:	46bd      	mov	sp, r7
 8007702:	bd80      	pop	{r7, pc}
 8007704:	20000100 	.word	0x20000100

08007708 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b086      	sub	sp, #24
 800770c:	af00      	add	r7, sp, #0
 800770e:	60f8      	str	r0, [r7, #12]
 8007710:	60b9      	str	r1, [r7, #8]
 8007712:	4613      	mov	r3, r2
 8007714:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d101      	bne.n	8007720 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800771c:	2303      	movs	r3, #3
 800771e:	e01f      	b.n	8007760 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	2200      	movs	r2, #0
 8007724:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	2200      	movs	r2, #0
 800772c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	2200      	movs	r2, #0
 8007734:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007738:	68bb      	ldr	r3, [r7, #8]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d003      	beq.n	8007746 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	68ba      	ldr	r2, [r7, #8]
 8007742:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	2201      	movs	r2, #1
 800774a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	79fa      	ldrb	r2, [r7, #7]
 8007752:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007754:	68f8      	ldr	r0, [r7, #12]
 8007756:	f001 fe6f 	bl	8009438 <USBD_LL_Init>
 800775a:	4603      	mov	r3, r0
 800775c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800775e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007760:	4618      	mov	r0, r3
 8007762:	3718      	adds	r7, #24
 8007764:	46bd      	mov	sp, r7
 8007766:	bd80      	pop	{r7, pc}

08007768 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b084      	sub	sp, #16
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
 8007770:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007772:	2300      	movs	r3, #0
 8007774:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d101      	bne.n	8007780 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800777c:	2303      	movs	r3, #3
 800777e:	e025      	b.n	80077cc <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	683a      	ldr	r2, [r7, #0]
 8007784:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	32ae      	adds	r2, #174	; 0xae
 8007792:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007798:	2b00      	cmp	r3, #0
 800779a:	d00f      	beq.n	80077bc <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	32ae      	adds	r2, #174	; 0xae
 80077a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077ac:	f107 020e 	add.w	r2, r7, #14
 80077b0:	4610      	mov	r0, r2
 80077b2:	4798      	blx	r3
 80077b4:	4602      	mov	r2, r0
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80077c2:	1c5a      	adds	r2, r3, #1
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80077ca:	2300      	movs	r3, #0
}
 80077cc:	4618      	mov	r0, r3
 80077ce:	3710      	adds	r7, #16
 80077d0:	46bd      	mov	sp, r7
 80077d2:	bd80      	pop	{r7, pc}

080077d4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b082      	sub	sp, #8
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80077dc:	6878      	ldr	r0, [r7, #4]
 80077de:	f001 fe77 	bl	80094d0 <USBD_LL_Start>
 80077e2:	4603      	mov	r3, r0
}
 80077e4:	4618      	mov	r0, r3
 80077e6:	3708      	adds	r7, #8
 80077e8:	46bd      	mov	sp, r7
 80077ea:	bd80      	pop	{r7, pc}

080077ec <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80077ec:	b480      	push	{r7}
 80077ee:	b083      	sub	sp, #12
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80077f4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80077f6:	4618      	mov	r0, r3
 80077f8:	370c      	adds	r7, #12
 80077fa:	46bd      	mov	sp, r7
 80077fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007800:	4770      	bx	lr

08007802 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007802:	b580      	push	{r7, lr}
 8007804:	b084      	sub	sp, #16
 8007806:	af00      	add	r7, sp, #0
 8007808:	6078      	str	r0, [r7, #4]
 800780a:	460b      	mov	r3, r1
 800780c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800780e:	2300      	movs	r3, #0
 8007810:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007818:	2b00      	cmp	r3, #0
 800781a:	d009      	beq.n	8007830 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	78fa      	ldrb	r2, [r7, #3]
 8007826:	4611      	mov	r1, r2
 8007828:	6878      	ldr	r0, [r7, #4]
 800782a:	4798      	blx	r3
 800782c:	4603      	mov	r3, r0
 800782e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007830:	7bfb      	ldrb	r3, [r7, #15]
}
 8007832:	4618      	mov	r0, r3
 8007834:	3710      	adds	r7, #16
 8007836:	46bd      	mov	sp, r7
 8007838:	bd80      	pop	{r7, pc}

0800783a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800783a:	b580      	push	{r7, lr}
 800783c:	b084      	sub	sp, #16
 800783e:	af00      	add	r7, sp, #0
 8007840:	6078      	str	r0, [r7, #4]
 8007842:	460b      	mov	r3, r1
 8007844:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007846:	2300      	movs	r3, #0
 8007848:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007850:	685b      	ldr	r3, [r3, #4]
 8007852:	78fa      	ldrb	r2, [r7, #3]
 8007854:	4611      	mov	r1, r2
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	4798      	blx	r3
 800785a:	4603      	mov	r3, r0
 800785c:	2b00      	cmp	r3, #0
 800785e:	d001      	beq.n	8007864 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007860:	2303      	movs	r3, #3
 8007862:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007864:	7bfb      	ldrb	r3, [r7, #15]
}
 8007866:	4618      	mov	r0, r3
 8007868:	3710      	adds	r7, #16
 800786a:	46bd      	mov	sp, r7
 800786c:	bd80      	pop	{r7, pc}

0800786e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800786e:	b580      	push	{r7, lr}
 8007870:	b084      	sub	sp, #16
 8007872:	af00      	add	r7, sp, #0
 8007874:	6078      	str	r0, [r7, #4]
 8007876:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800787e:	6839      	ldr	r1, [r7, #0]
 8007880:	4618      	mov	r0, r3
 8007882:	f001 f908 	bl	8008a96 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	2201      	movs	r2, #1
 800788a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007894:	461a      	mov	r2, r3
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80078a2:	f003 031f 	and.w	r3, r3, #31
 80078a6:	2b02      	cmp	r3, #2
 80078a8:	d01a      	beq.n	80078e0 <USBD_LL_SetupStage+0x72>
 80078aa:	2b02      	cmp	r3, #2
 80078ac:	d822      	bhi.n	80078f4 <USBD_LL_SetupStage+0x86>
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d002      	beq.n	80078b8 <USBD_LL_SetupStage+0x4a>
 80078b2:	2b01      	cmp	r3, #1
 80078b4:	d00a      	beq.n	80078cc <USBD_LL_SetupStage+0x5e>
 80078b6:	e01d      	b.n	80078f4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80078be:	4619      	mov	r1, r3
 80078c0:	6878      	ldr	r0, [r7, #4]
 80078c2:	f000 fb5f 	bl	8007f84 <USBD_StdDevReq>
 80078c6:	4603      	mov	r3, r0
 80078c8:	73fb      	strb	r3, [r7, #15]
      break;
 80078ca:	e020      	b.n	800790e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80078d2:	4619      	mov	r1, r3
 80078d4:	6878      	ldr	r0, [r7, #4]
 80078d6:	f000 fbc7 	bl	8008068 <USBD_StdItfReq>
 80078da:	4603      	mov	r3, r0
 80078dc:	73fb      	strb	r3, [r7, #15]
      break;
 80078de:	e016      	b.n	800790e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80078e6:	4619      	mov	r1, r3
 80078e8:	6878      	ldr	r0, [r7, #4]
 80078ea:	f000 fc29 	bl	8008140 <USBD_StdEPReq>
 80078ee:	4603      	mov	r3, r0
 80078f0:	73fb      	strb	r3, [r7, #15]
      break;
 80078f2:	e00c      	b.n	800790e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80078fa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80078fe:	b2db      	uxtb	r3, r3
 8007900:	4619      	mov	r1, r3
 8007902:	6878      	ldr	r0, [r7, #4]
 8007904:	f001 fe44 	bl	8009590 <USBD_LL_StallEP>
 8007908:	4603      	mov	r3, r0
 800790a:	73fb      	strb	r3, [r7, #15]
      break;
 800790c:	bf00      	nop
  }

  return ret;
 800790e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007910:	4618      	mov	r0, r3
 8007912:	3710      	adds	r7, #16
 8007914:	46bd      	mov	sp, r7
 8007916:	bd80      	pop	{r7, pc}

08007918 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b086      	sub	sp, #24
 800791c:	af00      	add	r7, sp, #0
 800791e:	60f8      	str	r0, [r7, #12]
 8007920:	460b      	mov	r3, r1
 8007922:	607a      	str	r2, [r7, #4]
 8007924:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007926:	2300      	movs	r3, #0
 8007928:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800792a:	7afb      	ldrb	r3, [r7, #11]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d16e      	bne.n	8007a0e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007936:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800793e:	2b03      	cmp	r3, #3
 8007940:	f040 8098 	bne.w	8007a74 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007944:	693b      	ldr	r3, [r7, #16]
 8007946:	689a      	ldr	r2, [r3, #8]
 8007948:	693b      	ldr	r3, [r7, #16]
 800794a:	68db      	ldr	r3, [r3, #12]
 800794c:	429a      	cmp	r2, r3
 800794e:	d913      	bls.n	8007978 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007950:	693b      	ldr	r3, [r7, #16]
 8007952:	689a      	ldr	r2, [r3, #8]
 8007954:	693b      	ldr	r3, [r7, #16]
 8007956:	68db      	ldr	r3, [r3, #12]
 8007958:	1ad2      	subs	r2, r2, r3
 800795a:	693b      	ldr	r3, [r7, #16]
 800795c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800795e:	693b      	ldr	r3, [r7, #16]
 8007960:	68da      	ldr	r2, [r3, #12]
 8007962:	693b      	ldr	r3, [r7, #16]
 8007964:	689b      	ldr	r3, [r3, #8]
 8007966:	4293      	cmp	r3, r2
 8007968:	bf28      	it	cs
 800796a:	4613      	movcs	r3, r2
 800796c:	461a      	mov	r2, r3
 800796e:	6879      	ldr	r1, [r7, #4]
 8007970:	68f8      	ldr	r0, [r7, #12]
 8007972:	f001 f984 	bl	8008c7e <USBD_CtlContinueRx>
 8007976:	e07d      	b.n	8007a74 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800797e:	f003 031f 	and.w	r3, r3, #31
 8007982:	2b02      	cmp	r3, #2
 8007984:	d014      	beq.n	80079b0 <USBD_LL_DataOutStage+0x98>
 8007986:	2b02      	cmp	r3, #2
 8007988:	d81d      	bhi.n	80079c6 <USBD_LL_DataOutStage+0xae>
 800798a:	2b00      	cmp	r3, #0
 800798c:	d002      	beq.n	8007994 <USBD_LL_DataOutStage+0x7c>
 800798e:	2b01      	cmp	r3, #1
 8007990:	d003      	beq.n	800799a <USBD_LL_DataOutStage+0x82>
 8007992:	e018      	b.n	80079c6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007994:	2300      	movs	r3, #0
 8007996:	75bb      	strb	r3, [r7, #22]
            break;
 8007998:	e018      	b.n	80079cc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80079a0:	b2db      	uxtb	r3, r3
 80079a2:	4619      	mov	r1, r3
 80079a4:	68f8      	ldr	r0, [r7, #12]
 80079a6:	f000 fa5e 	bl	8007e66 <USBD_CoreFindIF>
 80079aa:	4603      	mov	r3, r0
 80079ac:	75bb      	strb	r3, [r7, #22]
            break;
 80079ae:	e00d      	b.n	80079cc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80079b6:	b2db      	uxtb	r3, r3
 80079b8:	4619      	mov	r1, r3
 80079ba:	68f8      	ldr	r0, [r7, #12]
 80079bc:	f000 fa60 	bl	8007e80 <USBD_CoreFindEP>
 80079c0:	4603      	mov	r3, r0
 80079c2:	75bb      	strb	r3, [r7, #22]
            break;
 80079c4:	e002      	b.n	80079cc <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80079c6:	2300      	movs	r3, #0
 80079c8:	75bb      	strb	r3, [r7, #22]
            break;
 80079ca:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80079cc:	7dbb      	ldrb	r3, [r7, #22]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d119      	bne.n	8007a06 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079d8:	b2db      	uxtb	r3, r3
 80079da:	2b03      	cmp	r3, #3
 80079dc:	d113      	bne.n	8007a06 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80079de:	7dba      	ldrb	r2, [r7, #22]
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	32ae      	adds	r2, #174	; 0xae
 80079e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079e8:	691b      	ldr	r3, [r3, #16]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d00b      	beq.n	8007a06 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80079ee:	7dba      	ldrb	r2, [r7, #22]
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80079f6:	7dba      	ldrb	r2, [r7, #22]
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	32ae      	adds	r2, #174	; 0xae
 80079fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a00:	691b      	ldr	r3, [r3, #16]
 8007a02:	68f8      	ldr	r0, [r7, #12]
 8007a04:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007a06:	68f8      	ldr	r0, [r7, #12]
 8007a08:	f001 f94a 	bl	8008ca0 <USBD_CtlSendStatus>
 8007a0c:	e032      	b.n	8007a74 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007a0e:	7afb      	ldrb	r3, [r7, #11]
 8007a10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a14:	b2db      	uxtb	r3, r3
 8007a16:	4619      	mov	r1, r3
 8007a18:	68f8      	ldr	r0, [r7, #12]
 8007a1a:	f000 fa31 	bl	8007e80 <USBD_CoreFindEP>
 8007a1e:	4603      	mov	r3, r0
 8007a20:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007a22:	7dbb      	ldrb	r3, [r7, #22]
 8007a24:	2bff      	cmp	r3, #255	; 0xff
 8007a26:	d025      	beq.n	8007a74 <USBD_LL_DataOutStage+0x15c>
 8007a28:	7dbb      	ldrb	r3, [r7, #22]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d122      	bne.n	8007a74 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a34:	b2db      	uxtb	r3, r3
 8007a36:	2b03      	cmp	r3, #3
 8007a38:	d117      	bne.n	8007a6a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007a3a:	7dba      	ldrb	r2, [r7, #22]
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	32ae      	adds	r2, #174	; 0xae
 8007a40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a44:	699b      	ldr	r3, [r3, #24]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d00f      	beq.n	8007a6a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007a4a:	7dba      	ldrb	r2, [r7, #22]
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007a52:	7dba      	ldrb	r2, [r7, #22]
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	32ae      	adds	r2, #174	; 0xae
 8007a58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a5c:	699b      	ldr	r3, [r3, #24]
 8007a5e:	7afa      	ldrb	r2, [r7, #11]
 8007a60:	4611      	mov	r1, r2
 8007a62:	68f8      	ldr	r0, [r7, #12]
 8007a64:	4798      	blx	r3
 8007a66:	4603      	mov	r3, r0
 8007a68:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007a6a:	7dfb      	ldrb	r3, [r7, #23]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d001      	beq.n	8007a74 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007a70:	7dfb      	ldrb	r3, [r7, #23]
 8007a72:	e000      	b.n	8007a76 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007a74:	2300      	movs	r3, #0
}
 8007a76:	4618      	mov	r0, r3
 8007a78:	3718      	adds	r7, #24
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	bd80      	pop	{r7, pc}

08007a7e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007a7e:	b580      	push	{r7, lr}
 8007a80:	b086      	sub	sp, #24
 8007a82:	af00      	add	r7, sp, #0
 8007a84:	60f8      	str	r0, [r7, #12]
 8007a86:	460b      	mov	r3, r1
 8007a88:	607a      	str	r2, [r7, #4]
 8007a8a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007a8c:	7afb      	ldrb	r3, [r7, #11]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d16f      	bne.n	8007b72 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	3314      	adds	r3, #20
 8007a96:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007a9e:	2b02      	cmp	r3, #2
 8007aa0:	d15a      	bne.n	8007b58 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007aa2:	693b      	ldr	r3, [r7, #16]
 8007aa4:	689a      	ldr	r2, [r3, #8]
 8007aa6:	693b      	ldr	r3, [r7, #16]
 8007aa8:	68db      	ldr	r3, [r3, #12]
 8007aaa:	429a      	cmp	r2, r3
 8007aac:	d914      	bls.n	8007ad8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007aae:	693b      	ldr	r3, [r7, #16]
 8007ab0:	689a      	ldr	r2, [r3, #8]
 8007ab2:	693b      	ldr	r3, [r7, #16]
 8007ab4:	68db      	ldr	r3, [r3, #12]
 8007ab6:	1ad2      	subs	r2, r2, r3
 8007ab8:	693b      	ldr	r3, [r7, #16]
 8007aba:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007abc:	693b      	ldr	r3, [r7, #16]
 8007abe:	689b      	ldr	r3, [r3, #8]
 8007ac0:	461a      	mov	r2, r3
 8007ac2:	6879      	ldr	r1, [r7, #4]
 8007ac4:	68f8      	ldr	r0, [r7, #12]
 8007ac6:	f001 f8ac 	bl	8008c22 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007aca:	2300      	movs	r3, #0
 8007acc:	2200      	movs	r2, #0
 8007ace:	2100      	movs	r1, #0
 8007ad0:	68f8      	ldr	r0, [r7, #12]
 8007ad2:	f001 fe07 	bl	80096e4 <USBD_LL_PrepareReceive>
 8007ad6:	e03f      	b.n	8007b58 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007ad8:	693b      	ldr	r3, [r7, #16]
 8007ada:	68da      	ldr	r2, [r3, #12]
 8007adc:	693b      	ldr	r3, [r7, #16]
 8007ade:	689b      	ldr	r3, [r3, #8]
 8007ae0:	429a      	cmp	r2, r3
 8007ae2:	d11c      	bne.n	8007b1e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007ae4:	693b      	ldr	r3, [r7, #16]
 8007ae6:	685a      	ldr	r2, [r3, #4]
 8007ae8:	693b      	ldr	r3, [r7, #16]
 8007aea:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007aec:	429a      	cmp	r2, r3
 8007aee:	d316      	bcc.n	8007b1e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007af0:	693b      	ldr	r3, [r7, #16]
 8007af2:	685a      	ldr	r2, [r3, #4]
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007afa:	429a      	cmp	r2, r3
 8007afc:	d20f      	bcs.n	8007b1e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007afe:	2200      	movs	r2, #0
 8007b00:	2100      	movs	r1, #0
 8007b02:	68f8      	ldr	r0, [r7, #12]
 8007b04:	f001 f88d 	bl	8008c22 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007b10:	2300      	movs	r3, #0
 8007b12:	2200      	movs	r2, #0
 8007b14:	2100      	movs	r1, #0
 8007b16:	68f8      	ldr	r0, [r7, #12]
 8007b18:	f001 fde4 	bl	80096e4 <USBD_LL_PrepareReceive>
 8007b1c:	e01c      	b.n	8007b58 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b24:	b2db      	uxtb	r3, r3
 8007b26:	2b03      	cmp	r3, #3
 8007b28:	d10f      	bne.n	8007b4a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b30:	68db      	ldr	r3, [r3, #12]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d009      	beq.n	8007b4a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	2200      	movs	r2, #0
 8007b3a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b44:	68db      	ldr	r3, [r3, #12]
 8007b46:	68f8      	ldr	r0, [r7, #12]
 8007b48:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007b4a:	2180      	movs	r1, #128	; 0x80
 8007b4c:	68f8      	ldr	r0, [r7, #12]
 8007b4e:	f001 fd1f 	bl	8009590 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007b52:	68f8      	ldr	r0, [r7, #12]
 8007b54:	f001 f8b7 	bl	8008cc6 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d03a      	beq.n	8007bd8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007b62:	68f8      	ldr	r0, [r7, #12]
 8007b64:	f7ff fe42 	bl	80077ec <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007b70:	e032      	b.n	8007bd8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007b72:	7afb      	ldrb	r3, [r7, #11]
 8007b74:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007b78:	b2db      	uxtb	r3, r3
 8007b7a:	4619      	mov	r1, r3
 8007b7c:	68f8      	ldr	r0, [r7, #12]
 8007b7e:	f000 f97f 	bl	8007e80 <USBD_CoreFindEP>
 8007b82:	4603      	mov	r3, r0
 8007b84:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007b86:	7dfb      	ldrb	r3, [r7, #23]
 8007b88:	2bff      	cmp	r3, #255	; 0xff
 8007b8a:	d025      	beq.n	8007bd8 <USBD_LL_DataInStage+0x15a>
 8007b8c:	7dfb      	ldrb	r3, [r7, #23]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d122      	bne.n	8007bd8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b98:	b2db      	uxtb	r3, r3
 8007b9a:	2b03      	cmp	r3, #3
 8007b9c:	d11c      	bne.n	8007bd8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007b9e:	7dfa      	ldrb	r2, [r7, #23]
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	32ae      	adds	r2, #174	; 0xae
 8007ba4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ba8:	695b      	ldr	r3, [r3, #20]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d014      	beq.n	8007bd8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007bae:	7dfa      	ldrb	r2, [r7, #23]
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007bb6:	7dfa      	ldrb	r2, [r7, #23]
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	32ae      	adds	r2, #174	; 0xae
 8007bbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bc0:	695b      	ldr	r3, [r3, #20]
 8007bc2:	7afa      	ldrb	r2, [r7, #11]
 8007bc4:	4611      	mov	r1, r2
 8007bc6:	68f8      	ldr	r0, [r7, #12]
 8007bc8:	4798      	blx	r3
 8007bca:	4603      	mov	r3, r0
 8007bcc:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007bce:	7dbb      	ldrb	r3, [r7, #22]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d001      	beq.n	8007bd8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007bd4:	7dbb      	ldrb	r3, [r7, #22]
 8007bd6:	e000      	b.n	8007bda <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007bd8:	2300      	movs	r3, #0
}
 8007bda:	4618      	mov	r0, r3
 8007bdc:	3718      	adds	r7, #24
 8007bde:	46bd      	mov	sp, r7
 8007be0:	bd80      	pop	{r7, pc}

08007be2 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007be2:	b580      	push	{r7, lr}
 8007be4:	b084      	sub	sp, #16
 8007be6:	af00      	add	r7, sp, #0
 8007be8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007bea:	2300      	movs	r3, #0
 8007bec:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2201      	movs	r2, #1
 8007bf2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	2200      	movs	r2, #0
 8007c02:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2200      	movs	r2, #0
 8007c08:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2200      	movs	r2, #0
 8007c10:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d014      	beq.n	8007c48 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c24:	685b      	ldr	r3, [r3, #4]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d00e      	beq.n	8007c48 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c30:	685b      	ldr	r3, [r3, #4]
 8007c32:	687a      	ldr	r2, [r7, #4]
 8007c34:	6852      	ldr	r2, [r2, #4]
 8007c36:	b2d2      	uxtb	r2, r2
 8007c38:	4611      	mov	r1, r2
 8007c3a:	6878      	ldr	r0, [r7, #4]
 8007c3c:	4798      	blx	r3
 8007c3e:	4603      	mov	r3, r0
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d001      	beq.n	8007c48 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007c44:	2303      	movs	r3, #3
 8007c46:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007c48:	2340      	movs	r3, #64	; 0x40
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	2100      	movs	r1, #0
 8007c4e:	6878      	ldr	r0, [r7, #4]
 8007c50:	f001 fc59 	bl	8009506 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2201      	movs	r2, #1
 8007c58:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2240      	movs	r2, #64	; 0x40
 8007c60:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007c64:	2340      	movs	r3, #64	; 0x40
 8007c66:	2200      	movs	r2, #0
 8007c68:	2180      	movs	r1, #128	; 0x80
 8007c6a:	6878      	ldr	r0, [r7, #4]
 8007c6c:	f001 fc4b 	bl	8009506 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2201      	movs	r2, #1
 8007c74:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	2240      	movs	r2, #64	; 0x40
 8007c7a:	621a      	str	r2, [r3, #32]

  return ret;
 8007c7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c7e:	4618      	mov	r0, r3
 8007c80:	3710      	adds	r7, #16
 8007c82:	46bd      	mov	sp, r7
 8007c84:	bd80      	pop	{r7, pc}

08007c86 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007c86:	b480      	push	{r7}
 8007c88:	b083      	sub	sp, #12
 8007c8a:	af00      	add	r7, sp, #0
 8007c8c:	6078      	str	r0, [r7, #4]
 8007c8e:	460b      	mov	r3, r1
 8007c90:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	78fa      	ldrb	r2, [r7, #3]
 8007c96:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007c98:	2300      	movs	r3, #0
}
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	370c      	adds	r7, #12
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca4:	4770      	bx	lr

08007ca6 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007ca6:	b480      	push	{r7}
 8007ca8:	b083      	sub	sp, #12
 8007caa:	af00      	add	r7, sp, #0
 8007cac:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007cb4:	b2da      	uxtb	r2, r3
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2204      	movs	r2, #4
 8007cc0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007cc4:	2300      	movs	r3, #0
}
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	370c      	adds	r7, #12
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd0:	4770      	bx	lr

08007cd2 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007cd2:	b480      	push	{r7}
 8007cd4:	b083      	sub	sp, #12
 8007cd6:	af00      	add	r7, sp, #0
 8007cd8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ce0:	b2db      	uxtb	r3, r3
 8007ce2:	2b04      	cmp	r3, #4
 8007ce4:	d106      	bne.n	8007cf4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007cec:	b2da      	uxtb	r2, r3
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007cf4:	2300      	movs	r3, #0
}
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	370c      	adds	r7, #12
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d00:	4770      	bx	lr

08007d02 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007d02:	b580      	push	{r7, lr}
 8007d04:	b082      	sub	sp, #8
 8007d06:	af00      	add	r7, sp, #0
 8007d08:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d10:	b2db      	uxtb	r3, r3
 8007d12:	2b03      	cmp	r3, #3
 8007d14:	d110      	bne.n	8007d38 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d00b      	beq.n	8007d38 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d26:	69db      	ldr	r3, [r3, #28]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d005      	beq.n	8007d38 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d32:	69db      	ldr	r3, [r3, #28]
 8007d34:	6878      	ldr	r0, [r7, #4]
 8007d36:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007d38:	2300      	movs	r3, #0
}
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	3708      	adds	r7, #8
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	bd80      	pop	{r7, pc}

08007d42 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007d42:	b580      	push	{r7, lr}
 8007d44:	b082      	sub	sp, #8
 8007d46:	af00      	add	r7, sp, #0
 8007d48:	6078      	str	r0, [r7, #4]
 8007d4a:	460b      	mov	r3, r1
 8007d4c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	32ae      	adds	r2, #174	; 0xae
 8007d58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d101      	bne.n	8007d64 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007d60:	2303      	movs	r3, #3
 8007d62:	e01c      	b.n	8007d9e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d6a:	b2db      	uxtb	r3, r3
 8007d6c:	2b03      	cmp	r3, #3
 8007d6e:	d115      	bne.n	8007d9c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	32ae      	adds	r2, #174	; 0xae
 8007d7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d7e:	6a1b      	ldr	r3, [r3, #32]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d00b      	beq.n	8007d9c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	32ae      	adds	r2, #174	; 0xae
 8007d8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d92:	6a1b      	ldr	r3, [r3, #32]
 8007d94:	78fa      	ldrb	r2, [r7, #3]
 8007d96:	4611      	mov	r1, r2
 8007d98:	6878      	ldr	r0, [r7, #4]
 8007d9a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007d9c:	2300      	movs	r3, #0
}
 8007d9e:	4618      	mov	r0, r3
 8007da0:	3708      	adds	r7, #8
 8007da2:	46bd      	mov	sp, r7
 8007da4:	bd80      	pop	{r7, pc}

08007da6 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007da6:	b580      	push	{r7, lr}
 8007da8:	b082      	sub	sp, #8
 8007daa:	af00      	add	r7, sp, #0
 8007dac:	6078      	str	r0, [r7, #4]
 8007dae:	460b      	mov	r3, r1
 8007db0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	32ae      	adds	r2, #174	; 0xae
 8007dbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d101      	bne.n	8007dc8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007dc4:	2303      	movs	r3, #3
 8007dc6:	e01c      	b.n	8007e02 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007dce:	b2db      	uxtb	r3, r3
 8007dd0:	2b03      	cmp	r3, #3
 8007dd2:	d115      	bne.n	8007e00 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	32ae      	adds	r2, #174	; 0xae
 8007dde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d00b      	beq.n	8007e00 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	32ae      	adds	r2, #174	; 0xae
 8007df2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007df8:	78fa      	ldrb	r2, [r7, #3]
 8007dfa:	4611      	mov	r1, r2
 8007dfc:	6878      	ldr	r0, [r7, #4]
 8007dfe:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007e00:	2300      	movs	r3, #0
}
 8007e02:	4618      	mov	r0, r3
 8007e04:	3708      	adds	r7, #8
 8007e06:	46bd      	mov	sp, r7
 8007e08:	bd80      	pop	{r7, pc}

08007e0a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007e0a:	b480      	push	{r7}
 8007e0c:	b083      	sub	sp, #12
 8007e0e:	af00      	add	r7, sp, #0
 8007e10:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007e12:	2300      	movs	r3, #0
}
 8007e14:	4618      	mov	r0, r3
 8007e16:	370c      	adds	r7, #12
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1e:	4770      	bx	lr

08007e20 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b084      	sub	sp, #16
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007e28:	2300      	movs	r3, #0
 8007e2a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2201      	movs	r2, #1
 8007e30:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d00e      	beq.n	8007e5c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e44:	685b      	ldr	r3, [r3, #4]
 8007e46:	687a      	ldr	r2, [r7, #4]
 8007e48:	6852      	ldr	r2, [r2, #4]
 8007e4a:	b2d2      	uxtb	r2, r2
 8007e4c:	4611      	mov	r1, r2
 8007e4e:	6878      	ldr	r0, [r7, #4]
 8007e50:	4798      	blx	r3
 8007e52:	4603      	mov	r3, r0
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d001      	beq.n	8007e5c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007e58:	2303      	movs	r3, #3
 8007e5a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007e5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e5e:	4618      	mov	r0, r3
 8007e60:	3710      	adds	r7, #16
 8007e62:	46bd      	mov	sp, r7
 8007e64:	bd80      	pop	{r7, pc}

08007e66 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007e66:	b480      	push	{r7}
 8007e68:	b083      	sub	sp, #12
 8007e6a:	af00      	add	r7, sp, #0
 8007e6c:	6078      	str	r0, [r7, #4]
 8007e6e:	460b      	mov	r3, r1
 8007e70:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007e72:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007e74:	4618      	mov	r0, r3
 8007e76:	370c      	adds	r7, #12
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7e:	4770      	bx	lr

08007e80 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007e80:	b480      	push	{r7}
 8007e82:	b083      	sub	sp, #12
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
 8007e88:	460b      	mov	r3, r1
 8007e8a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007e8c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007e8e:	4618      	mov	r0, r3
 8007e90:	370c      	adds	r7, #12
 8007e92:	46bd      	mov	sp, r7
 8007e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e98:	4770      	bx	lr

08007e9a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007e9a:	b580      	push	{r7, lr}
 8007e9c:	b086      	sub	sp, #24
 8007e9e:	af00      	add	r7, sp, #0
 8007ea0:	6078      	str	r0, [r7, #4]
 8007ea2:	460b      	mov	r3, r1
 8007ea4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007eae:	2300      	movs	r3, #0
 8007eb0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	885b      	ldrh	r3, [r3, #2]
 8007eb6:	b29a      	uxth	r2, r3
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	781b      	ldrb	r3, [r3, #0]
 8007ebc:	b29b      	uxth	r3, r3
 8007ebe:	429a      	cmp	r2, r3
 8007ec0:	d920      	bls.n	8007f04 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	781b      	ldrb	r3, [r3, #0]
 8007ec6:	b29b      	uxth	r3, r3
 8007ec8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007eca:	e013      	b.n	8007ef4 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007ecc:	f107 030a 	add.w	r3, r7, #10
 8007ed0:	4619      	mov	r1, r3
 8007ed2:	6978      	ldr	r0, [r7, #20]
 8007ed4:	f000 f81b 	bl	8007f0e <USBD_GetNextDesc>
 8007ed8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007eda:	697b      	ldr	r3, [r7, #20]
 8007edc:	785b      	ldrb	r3, [r3, #1]
 8007ede:	2b05      	cmp	r3, #5
 8007ee0:	d108      	bne.n	8007ef4 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007ee2:	697b      	ldr	r3, [r7, #20]
 8007ee4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007ee6:	693b      	ldr	r3, [r7, #16]
 8007ee8:	789b      	ldrb	r3, [r3, #2]
 8007eea:	78fa      	ldrb	r2, [r7, #3]
 8007eec:	429a      	cmp	r2, r3
 8007eee:	d008      	beq.n	8007f02 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	885b      	ldrh	r3, [r3, #2]
 8007ef8:	b29a      	uxth	r2, r3
 8007efa:	897b      	ldrh	r3, [r7, #10]
 8007efc:	429a      	cmp	r2, r3
 8007efe:	d8e5      	bhi.n	8007ecc <USBD_GetEpDesc+0x32>
 8007f00:	e000      	b.n	8007f04 <USBD_GetEpDesc+0x6a>
          break;
 8007f02:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007f04:	693b      	ldr	r3, [r7, #16]
}
 8007f06:	4618      	mov	r0, r3
 8007f08:	3718      	adds	r7, #24
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	bd80      	pop	{r7, pc}

08007f0e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007f0e:	b480      	push	{r7}
 8007f10:	b085      	sub	sp, #20
 8007f12:	af00      	add	r7, sp, #0
 8007f14:	6078      	str	r0, [r7, #4]
 8007f16:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007f1c:	683b      	ldr	r3, [r7, #0]
 8007f1e:	881a      	ldrh	r2, [r3, #0]
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	781b      	ldrb	r3, [r3, #0]
 8007f24:	b29b      	uxth	r3, r3
 8007f26:	4413      	add	r3, r2
 8007f28:	b29a      	uxth	r2, r3
 8007f2a:	683b      	ldr	r3, [r7, #0]
 8007f2c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	781b      	ldrb	r3, [r3, #0]
 8007f32:	461a      	mov	r2, r3
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	4413      	add	r3, r2
 8007f38:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007f3a:	68fb      	ldr	r3, [r7, #12]
}
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	3714      	adds	r7, #20
 8007f40:	46bd      	mov	sp, r7
 8007f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f46:	4770      	bx	lr

08007f48 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007f48:	b480      	push	{r7}
 8007f4a:	b087      	sub	sp, #28
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007f54:	697b      	ldr	r3, [r7, #20]
 8007f56:	781b      	ldrb	r3, [r3, #0]
 8007f58:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007f5a:	697b      	ldr	r3, [r7, #20]
 8007f5c:	3301      	adds	r3, #1
 8007f5e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007f60:	697b      	ldr	r3, [r7, #20]
 8007f62:	781b      	ldrb	r3, [r3, #0]
 8007f64:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007f66:	8a3b      	ldrh	r3, [r7, #16]
 8007f68:	021b      	lsls	r3, r3, #8
 8007f6a:	b21a      	sxth	r2, r3
 8007f6c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007f70:	4313      	orrs	r3, r2
 8007f72:	b21b      	sxth	r3, r3
 8007f74:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007f76:	89fb      	ldrh	r3, [r7, #14]
}
 8007f78:	4618      	mov	r0, r3
 8007f7a:	371c      	adds	r7, #28
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f82:	4770      	bx	lr

08007f84 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b084      	sub	sp, #16
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
 8007f8c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007f8e:	2300      	movs	r3, #0
 8007f90:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	781b      	ldrb	r3, [r3, #0]
 8007f96:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007f9a:	2b40      	cmp	r3, #64	; 0x40
 8007f9c:	d005      	beq.n	8007faa <USBD_StdDevReq+0x26>
 8007f9e:	2b40      	cmp	r3, #64	; 0x40
 8007fa0:	d857      	bhi.n	8008052 <USBD_StdDevReq+0xce>
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d00f      	beq.n	8007fc6 <USBD_StdDevReq+0x42>
 8007fa6:	2b20      	cmp	r3, #32
 8007fa8:	d153      	bne.n	8008052 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	32ae      	adds	r2, #174	; 0xae
 8007fb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fb8:	689b      	ldr	r3, [r3, #8]
 8007fba:	6839      	ldr	r1, [r7, #0]
 8007fbc:	6878      	ldr	r0, [r7, #4]
 8007fbe:	4798      	blx	r3
 8007fc0:	4603      	mov	r3, r0
 8007fc2:	73fb      	strb	r3, [r7, #15]
      break;
 8007fc4:	e04a      	b.n	800805c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007fc6:	683b      	ldr	r3, [r7, #0]
 8007fc8:	785b      	ldrb	r3, [r3, #1]
 8007fca:	2b09      	cmp	r3, #9
 8007fcc:	d83b      	bhi.n	8008046 <USBD_StdDevReq+0xc2>
 8007fce:	a201      	add	r2, pc, #4	; (adr r2, 8007fd4 <USBD_StdDevReq+0x50>)
 8007fd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fd4:	08008029 	.word	0x08008029
 8007fd8:	0800803d 	.word	0x0800803d
 8007fdc:	08008047 	.word	0x08008047
 8007fe0:	08008033 	.word	0x08008033
 8007fe4:	08008047 	.word	0x08008047
 8007fe8:	08008007 	.word	0x08008007
 8007fec:	08007ffd 	.word	0x08007ffd
 8007ff0:	08008047 	.word	0x08008047
 8007ff4:	0800801f 	.word	0x0800801f
 8007ff8:	08008011 	.word	0x08008011
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007ffc:	6839      	ldr	r1, [r7, #0]
 8007ffe:	6878      	ldr	r0, [r7, #4]
 8008000:	f000 fa3c 	bl	800847c <USBD_GetDescriptor>
          break;
 8008004:	e024      	b.n	8008050 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008006:	6839      	ldr	r1, [r7, #0]
 8008008:	6878      	ldr	r0, [r7, #4]
 800800a:	f000 fba1 	bl	8008750 <USBD_SetAddress>
          break;
 800800e:	e01f      	b.n	8008050 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008010:	6839      	ldr	r1, [r7, #0]
 8008012:	6878      	ldr	r0, [r7, #4]
 8008014:	f000 fbe0 	bl	80087d8 <USBD_SetConfig>
 8008018:	4603      	mov	r3, r0
 800801a:	73fb      	strb	r3, [r7, #15]
          break;
 800801c:	e018      	b.n	8008050 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800801e:	6839      	ldr	r1, [r7, #0]
 8008020:	6878      	ldr	r0, [r7, #4]
 8008022:	f000 fc83 	bl	800892c <USBD_GetConfig>
          break;
 8008026:	e013      	b.n	8008050 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008028:	6839      	ldr	r1, [r7, #0]
 800802a:	6878      	ldr	r0, [r7, #4]
 800802c:	f000 fcb4 	bl	8008998 <USBD_GetStatus>
          break;
 8008030:	e00e      	b.n	8008050 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008032:	6839      	ldr	r1, [r7, #0]
 8008034:	6878      	ldr	r0, [r7, #4]
 8008036:	f000 fce3 	bl	8008a00 <USBD_SetFeature>
          break;
 800803a:	e009      	b.n	8008050 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800803c:	6839      	ldr	r1, [r7, #0]
 800803e:	6878      	ldr	r0, [r7, #4]
 8008040:	f000 fd07 	bl	8008a52 <USBD_ClrFeature>
          break;
 8008044:	e004      	b.n	8008050 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008046:	6839      	ldr	r1, [r7, #0]
 8008048:	6878      	ldr	r0, [r7, #4]
 800804a:	f000 fd5e 	bl	8008b0a <USBD_CtlError>
          break;
 800804e:	bf00      	nop
      }
      break;
 8008050:	e004      	b.n	800805c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008052:	6839      	ldr	r1, [r7, #0]
 8008054:	6878      	ldr	r0, [r7, #4]
 8008056:	f000 fd58 	bl	8008b0a <USBD_CtlError>
      break;
 800805a:	bf00      	nop
  }

  return ret;
 800805c:	7bfb      	ldrb	r3, [r7, #15]
}
 800805e:	4618      	mov	r0, r3
 8008060:	3710      	adds	r7, #16
 8008062:	46bd      	mov	sp, r7
 8008064:	bd80      	pop	{r7, pc}
 8008066:	bf00      	nop

08008068 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008068:	b580      	push	{r7, lr}
 800806a:	b084      	sub	sp, #16
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
 8008070:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008072:	2300      	movs	r3, #0
 8008074:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	781b      	ldrb	r3, [r3, #0]
 800807a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800807e:	2b40      	cmp	r3, #64	; 0x40
 8008080:	d005      	beq.n	800808e <USBD_StdItfReq+0x26>
 8008082:	2b40      	cmp	r3, #64	; 0x40
 8008084:	d852      	bhi.n	800812c <USBD_StdItfReq+0xc4>
 8008086:	2b00      	cmp	r3, #0
 8008088:	d001      	beq.n	800808e <USBD_StdItfReq+0x26>
 800808a:	2b20      	cmp	r3, #32
 800808c:	d14e      	bne.n	800812c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008094:	b2db      	uxtb	r3, r3
 8008096:	3b01      	subs	r3, #1
 8008098:	2b02      	cmp	r3, #2
 800809a:	d840      	bhi.n	800811e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	889b      	ldrh	r3, [r3, #4]
 80080a0:	b2db      	uxtb	r3, r3
 80080a2:	2b01      	cmp	r3, #1
 80080a4:	d836      	bhi.n	8008114 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	889b      	ldrh	r3, [r3, #4]
 80080aa:	b2db      	uxtb	r3, r3
 80080ac:	4619      	mov	r1, r3
 80080ae:	6878      	ldr	r0, [r7, #4]
 80080b0:	f7ff fed9 	bl	8007e66 <USBD_CoreFindIF>
 80080b4:	4603      	mov	r3, r0
 80080b6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80080b8:	7bbb      	ldrb	r3, [r7, #14]
 80080ba:	2bff      	cmp	r3, #255	; 0xff
 80080bc:	d01d      	beq.n	80080fa <USBD_StdItfReq+0x92>
 80080be:	7bbb      	ldrb	r3, [r7, #14]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d11a      	bne.n	80080fa <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80080c4:	7bba      	ldrb	r2, [r7, #14]
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	32ae      	adds	r2, #174	; 0xae
 80080ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080ce:	689b      	ldr	r3, [r3, #8]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d00f      	beq.n	80080f4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80080d4:	7bba      	ldrb	r2, [r7, #14]
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80080dc:	7bba      	ldrb	r2, [r7, #14]
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	32ae      	adds	r2, #174	; 0xae
 80080e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080e6:	689b      	ldr	r3, [r3, #8]
 80080e8:	6839      	ldr	r1, [r7, #0]
 80080ea:	6878      	ldr	r0, [r7, #4]
 80080ec:	4798      	blx	r3
 80080ee:	4603      	mov	r3, r0
 80080f0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80080f2:	e004      	b.n	80080fe <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80080f4:	2303      	movs	r3, #3
 80080f6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80080f8:	e001      	b.n	80080fe <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80080fa:	2303      	movs	r3, #3
 80080fc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	88db      	ldrh	r3, [r3, #6]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d110      	bne.n	8008128 <USBD_StdItfReq+0xc0>
 8008106:	7bfb      	ldrb	r3, [r7, #15]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d10d      	bne.n	8008128 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800810c:	6878      	ldr	r0, [r7, #4]
 800810e:	f000 fdc7 	bl	8008ca0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008112:	e009      	b.n	8008128 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008114:	6839      	ldr	r1, [r7, #0]
 8008116:	6878      	ldr	r0, [r7, #4]
 8008118:	f000 fcf7 	bl	8008b0a <USBD_CtlError>
          break;
 800811c:	e004      	b.n	8008128 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800811e:	6839      	ldr	r1, [r7, #0]
 8008120:	6878      	ldr	r0, [r7, #4]
 8008122:	f000 fcf2 	bl	8008b0a <USBD_CtlError>
          break;
 8008126:	e000      	b.n	800812a <USBD_StdItfReq+0xc2>
          break;
 8008128:	bf00      	nop
      }
      break;
 800812a:	e004      	b.n	8008136 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800812c:	6839      	ldr	r1, [r7, #0]
 800812e:	6878      	ldr	r0, [r7, #4]
 8008130:	f000 fceb 	bl	8008b0a <USBD_CtlError>
      break;
 8008134:	bf00      	nop
  }

  return ret;
 8008136:	7bfb      	ldrb	r3, [r7, #15]
}
 8008138:	4618      	mov	r0, r3
 800813a:	3710      	adds	r7, #16
 800813c:	46bd      	mov	sp, r7
 800813e:	bd80      	pop	{r7, pc}

08008140 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b084      	sub	sp, #16
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
 8008148:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800814a:	2300      	movs	r3, #0
 800814c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800814e:	683b      	ldr	r3, [r7, #0]
 8008150:	889b      	ldrh	r3, [r3, #4]
 8008152:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008154:	683b      	ldr	r3, [r7, #0]
 8008156:	781b      	ldrb	r3, [r3, #0]
 8008158:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800815c:	2b40      	cmp	r3, #64	; 0x40
 800815e:	d007      	beq.n	8008170 <USBD_StdEPReq+0x30>
 8008160:	2b40      	cmp	r3, #64	; 0x40
 8008162:	f200 817f 	bhi.w	8008464 <USBD_StdEPReq+0x324>
 8008166:	2b00      	cmp	r3, #0
 8008168:	d02a      	beq.n	80081c0 <USBD_StdEPReq+0x80>
 800816a:	2b20      	cmp	r3, #32
 800816c:	f040 817a 	bne.w	8008464 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008170:	7bbb      	ldrb	r3, [r7, #14]
 8008172:	4619      	mov	r1, r3
 8008174:	6878      	ldr	r0, [r7, #4]
 8008176:	f7ff fe83 	bl	8007e80 <USBD_CoreFindEP>
 800817a:	4603      	mov	r3, r0
 800817c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800817e:	7b7b      	ldrb	r3, [r7, #13]
 8008180:	2bff      	cmp	r3, #255	; 0xff
 8008182:	f000 8174 	beq.w	800846e <USBD_StdEPReq+0x32e>
 8008186:	7b7b      	ldrb	r3, [r7, #13]
 8008188:	2b00      	cmp	r3, #0
 800818a:	f040 8170 	bne.w	800846e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800818e:	7b7a      	ldrb	r2, [r7, #13]
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008196:	7b7a      	ldrb	r2, [r7, #13]
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	32ae      	adds	r2, #174	; 0xae
 800819c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081a0:	689b      	ldr	r3, [r3, #8]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	f000 8163 	beq.w	800846e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80081a8:	7b7a      	ldrb	r2, [r7, #13]
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	32ae      	adds	r2, #174	; 0xae
 80081ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081b2:	689b      	ldr	r3, [r3, #8]
 80081b4:	6839      	ldr	r1, [r7, #0]
 80081b6:	6878      	ldr	r0, [r7, #4]
 80081b8:	4798      	blx	r3
 80081ba:	4603      	mov	r3, r0
 80081bc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80081be:	e156      	b.n	800846e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	785b      	ldrb	r3, [r3, #1]
 80081c4:	2b03      	cmp	r3, #3
 80081c6:	d008      	beq.n	80081da <USBD_StdEPReq+0x9a>
 80081c8:	2b03      	cmp	r3, #3
 80081ca:	f300 8145 	bgt.w	8008458 <USBD_StdEPReq+0x318>
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	f000 809b 	beq.w	800830a <USBD_StdEPReq+0x1ca>
 80081d4:	2b01      	cmp	r3, #1
 80081d6:	d03c      	beq.n	8008252 <USBD_StdEPReq+0x112>
 80081d8:	e13e      	b.n	8008458 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081e0:	b2db      	uxtb	r3, r3
 80081e2:	2b02      	cmp	r3, #2
 80081e4:	d002      	beq.n	80081ec <USBD_StdEPReq+0xac>
 80081e6:	2b03      	cmp	r3, #3
 80081e8:	d016      	beq.n	8008218 <USBD_StdEPReq+0xd8>
 80081ea:	e02c      	b.n	8008246 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80081ec:	7bbb      	ldrb	r3, [r7, #14]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d00d      	beq.n	800820e <USBD_StdEPReq+0xce>
 80081f2:	7bbb      	ldrb	r3, [r7, #14]
 80081f4:	2b80      	cmp	r3, #128	; 0x80
 80081f6:	d00a      	beq.n	800820e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80081f8:	7bbb      	ldrb	r3, [r7, #14]
 80081fa:	4619      	mov	r1, r3
 80081fc:	6878      	ldr	r0, [r7, #4]
 80081fe:	f001 f9c7 	bl	8009590 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008202:	2180      	movs	r1, #128	; 0x80
 8008204:	6878      	ldr	r0, [r7, #4]
 8008206:	f001 f9c3 	bl	8009590 <USBD_LL_StallEP>
 800820a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800820c:	e020      	b.n	8008250 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800820e:	6839      	ldr	r1, [r7, #0]
 8008210:	6878      	ldr	r0, [r7, #4]
 8008212:	f000 fc7a 	bl	8008b0a <USBD_CtlError>
              break;
 8008216:	e01b      	b.n	8008250 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	885b      	ldrh	r3, [r3, #2]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d10e      	bne.n	800823e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008220:	7bbb      	ldrb	r3, [r7, #14]
 8008222:	2b00      	cmp	r3, #0
 8008224:	d00b      	beq.n	800823e <USBD_StdEPReq+0xfe>
 8008226:	7bbb      	ldrb	r3, [r7, #14]
 8008228:	2b80      	cmp	r3, #128	; 0x80
 800822a:	d008      	beq.n	800823e <USBD_StdEPReq+0xfe>
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	88db      	ldrh	r3, [r3, #6]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d104      	bne.n	800823e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008234:	7bbb      	ldrb	r3, [r7, #14]
 8008236:	4619      	mov	r1, r3
 8008238:	6878      	ldr	r0, [r7, #4]
 800823a:	f001 f9a9 	bl	8009590 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800823e:	6878      	ldr	r0, [r7, #4]
 8008240:	f000 fd2e 	bl	8008ca0 <USBD_CtlSendStatus>

              break;
 8008244:	e004      	b.n	8008250 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008246:	6839      	ldr	r1, [r7, #0]
 8008248:	6878      	ldr	r0, [r7, #4]
 800824a:	f000 fc5e 	bl	8008b0a <USBD_CtlError>
              break;
 800824e:	bf00      	nop
          }
          break;
 8008250:	e107      	b.n	8008462 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008258:	b2db      	uxtb	r3, r3
 800825a:	2b02      	cmp	r3, #2
 800825c:	d002      	beq.n	8008264 <USBD_StdEPReq+0x124>
 800825e:	2b03      	cmp	r3, #3
 8008260:	d016      	beq.n	8008290 <USBD_StdEPReq+0x150>
 8008262:	e04b      	b.n	80082fc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008264:	7bbb      	ldrb	r3, [r7, #14]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d00d      	beq.n	8008286 <USBD_StdEPReq+0x146>
 800826a:	7bbb      	ldrb	r3, [r7, #14]
 800826c:	2b80      	cmp	r3, #128	; 0x80
 800826e:	d00a      	beq.n	8008286 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008270:	7bbb      	ldrb	r3, [r7, #14]
 8008272:	4619      	mov	r1, r3
 8008274:	6878      	ldr	r0, [r7, #4]
 8008276:	f001 f98b 	bl	8009590 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800827a:	2180      	movs	r1, #128	; 0x80
 800827c:	6878      	ldr	r0, [r7, #4]
 800827e:	f001 f987 	bl	8009590 <USBD_LL_StallEP>
 8008282:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008284:	e040      	b.n	8008308 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8008286:	6839      	ldr	r1, [r7, #0]
 8008288:	6878      	ldr	r0, [r7, #4]
 800828a:	f000 fc3e 	bl	8008b0a <USBD_CtlError>
              break;
 800828e:	e03b      	b.n	8008308 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008290:	683b      	ldr	r3, [r7, #0]
 8008292:	885b      	ldrh	r3, [r3, #2]
 8008294:	2b00      	cmp	r3, #0
 8008296:	d136      	bne.n	8008306 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008298:	7bbb      	ldrb	r3, [r7, #14]
 800829a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d004      	beq.n	80082ac <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80082a2:	7bbb      	ldrb	r3, [r7, #14]
 80082a4:	4619      	mov	r1, r3
 80082a6:	6878      	ldr	r0, [r7, #4]
 80082a8:	f001 f991 	bl	80095ce <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80082ac:	6878      	ldr	r0, [r7, #4]
 80082ae:	f000 fcf7 	bl	8008ca0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80082b2:	7bbb      	ldrb	r3, [r7, #14]
 80082b4:	4619      	mov	r1, r3
 80082b6:	6878      	ldr	r0, [r7, #4]
 80082b8:	f7ff fde2 	bl	8007e80 <USBD_CoreFindEP>
 80082bc:	4603      	mov	r3, r0
 80082be:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80082c0:	7b7b      	ldrb	r3, [r7, #13]
 80082c2:	2bff      	cmp	r3, #255	; 0xff
 80082c4:	d01f      	beq.n	8008306 <USBD_StdEPReq+0x1c6>
 80082c6:	7b7b      	ldrb	r3, [r7, #13]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d11c      	bne.n	8008306 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80082cc:	7b7a      	ldrb	r2, [r7, #13]
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80082d4:	7b7a      	ldrb	r2, [r7, #13]
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	32ae      	adds	r2, #174	; 0xae
 80082da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082de:	689b      	ldr	r3, [r3, #8]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d010      	beq.n	8008306 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80082e4:	7b7a      	ldrb	r2, [r7, #13]
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	32ae      	adds	r2, #174	; 0xae
 80082ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082ee:	689b      	ldr	r3, [r3, #8]
 80082f0:	6839      	ldr	r1, [r7, #0]
 80082f2:	6878      	ldr	r0, [r7, #4]
 80082f4:	4798      	blx	r3
 80082f6:	4603      	mov	r3, r0
 80082f8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80082fa:	e004      	b.n	8008306 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80082fc:	6839      	ldr	r1, [r7, #0]
 80082fe:	6878      	ldr	r0, [r7, #4]
 8008300:	f000 fc03 	bl	8008b0a <USBD_CtlError>
              break;
 8008304:	e000      	b.n	8008308 <USBD_StdEPReq+0x1c8>
              break;
 8008306:	bf00      	nop
          }
          break;
 8008308:	e0ab      	b.n	8008462 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008310:	b2db      	uxtb	r3, r3
 8008312:	2b02      	cmp	r3, #2
 8008314:	d002      	beq.n	800831c <USBD_StdEPReq+0x1dc>
 8008316:	2b03      	cmp	r3, #3
 8008318:	d032      	beq.n	8008380 <USBD_StdEPReq+0x240>
 800831a:	e097      	b.n	800844c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800831c:	7bbb      	ldrb	r3, [r7, #14]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d007      	beq.n	8008332 <USBD_StdEPReq+0x1f2>
 8008322:	7bbb      	ldrb	r3, [r7, #14]
 8008324:	2b80      	cmp	r3, #128	; 0x80
 8008326:	d004      	beq.n	8008332 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008328:	6839      	ldr	r1, [r7, #0]
 800832a:	6878      	ldr	r0, [r7, #4]
 800832c:	f000 fbed 	bl	8008b0a <USBD_CtlError>
                break;
 8008330:	e091      	b.n	8008456 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008332:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008336:	2b00      	cmp	r3, #0
 8008338:	da0b      	bge.n	8008352 <USBD_StdEPReq+0x212>
 800833a:	7bbb      	ldrb	r3, [r7, #14]
 800833c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008340:	4613      	mov	r3, r2
 8008342:	009b      	lsls	r3, r3, #2
 8008344:	4413      	add	r3, r2
 8008346:	009b      	lsls	r3, r3, #2
 8008348:	3310      	adds	r3, #16
 800834a:	687a      	ldr	r2, [r7, #4]
 800834c:	4413      	add	r3, r2
 800834e:	3304      	adds	r3, #4
 8008350:	e00b      	b.n	800836a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008352:	7bbb      	ldrb	r3, [r7, #14]
 8008354:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008358:	4613      	mov	r3, r2
 800835a:	009b      	lsls	r3, r3, #2
 800835c:	4413      	add	r3, r2
 800835e:	009b      	lsls	r3, r3, #2
 8008360:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008364:	687a      	ldr	r2, [r7, #4]
 8008366:	4413      	add	r3, r2
 8008368:	3304      	adds	r3, #4
 800836a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800836c:	68bb      	ldr	r3, [r7, #8]
 800836e:	2200      	movs	r2, #0
 8008370:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008372:	68bb      	ldr	r3, [r7, #8]
 8008374:	2202      	movs	r2, #2
 8008376:	4619      	mov	r1, r3
 8008378:	6878      	ldr	r0, [r7, #4]
 800837a:	f000 fc37 	bl	8008bec <USBD_CtlSendData>
              break;
 800837e:	e06a      	b.n	8008456 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008380:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008384:	2b00      	cmp	r3, #0
 8008386:	da11      	bge.n	80083ac <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008388:	7bbb      	ldrb	r3, [r7, #14]
 800838a:	f003 020f 	and.w	r2, r3, #15
 800838e:	6879      	ldr	r1, [r7, #4]
 8008390:	4613      	mov	r3, r2
 8008392:	009b      	lsls	r3, r3, #2
 8008394:	4413      	add	r3, r2
 8008396:	009b      	lsls	r3, r3, #2
 8008398:	440b      	add	r3, r1
 800839a:	3324      	adds	r3, #36	; 0x24
 800839c:	881b      	ldrh	r3, [r3, #0]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d117      	bne.n	80083d2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80083a2:	6839      	ldr	r1, [r7, #0]
 80083a4:	6878      	ldr	r0, [r7, #4]
 80083a6:	f000 fbb0 	bl	8008b0a <USBD_CtlError>
                  break;
 80083aa:	e054      	b.n	8008456 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80083ac:	7bbb      	ldrb	r3, [r7, #14]
 80083ae:	f003 020f 	and.w	r2, r3, #15
 80083b2:	6879      	ldr	r1, [r7, #4]
 80083b4:	4613      	mov	r3, r2
 80083b6:	009b      	lsls	r3, r3, #2
 80083b8:	4413      	add	r3, r2
 80083ba:	009b      	lsls	r3, r3, #2
 80083bc:	440b      	add	r3, r1
 80083be:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80083c2:	881b      	ldrh	r3, [r3, #0]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d104      	bne.n	80083d2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80083c8:	6839      	ldr	r1, [r7, #0]
 80083ca:	6878      	ldr	r0, [r7, #4]
 80083cc:	f000 fb9d 	bl	8008b0a <USBD_CtlError>
                  break;
 80083d0:	e041      	b.n	8008456 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80083d2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	da0b      	bge.n	80083f2 <USBD_StdEPReq+0x2b2>
 80083da:	7bbb      	ldrb	r3, [r7, #14]
 80083dc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80083e0:	4613      	mov	r3, r2
 80083e2:	009b      	lsls	r3, r3, #2
 80083e4:	4413      	add	r3, r2
 80083e6:	009b      	lsls	r3, r3, #2
 80083e8:	3310      	adds	r3, #16
 80083ea:	687a      	ldr	r2, [r7, #4]
 80083ec:	4413      	add	r3, r2
 80083ee:	3304      	adds	r3, #4
 80083f0:	e00b      	b.n	800840a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80083f2:	7bbb      	ldrb	r3, [r7, #14]
 80083f4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80083f8:	4613      	mov	r3, r2
 80083fa:	009b      	lsls	r3, r3, #2
 80083fc:	4413      	add	r3, r2
 80083fe:	009b      	lsls	r3, r3, #2
 8008400:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008404:	687a      	ldr	r2, [r7, #4]
 8008406:	4413      	add	r3, r2
 8008408:	3304      	adds	r3, #4
 800840a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800840c:	7bbb      	ldrb	r3, [r7, #14]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d002      	beq.n	8008418 <USBD_StdEPReq+0x2d8>
 8008412:	7bbb      	ldrb	r3, [r7, #14]
 8008414:	2b80      	cmp	r3, #128	; 0x80
 8008416:	d103      	bne.n	8008420 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008418:	68bb      	ldr	r3, [r7, #8]
 800841a:	2200      	movs	r2, #0
 800841c:	601a      	str	r2, [r3, #0]
 800841e:	e00e      	b.n	800843e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008420:	7bbb      	ldrb	r3, [r7, #14]
 8008422:	4619      	mov	r1, r3
 8008424:	6878      	ldr	r0, [r7, #4]
 8008426:	f001 f8f1 	bl	800960c <USBD_LL_IsStallEP>
 800842a:	4603      	mov	r3, r0
 800842c:	2b00      	cmp	r3, #0
 800842e:	d003      	beq.n	8008438 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008430:	68bb      	ldr	r3, [r7, #8]
 8008432:	2201      	movs	r2, #1
 8008434:	601a      	str	r2, [r3, #0]
 8008436:	e002      	b.n	800843e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008438:	68bb      	ldr	r3, [r7, #8]
 800843a:	2200      	movs	r2, #0
 800843c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800843e:	68bb      	ldr	r3, [r7, #8]
 8008440:	2202      	movs	r2, #2
 8008442:	4619      	mov	r1, r3
 8008444:	6878      	ldr	r0, [r7, #4]
 8008446:	f000 fbd1 	bl	8008bec <USBD_CtlSendData>
              break;
 800844a:	e004      	b.n	8008456 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800844c:	6839      	ldr	r1, [r7, #0]
 800844e:	6878      	ldr	r0, [r7, #4]
 8008450:	f000 fb5b 	bl	8008b0a <USBD_CtlError>
              break;
 8008454:	bf00      	nop
          }
          break;
 8008456:	e004      	b.n	8008462 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008458:	6839      	ldr	r1, [r7, #0]
 800845a:	6878      	ldr	r0, [r7, #4]
 800845c:	f000 fb55 	bl	8008b0a <USBD_CtlError>
          break;
 8008460:	bf00      	nop
      }
      break;
 8008462:	e005      	b.n	8008470 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008464:	6839      	ldr	r1, [r7, #0]
 8008466:	6878      	ldr	r0, [r7, #4]
 8008468:	f000 fb4f 	bl	8008b0a <USBD_CtlError>
      break;
 800846c:	e000      	b.n	8008470 <USBD_StdEPReq+0x330>
      break;
 800846e:	bf00      	nop
  }

  return ret;
 8008470:	7bfb      	ldrb	r3, [r7, #15]
}
 8008472:	4618      	mov	r0, r3
 8008474:	3710      	adds	r7, #16
 8008476:	46bd      	mov	sp, r7
 8008478:	bd80      	pop	{r7, pc}
	...

0800847c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800847c:	b580      	push	{r7, lr}
 800847e:	b084      	sub	sp, #16
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
 8008484:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008486:	2300      	movs	r3, #0
 8008488:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800848a:	2300      	movs	r3, #0
 800848c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800848e:	2300      	movs	r3, #0
 8008490:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008492:	683b      	ldr	r3, [r7, #0]
 8008494:	885b      	ldrh	r3, [r3, #2]
 8008496:	0a1b      	lsrs	r3, r3, #8
 8008498:	b29b      	uxth	r3, r3
 800849a:	3b01      	subs	r3, #1
 800849c:	2b06      	cmp	r3, #6
 800849e:	f200 8128 	bhi.w	80086f2 <USBD_GetDescriptor+0x276>
 80084a2:	a201      	add	r2, pc, #4	; (adr r2, 80084a8 <USBD_GetDescriptor+0x2c>)
 80084a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084a8:	080084c5 	.word	0x080084c5
 80084ac:	080084dd 	.word	0x080084dd
 80084b0:	0800851d 	.word	0x0800851d
 80084b4:	080086f3 	.word	0x080086f3
 80084b8:	080086f3 	.word	0x080086f3
 80084bc:	08008693 	.word	0x08008693
 80084c0:	080086bf 	.word	0x080086bf
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	687a      	ldr	r2, [r7, #4]
 80084ce:	7c12      	ldrb	r2, [r2, #16]
 80084d0:	f107 0108 	add.w	r1, r7, #8
 80084d4:	4610      	mov	r0, r2
 80084d6:	4798      	blx	r3
 80084d8:	60f8      	str	r0, [r7, #12]
      break;
 80084da:	e112      	b.n	8008702 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	7c1b      	ldrb	r3, [r3, #16]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d10d      	bne.n	8008500 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084ec:	f107 0208 	add.w	r2, r7, #8
 80084f0:	4610      	mov	r0, r2
 80084f2:	4798      	blx	r3
 80084f4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	3301      	adds	r3, #1
 80084fa:	2202      	movs	r2, #2
 80084fc:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80084fe:	e100      	b.n	8008702 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008508:	f107 0208 	add.w	r2, r7, #8
 800850c:	4610      	mov	r0, r2
 800850e:	4798      	blx	r3
 8008510:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	3301      	adds	r3, #1
 8008516:	2202      	movs	r2, #2
 8008518:	701a      	strb	r2, [r3, #0]
      break;
 800851a:	e0f2      	b.n	8008702 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800851c:	683b      	ldr	r3, [r7, #0]
 800851e:	885b      	ldrh	r3, [r3, #2]
 8008520:	b2db      	uxtb	r3, r3
 8008522:	2b05      	cmp	r3, #5
 8008524:	f200 80ac 	bhi.w	8008680 <USBD_GetDescriptor+0x204>
 8008528:	a201      	add	r2, pc, #4	; (adr r2, 8008530 <USBD_GetDescriptor+0xb4>)
 800852a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800852e:	bf00      	nop
 8008530:	08008549 	.word	0x08008549
 8008534:	0800857d 	.word	0x0800857d
 8008538:	080085b1 	.word	0x080085b1
 800853c:	080085e5 	.word	0x080085e5
 8008540:	08008619 	.word	0x08008619
 8008544:	0800864d 	.word	0x0800864d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800854e:	685b      	ldr	r3, [r3, #4]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d00b      	beq.n	800856c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800855a:	685b      	ldr	r3, [r3, #4]
 800855c:	687a      	ldr	r2, [r7, #4]
 800855e:	7c12      	ldrb	r2, [r2, #16]
 8008560:	f107 0108 	add.w	r1, r7, #8
 8008564:	4610      	mov	r0, r2
 8008566:	4798      	blx	r3
 8008568:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800856a:	e091      	b.n	8008690 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800856c:	6839      	ldr	r1, [r7, #0]
 800856e:	6878      	ldr	r0, [r7, #4]
 8008570:	f000 facb 	bl	8008b0a <USBD_CtlError>
            err++;
 8008574:	7afb      	ldrb	r3, [r7, #11]
 8008576:	3301      	adds	r3, #1
 8008578:	72fb      	strb	r3, [r7, #11]
          break;
 800857a:	e089      	b.n	8008690 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008582:	689b      	ldr	r3, [r3, #8]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d00b      	beq.n	80085a0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800858e:	689b      	ldr	r3, [r3, #8]
 8008590:	687a      	ldr	r2, [r7, #4]
 8008592:	7c12      	ldrb	r2, [r2, #16]
 8008594:	f107 0108 	add.w	r1, r7, #8
 8008598:	4610      	mov	r0, r2
 800859a:	4798      	blx	r3
 800859c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800859e:	e077      	b.n	8008690 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80085a0:	6839      	ldr	r1, [r7, #0]
 80085a2:	6878      	ldr	r0, [r7, #4]
 80085a4:	f000 fab1 	bl	8008b0a <USBD_CtlError>
            err++;
 80085a8:	7afb      	ldrb	r3, [r7, #11]
 80085aa:	3301      	adds	r3, #1
 80085ac:	72fb      	strb	r3, [r7, #11]
          break;
 80085ae:	e06f      	b.n	8008690 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085b6:	68db      	ldr	r3, [r3, #12]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d00b      	beq.n	80085d4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085c2:	68db      	ldr	r3, [r3, #12]
 80085c4:	687a      	ldr	r2, [r7, #4]
 80085c6:	7c12      	ldrb	r2, [r2, #16]
 80085c8:	f107 0108 	add.w	r1, r7, #8
 80085cc:	4610      	mov	r0, r2
 80085ce:	4798      	blx	r3
 80085d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80085d2:	e05d      	b.n	8008690 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80085d4:	6839      	ldr	r1, [r7, #0]
 80085d6:	6878      	ldr	r0, [r7, #4]
 80085d8:	f000 fa97 	bl	8008b0a <USBD_CtlError>
            err++;
 80085dc:	7afb      	ldrb	r3, [r7, #11]
 80085de:	3301      	adds	r3, #1
 80085e0:	72fb      	strb	r3, [r7, #11]
          break;
 80085e2:	e055      	b.n	8008690 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085ea:	691b      	ldr	r3, [r3, #16]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d00b      	beq.n	8008608 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085f6:	691b      	ldr	r3, [r3, #16]
 80085f8:	687a      	ldr	r2, [r7, #4]
 80085fa:	7c12      	ldrb	r2, [r2, #16]
 80085fc:	f107 0108 	add.w	r1, r7, #8
 8008600:	4610      	mov	r0, r2
 8008602:	4798      	blx	r3
 8008604:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008606:	e043      	b.n	8008690 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008608:	6839      	ldr	r1, [r7, #0]
 800860a:	6878      	ldr	r0, [r7, #4]
 800860c:	f000 fa7d 	bl	8008b0a <USBD_CtlError>
            err++;
 8008610:	7afb      	ldrb	r3, [r7, #11]
 8008612:	3301      	adds	r3, #1
 8008614:	72fb      	strb	r3, [r7, #11]
          break;
 8008616:	e03b      	b.n	8008690 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800861e:	695b      	ldr	r3, [r3, #20]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d00b      	beq.n	800863c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800862a:	695b      	ldr	r3, [r3, #20]
 800862c:	687a      	ldr	r2, [r7, #4]
 800862e:	7c12      	ldrb	r2, [r2, #16]
 8008630:	f107 0108 	add.w	r1, r7, #8
 8008634:	4610      	mov	r0, r2
 8008636:	4798      	blx	r3
 8008638:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800863a:	e029      	b.n	8008690 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800863c:	6839      	ldr	r1, [r7, #0]
 800863e:	6878      	ldr	r0, [r7, #4]
 8008640:	f000 fa63 	bl	8008b0a <USBD_CtlError>
            err++;
 8008644:	7afb      	ldrb	r3, [r7, #11]
 8008646:	3301      	adds	r3, #1
 8008648:	72fb      	strb	r3, [r7, #11]
          break;
 800864a:	e021      	b.n	8008690 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008652:	699b      	ldr	r3, [r3, #24]
 8008654:	2b00      	cmp	r3, #0
 8008656:	d00b      	beq.n	8008670 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800865e:	699b      	ldr	r3, [r3, #24]
 8008660:	687a      	ldr	r2, [r7, #4]
 8008662:	7c12      	ldrb	r2, [r2, #16]
 8008664:	f107 0108 	add.w	r1, r7, #8
 8008668:	4610      	mov	r0, r2
 800866a:	4798      	blx	r3
 800866c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800866e:	e00f      	b.n	8008690 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008670:	6839      	ldr	r1, [r7, #0]
 8008672:	6878      	ldr	r0, [r7, #4]
 8008674:	f000 fa49 	bl	8008b0a <USBD_CtlError>
            err++;
 8008678:	7afb      	ldrb	r3, [r7, #11]
 800867a:	3301      	adds	r3, #1
 800867c:	72fb      	strb	r3, [r7, #11]
          break;
 800867e:	e007      	b.n	8008690 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008680:	6839      	ldr	r1, [r7, #0]
 8008682:	6878      	ldr	r0, [r7, #4]
 8008684:	f000 fa41 	bl	8008b0a <USBD_CtlError>
          err++;
 8008688:	7afb      	ldrb	r3, [r7, #11]
 800868a:	3301      	adds	r3, #1
 800868c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800868e:	bf00      	nop
      }
      break;
 8008690:	e037      	b.n	8008702 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	7c1b      	ldrb	r3, [r3, #16]
 8008696:	2b00      	cmp	r3, #0
 8008698:	d109      	bne.n	80086ae <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086a2:	f107 0208 	add.w	r2, r7, #8
 80086a6:	4610      	mov	r0, r2
 80086a8:	4798      	blx	r3
 80086aa:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80086ac:	e029      	b.n	8008702 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80086ae:	6839      	ldr	r1, [r7, #0]
 80086b0:	6878      	ldr	r0, [r7, #4]
 80086b2:	f000 fa2a 	bl	8008b0a <USBD_CtlError>
        err++;
 80086b6:	7afb      	ldrb	r3, [r7, #11]
 80086b8:	3301      	adds	r3, #1
 80086ba:	72fb      	strb	r3, [r7, #11]
      break;
 80086bc:	e021      	b.n	8008702 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	7c1b      	ldrb	r3, [r3, #16]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d10d      	bne.n	80086e2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086ce:	f107 0208 	add.w	r2, r7, #8
 80086d2:	4610      	mov	r0, r2
 80086d4:	4798      	blx	r3
 80086d6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	3301      	adds	r3, #1
 80086dc:	2207      	movs	r2, #7
 80086de:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80086e0:	e00f      	b.n	8008702 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80086e2:	6839      	ldr	r1, [r7, #0]
 80086e4:	6878      	ldr	r0, [r7, #4]
 80086e6:	f000 fa10 	bl	8008b0a <USBD_CtlError>
        err++;
 80086ea:	7afb      	ldrb	r3, [r7, #11]
 80086ec:	3301      	adds	r3, #1
 80086ee:	72fb      	strb	r3, [r7, #11]
      break;
 80086f0:	e007      	b.n	8008702 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80086f2:	6839      	ldr	r1, [r7, #0]
 80086f4:	6878      	ldr	r0, [r7, #4]
 80086f6:	f000 fa08 	bl	8008b0a <USBD_CtlError>
      err++;
 80086fa:	7afb      	ldrb	r3, [r7, #11]
 80086fc:	3301      	adds	r3, #1
 80086fe:	72fb      	strb	r3, [r7, #11]
      break;
 8008700:	bf00      	nop
  }

  if (err != 0U)
 8008702:	7afb      	ldrb	r3, [r7, #11]
 8008704:	2b00      	cmp	r3, #0
 8008706:	d11e      	bne.n	8008746 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008708:	683b      	ldr	r3, [r7, #0]
 800870a:	88db      	ldrh	r3, [r3, #6]
 800870c:	2b00      	cmp	r3, #0
 800870e:	d016      	beq.n	800873e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008710:	893b      	ldrh	r3, [r7, #8]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d00e      	beq.n	8008734 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8008716:	683b      	ldr	r3, [r7, #0]
 8008718:	88da      	ldrh	r2, [r3, #6]
 800871a:	893b      	ldrh	r3, [r7, #8]
 800871c:	4293      	cmp	r3, r2
 800871e:	bf28      	it	cs
 8008720:	4613      	movcs	r3, r2
 8008722:	b29b      	uxth	r3, r3
 8008724:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008726:	893b      	ldrh	r3, [r7, #8]
 8008728:	461a      	mov	r2, r3
 800872a:	68f9      	ldr	r1, [r7, #12]
 800872c:	6878      	ldr	r0, [r7, #4]
 800872e:	f000 fa5d 	bl	8008bec <USBD_CtlSendData>
 8008732:	e009      	b.n	8008748 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008734:	6839      	ldr	r1, [r7, #0]
 8008736:	6878      	ldr	r0, [r7, #4]
 8008738:	f000 f9e7 	bl	8008b0a <USBD_CtlError>
 800873c:	e004      	b.n	8008748 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800873e:	6878      	ldr	r0, [r7, #4]
 8008740:	f000 faae 	bl	8008ca0 <USBD_CtlSendStatus>
 8008744:	e000      	b.n	8008748 <USBD_GetDescriptor+0x2cc>
    return;
 8008746:	bf00      	nop
  }
}
 8008748:	3710      	adds	r7, #16
 800874a:	46bd      	mov	sp, r7
 800874c:	bd80      	pop	{r7, pc}
 800874e:	bf00      	nop

08008750 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008750:	b580      	push	{r7, lr}
 8008752:	b084      	sub	sp, #16
 8008754:	af00      	add	r7, sp, #0
 8008756:	6078      	str	r0, [r7, #4]
 8008758:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800875a:	683b      	ldr	r3, [r7, #0]
 800875c:	889b      	ldrh	r3, [r3, #4]
 800875e:	2b00      	cmp	r3, #0
 8008760:	d131      	bne.n	80087c6 <USBD_SetAddress+0x76>
 8008762:	683b      	ldr	r3, [r7, #0]
 8008764:	88db      	ldrh	r3, [r3, #6]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d12d      	bne.n	80087c6 <USBD_SetAddress+0x76>
 800876a:	683b      	ldr	r3, [r7, #0]
 800876c:	885b      	ldrh	r3, [r3, #2]
 800876e:	2b7f      	cmp	r3, #127	; 0x7f
 8008770:	d829      	bhi.n	80087c6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008772:	683b      	ldr	r3, [r7, #0]
 8008774:	885b      	ldrh	r3, [r3, #2]
 8008776:	b2db      	uxtb	r3, r3
 8008778:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800877c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008784:	b2db      	uxtb	r3, r3
 8008786:	2b03      	cmp	r3, #3
 8008788:	d104      	bne.n	8008794 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800878a:	6839      	ldr	r1, [r7, #0]
 800878c:	6878      	ldr	r0, [r7, #4]
 800878e:	f000 f9bc 	bl	8008b0a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008792:	e01d      	b.n	80087d0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	7bfa      	ldrb	r2, [r7, #15]
 8008798:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800879c:	7bfb      	ldrb	r3, [r7, #15]
 800879e:	4619      	mov	r1, r3
 80087a0:	6878      	ldr	r0, [r7, #4]
 80087a2:	f000 ff5f 	bl	8009664 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80087a6:	6878      	ldr	r0, [r7, #4]
 80087a8:	f000 fa7a 	bl	8008ca0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80087ac:	7bfb      	ldrb	r3, [r7, #15]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d004      	beq.n	80087bc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	2202      	movs	r2, #2
 80087b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087ba:	e009      	b.n	80087d0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2201      	movs	r2, #1
 80087c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087c4:	e004      	b.n	80087d0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80087c6:	6839      	ldr	r1, [r7, #0]
 80087c8:	6878      	ldr	r0, [r7, #4]
 80087ca:	f000 f99e 	bl	8008b0a <USBD_CtlError>
  }
}
 80087ce:	bf00      	nop
 80087d0:	bf00      	nop
 80087d2:	3710      	adds	r7, #16
 80087d4:	46bd      	mov	sp, r7
 80087d6:	bd80      	pop	{r7, pc}

080087d8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087d8:	b580      	push	{r7, lr}
 80087da:	b084      	sub	sp, #16
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
 80087e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80087e2:	2300      	movs	r3, #0
 80087e4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80087e6:	683b      	ldr	r3, [r7, #0]
 80087e8:	885b      	ldrh	r3, [r3, #2]
 80087ea:	b2da      	uxtb	r2, r3
 80087ec:	4b4e      	ldr	r3, [pc, #312]	; (8008928 <USBD_SetConfig+0x150>)
 80087ee:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80087f0:	4b4d      	ldr	r3, [pc, #308]	; (8008928 <USBD_SetConfig+0x150>)
 80087f2:	781b      	ldrb	r3, [r3, #0]
 80087f4:	2b01      	cmp	r3, #1
 80087f6:	d905      	bls.n	8008804 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80087f8:	6839      	ldr	r1, [r7, #0]
 80087fa:	6878      	ldr	r0, [r7, #4]
 80087fc:	f000 f985 	bl	8008b0a <USBD_CtlError>
    return USBD_FAIL;
 8008800:	2303      	movs	r3, #3
 8008802:	e08c      	b.n	800891e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800880a:	b2db      	uxtb	r3, r3
 800880c:	2b02      	cmp	r3, #2
 800880e:	d002      	beq.n	8008816 <USBD_SetConfig+0x3e>
 8008810:	2b03      	cmp	r3, #3
 8008812:	d029      	beq.n	8008868 <USBD_SetConfig+0x90>
 8008814:	e075      	b.n	8008902 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008816:	4b44      	ldr	r3, [pc, #272]	; (8008928 <USBD_SetConfig+0x150>)
 8008818:	781b      	ldrb	r3, [r3, #0]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d020      	beq.n	8008860 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800881e:	4b42      	ldr	r3, [pc, #264]	; (8008928 <USBD_SetConfig+0x150>)
 8008820:	781b      	ldrb	r3, [r3, #0]
 8008822:	461a      	mov	r2, r3
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008828:	4b3f      	ldr	r3, [pc, #252]	; (8008928 <USBD_SetConfig+0x150>)
 800882a:	781b      	ldrb	r3, [r3, #0]
 800882c:	4619      	mov	r1, r3
 800882e:	6878      	ldr	r0, [r7, #4]
 8008830:	f7fe ffe7 	bl	8007802 <USBD_SetClassConfig>
 8008834:	4603      	mov	r3, r0
 8008836:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008838:	7bfb      	ldrb	r3, [r7, #15]
 800883a:	2b00      	cmp	r3, #0
 800883c:	d008      	beq.n	8008850 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800883e:	6839      	ldr	r1, [r7, #0]
 8008840:	6878      	ldr	r0, [r7, #4]
 8008842:	f000 f962 	bl	8008b0a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	2202      	movs	r2, #2
 800884a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800884e:	e065      	b.n	800891c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008850:	6878      	ldr	r0, [r7, #4]
 8008852:	f000 fa25 	bl	8008ca0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	2203      	movs	r2, #3
 800885a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800885e:	e05d      	b.n	800891c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008860:	6878      	ldr	r0, [r7, #4]
 8008862:	f000 fa1d 	bl	8008ca0 <USBD_CtlSendStatus>
      break;
 8008866:	e059      	b.n	800891c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008868:	4b2f      	ldr	r3, [pc, #188]	; (8008928 <USBD_SetConfig+0x150>)
 800886a:	781b      	ldrb	r3, [r3, #0]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d112      	bne.n	8008896 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2202      	movs	r2, #2
 8008874:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008878:	4b2b      	ldr	r3, [pc, #172]	; (8008928 <USBD_SetConfig+0x150>)
 800887a:	781b      	ldrb	r3, [r3, #0]
 800887c:	461a      	mov	r2, r3
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008882:	4b29      	ldr	r3, [pc, #164]	; (8008928 <USBD_SetConfig+0x150>)
 8008884:	781b      	ldrb	r3, [r3, #0]
 8008886:	4619      	mov	r1, r3
 8008888:	6878      	ldr	r0, [r7, #4]
 800888a:	f7fe ffd6 	bl	800783a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800888e:	6878      	ldr	r0, [r7, #4]
 8008890:	f000 fa06 	bl	8008ca0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008894:	e042      	b.n	800891c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008896:	4b24      	ldr	r3, [pc, #144]	; (8008928 <USBD_SetConfig+0x150>)
 8008898:	781b      	ldrb	r3, [r3, #0]
 800889a:	461a      	mov	r2, r3
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	685b      	ldr	r3, [r3, #4]
 80088a0:	429a      	cmp	r2, r3
 80088a2:	d02a      	beq.n	80088fa <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	685b      	ldr	r3, [r3, #4]
 80088a8:	b2db      	uxtb	r3, r3
 80088aa:	4619      	mov	r1, r3
 80088ac:	6878      	ldr	r0, [r7, #4]
 80088ae:	f7fe ffc4 	bl	800783a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80088b2:	4b1d      	ldr	r3, [pc, #116]	; (8008928 <USBD_SetConfig+0x150>)
 80088b4:	781b      	ldrb	r3, [r3, #0]
 80088b6:	461a      	mov	r2, r3
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80088bc:	4b1a      	ldr	r3, [pc, #104]	; (8008928 <USBD_SetConfig+0x150>)
 80088be:	781b      	ldrb	r3, [r3, #0]
 80088c0:	4619      	mov	r1, r3
 80088c2:	6878      	ldr	r0, [r7, #4]
 80088c4:	f7fe ff9d 	bl	8007802 <USBD_SetClassConfig>
 80088c8:	4603      	mov	r3, r0
 80088ca:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80088cc:	7bfb      	ldrb	r3, [r7, #15]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d00f      	beq.n	80088f2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80088d2:	6839      	ldr	r1, [r7, #0]
 80088d4:	6878      	ldr	r0, [r7, #4]
 80088d6:	f000 f918 	bl	8008b0a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	685b      	ldr	r3, [r3, #4]
 80088de:	b2db      	uxtb	r3, r3
 80088e0:	4619      	mov	r1, r3
 80088e2:	6878      	ldr	r0, [r7, #4]
 80088e4:	f7fe ffa9 	bl	800783a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	2202      	movs	r2, #2
 80088ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80088f0:	e014      	b.n	800891c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80088f2:	6878      	ldr	r0, [r7, #4]
 80088f4:	f000 f9d4 	bl	8008ca0 <USBD_CtlSendStatus>
      break;
 80088f8:	e010      	b.n	800891c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80088fa:	6878      	ldr	r0, [r7, #4]
 80088fc:	f000 f9d0 	bl	8008ca0 <USBD_CtlSendStatus>
      break;
 8008900:	e00c      	b.n	800891c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008902:	6839      	ldr	r1, [r7, #0]
 8008904:	6878      	ldr	r0, [r7, #4]
 8008906:	f000 f900 	bl	8008b0a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800890a:	4b07      	ldr	r3, [pc, #28]	; (8008928 <USBD_SetConfig+0x150>)
 800890c:	781b      	ldrb	r3, [r3, #0]
 800890e:	4619      	mov	r1, r3
 8008910:	6878      	ldr	r0, [r7, #4]
 8008912:	f7fe ff92 	bl	800783a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008916:	2303      	movs	r3, #3
 8008918:	73fb      	strb	r3, [r7, #15]
      break;
 800891a:	bf00      	nop
  }

  return ret;
 800891c:	7bfb      	ldrb	r3, [r7, #15]
}
 800891e:	4618      	mov	r0, r3
 8008920:	3710      	adds	r7, #16
 8008922:	46bd      	mov	sp, r7
 8008924:	bd80      	pop	{r7, pc}
 8008926:	bf00      	nop
 8008928:	200003b0 	.word	0x200003b0

0800892c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800892c:	b580      	push	{r7, lr}
 800892e:	b082      	sub	sp, #8
 8008930:	af00      	add	r7, sp, #0
 8008932:	6078      	str	r0, [r7, #4]
 8008934:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008936:	683b      	ldr	r3, [r7, #0]
 8008938:	88db      	ldrh	r3, [r3, #6]
 800893a:	2b01      	cmp	r3, #1
 800893c:	d004      	beq.n	8008948 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800893e:	6839      	ldr	r1, [r7, #0]
 8008940:	6878      	ldr	r0, [r7, #4]
 8008942:	f000 f8e2 	bl	8008b0a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008946:	e023      	b.n	8008990 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800894e:	b2db      	uxtb	r3, r3
 8008950:	2b02      	cmp	r3, #2
 8008952:	dc02      	bgt.n	800895a <USBD_GetConfig+0x2e>
 8008954:	2b00      	cmp	r3, #0
 8008956:	dc03      	bgt.n	8008960 <USBD_GetConfig+0x34>
 8008958:	e015      	b.n	8008986 <USBD_GetConfig+0x5a>
 800895a:	2b03      	cmp	r3, #3
 800895c:	d00b      	beq.n	8008976 <USBD_GetConfig+0x4a>
 800895e:	e012      	b.n	8008986 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	2200      	movs	r2, #0
 8008964:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	3308      	adds	r3, #8
 800896a:	2201      	movs	r2, #1
 800896c:	4619      	mov	r1, r3
 800896e:	6878      	ldr	r0, [r7, #4]
 8008970:	f000 f93c 	bl	8008bec <USBD_CtlSendData>
        break;
 8008974:	e00c      	b.n	8008990 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	3304      	adds	r3, #4
 800897a:	2201      	movs	r2, #1
 800897c:	4619      	mov	r1, r3
 800897e:	6878      	ldr	r0, [r7, #4]
 8008980:	f000 f934 	bl	8008bec <USBD_CtlSendData>
        break;
 8008984:	e004      	b.n	8008990 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008986:	6839      	ldr	r1, [r7, #0]
 8008988:	6878      	ldr	r0, [r7, #4]
 800898a:	f000 f8be 	bl	8008b0a <USBD_CtlError>
        break;
 800898e:	bf00      	nop
}
 8008990:	bf00      	nop
 8008992:	3708      	adds	r7, #8
 8008994:	46bd      	mov	sp, r7
 8008996:	bd80      	pop	{r7, pc}

08008998 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008998:	b580      	push	{r7, lr}
 800899a:	b082      	sub	sp, #8
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
 80089a0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089a8:	b2db      	uxtb	r3, r3
 80089aa:	3b01      	subs	r3, #1
 80089ac:	2b02      	cmp	r3, #2
 80089ae:	d81e      	bhi.n	80089ee <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80089b0:	683b      	ldr	r3, [r7, #0]
 80089b2:	88db      	ldrh	r3, [r3, #6]
 80089b4:	2b02      	cmp	r3, #2
 80089b6:	d004      	beq.n	80089c2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80089b8:	6839      	ldr	r1, [r7, #0]
 80089ba:	6878      	ldr	r0, [r7, #4]
 80089bc:	f000 f8a5 	bl	8008b0a <USBD_CtlError>
        break;
 80089c0:	e01a      	b.n	80089f8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	2201      	movs	r2, #1
 80089c6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d005      	beq.n	80089de <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	68db      	ldr	r3, [r3, #12]
 80089d6:	f043 0202 	orr.w	r2, r3, #2
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	330c      	adds	r3, #12
 80089e2:	2202      	movs	r2, #2
 80089e4:	4619      	mov	r1, r3
 80089e6:	6878      	ldr	r0, [r7, #4]
 80089e8:	f000 f900 	bl	8008bec <USBD_CtlSendData>
      break;
 80089ec:	e004      	b.n	80089f8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80089ee:	6839      	ldr	r1, [r7, #0]
 80089f0:	6878      	ldr	r0, [r7, #4]
 80089f2:	f000 f88a 	bl	8008b0a <USBD_CtlError>
      break;
 80089f6:	bf00      	nop
  }
}
 80089f8:	bf00      	nop
 80089fa:	3708      	adds	r7, #8
 80089fc:	46bd      	mov	sp, r7
 80089fe:	bd80      	pop	{r7, pc}

08008a00 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a00:	b580      	push	{r7, lr}
 8008a02:	b082      	sub	sp, #8
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]
 8008a08:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008a0a:	683b      	ldr	r3, [r7, #0]
 8008a0c:	885b      	ldrh	r3, [r3, #2]
 8008a0e:	2b01      	cmp	r3, #1
 8008a10:	d107      	bne.n	8008a22 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	2201      	movs	r2, #1
 8008a16:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008a1a:	6878      	ldr	r0, [r7, #4]
 8008a1c:	f000 f940 	bl	8008ca0 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008a20:	e013      	b.n	8008a4a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008a22:	683b      	ldr	r3, [r7, #0]
 8008a24:	885b      	ldrh	r3, [r3, #2]
 8008a26:	2b02      	cmp	r3, #2
 8008a28:	d10b      	bne.n	8008a42 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8008a2a:	683b      	ldr	r3, [r7, #0]
 8008a2c:	889b      	ldrh	r3, [r3, #4]
 8008a2e:	0a1b      	lsrs	r3, r3, #8
 8008a30:	b29b      	uxth	r3, r3
 8008a32:	b2da      	uxtb	r2, r3
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008a3a:	6878      	ldr	r0, [r7, #4]
 8008a3c:	f000 f930 	bl	8008ca0 <USBD_CtlSendStatus>
}
 8008a40:	e003      	b.n	8008a4a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008a42:	6839      	ldr	r1, [r7, #0]
 8008a44:	6878      	ldr	r0, [r7, #4]
 8008a46:	f000 f860 	bl	8008b0a <USBD_CtlError>
}
 8008a4a:	bf00      	nop
 8008a4c:	3708      	adds	r7, #8
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	bd80      	pop	{r7, pc}

08008a52 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a52:	b580      	push	{r7, lr}
 8008a54:	b082      	sub	sp, #8
 8008a56:	af00      	add	r7, sp, #0
 8008a58:	6078      	str	r0, [r7, #4]
 8008a5a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a62:	b2db      	uxtb	r3, r3
 8008a64:	3b01      	subs	r3, #1
 8008a66:	2b02      	cmp	r3, #2
 8008a68:	d80b      	bhi.n	8008a82 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008a6a:	683b      	ldr	r3, [r7, #0]
 8008a6c:	885b      	ldrh	r3, [r3, #2]
 8008a6e:	2b01      	cmp	r3, #1
 8008a70:	d10c      	bne.n	8008a8c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	2200      	movs	r2, #0
 8008a76:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008a7a:	6878      	ldr	r0, [r7, #4]
 8008a7c:	f000 f910 	bl	8008ca0 <USBD_CtlSendStatus>
      }
      break;
 8008a80:	e004      	b.n	8008a8c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008a82:	6839      	ldr	r1, [r7, #0]
 8008a84:	6878      	ldr	r0, [r7, #4]
 8008a86:	f000 f840 	bl	8008b0a <USBD_CtlError>
      break;
 8008a8a:	e000      	b.n	8008a8e <USBD_ClrFeature+0x3c>
      break;
 8008a8c:	bf00      	nop
  }
}
 8008a8e:	bf00      	nop
 8008a90:	3708      	adds	r7, #8
 8008a92:	46bd      	mov	sp, r7
 8008a94:	bd80      	pop	{r7, pc}

08008a96 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008a96:	b580      	push	{r7, lr}
 8008a98:	b084      	sub	sp, #16
 8008a9a:	af00      	add	r7, sp, #0
 8008a9c:	6078      	str	r0, [r7, #4]
 8008a9e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008aa0:	683b      	ldr	r3, [r7, #0]
 8008aa2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	781a      	ldrb	r2, [r3, #0]
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	3301      	adds	r3, #1
 8008ab0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	781a      	ldrb	r2, [r3, #0]
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	3301      	adds	r3, #1
 8008abe:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008ac0:	68f8      	ldr	r0, [r7, #12]
 8008ac2:	f7ff fa41 	bl	8007f48 <SWAPBYTE>
 8008ac6:	4603      	mov	r3, r0
 8008ac8:	461a      	mov	r2, r3
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	3301      	adds	r3, #1
 8008ad2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	3301      	adds	r3, #1
 8008ad8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008ada:	68f8      	ldr	r0, [r7, #12]
 8008adc:	f7ff fa34 	bl	8007f48 <SWAPBYTE>
 8008ae0:	4603      	mov	r3, r0
 8008ae2:	461a      	mov	r2, r3
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	3301      	adds	r3, #1
 8008aec:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	3301      	adds	r3, #1
 8008af2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008af4:	68f8      	ldr	r0, [r7, #12]
 8008af6:	f7ff fa27 	bl	8007f48 <SWAPBYTE>
 8008afa:	4603      	mov	r3, r0
 8008afc:	461a      	mov	r2, r3
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	80da      	strh	r2, [r3, #6]
}
 8008b02:	bf00      	nop
 8008b04:	3710      	adds	r7, #16
 8008b06:	46bd      	mov	sp, r7
 8008b08:	bd80      	pop	{r7, pc}

08008b0a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b0a:	b580      	push	{r7, lr}
 8008b0c:	b082      	sub	sp, #8
 8008b0e:	af00      	add	r7, sp, #0
 8008b10:	6078      	str	r0, [r7, #4]
 8008b12:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008b14:	2180      	movs	r1, #128	; 0x80
 8008b16:	6878      	ldr	r0, [r7, #4]
 8008b18:	f000 fd3a 	bl	8009590 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008b1c:	2100      	movs	r1, #0
 8008b1e:	6878      	ldr	r0, [r7, #4]
 8008b20:	f000 fd36 	bl	8009590 <USBD_LL_StallEP>
}
 8008b24:	bf00      	nop
 8008b26:	3708      	adds	r7, #8
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	bd80      	pop	{r7, pc}

08008b2c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b086      	sub	sp, #24
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	60f8      	str	r0, [r7, #12]
 8008b34:	60b9      	str	r1, [r7, #8]
 8008b36:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008b38:	2300      	movs	r3, #0
 8008b3a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d036      	beq.n	8008bb0 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008b46:	6938      	ldr	r0, [r7, #16]
 8008b48:	f000 f836 	bl	8008bb8 <USBD_GetLen>
 8008b4c:	4603      	mov	r3, r0
 8008b4e:	3301      	adds	r3, #1
 8008b50:	b29b      	uxth	r3, r3
 8008b52:	005b      	lsls	r3, r3, #1
 8008b54:	b29a      	uxth	r2, r3
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008b5a:	7dfb      	ldrb	r3, [r7, #23]
 8008b5c:	68ba      	ldr	r2, [r7, #8]
 8008b5e:	4413      	add	r3, r2
 8008b60:	687a      	ldr	r2, [r7, #4]
 8008b62:	7812      	ldrb	r2, [r2, #0]
 8008b64:	701a      	strb	r2, [r3, #0]
  idx++;
 8008b66:	7dfb      	ldrb	r3, [r7, #23]
 8008b68:	3301      	adds	r3, #1
 8008b6a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008b6c:	7dfb      	ldrb	r3, [r7, #23]
 8008b6e:	68ba      	ldr	r2, [r7, #8]
 8008b70:	4413      	add	r3, r2
 8008b72:	2203      	movs	r2, #3
 8008b74:	701a      	strb	r2, [r3, #0]
  idx++;
 8008b76:	7dfb      	ldrb	r3, [r7, #23]
 8008b78:	3301      	adds	r3, #1
 8008b7a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008b7c:	e013      	b.n	8008ba6 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008b7e:	7dfb      	ldrb	r3, [r7, #23]
 8008b80:	68ba      	ldr	r2, [r7, #8]
 8008b82:	4413      	add	r3, r2
 8008b84:	693a      	ldr	r2, [r7, #16]
 8008b86:	7812      	ldrb	r2, [r2, #0]
 8008b88:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008b8a:	693b      	ldr	r3, [r7, #16]
 8008b8c:	3301      	adds	r3, #1
 8008b8e:	613b      	str	r3, [r7, #16]
    idx++;
 8008b90:	7dfb      	ldrb	r3, [r7, #23]
 8008b92:	3301      	adds	r3, #1
 8008b94:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008b96:	7dfb      	ldrb	r3, [r7, #23]
 8008b98:	68ba      	ldr	r2, [r7, #8]
 8008b9a:	4413      	add	r3, r2
 8008b9c:	2200      	movs	r2, #0
 8008b9e:	701a      	strb	r2, [r3, #0]
    idx++;
 8008ba0:	7dfb      	ldrb	r3, [r7, #23]
 8008ba2:	3301      	adds	r3, #1
 8008ba4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008ba6:	693b      	ldr	r3, [r7, #16]
 8008ba8:	781b      	ldrb	r3, [r3, #0]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d1e7      	bne.n	8008b7e <USBD_GetString+0x52>
 8008bae:	e000      	b.n	8008bb2 <USBD_GetString+0x86>
    return;
 8008bb0:	bf00      	nop
  }
}
 8008bb2:	3718      	adds	r7, #24
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	bd80      	pop	{r7, pc}

08008bb8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008bb8:	b480      	push	{r7}
 8008bba:	b085      	sub	sp, #20
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008bc8:	e005      	b.n	8008bd6 <USBD_GetLen+0x1e>
  {
    len++;
 8008bca:	7bfb      	ldrb	r3, [r7, #15]
 8008bcc:	3301      	adds	r3, #1
 8008bce:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008bd0:	68bb      	ldr	r3, [r7, #8]
 8008bd2:	3301      	adds	r3, #1
 8008bd4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008bd6:	68bb      	ldr	r3, [r7, #8]
 8008bd8:	781b      	ldrb	r3, [r3, #0]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d1f5      	bne.n	8008bca <USBD_GetLen+0x12>
  }

  return len;
 8008bde:	7bfb      	ldrb	r3, [r7, #15]
}
 8008be0:	4618      	mov	r0, r3
 8008be2:	3714      	adds	r7, #20
 8008be4:	46bd      	mov	sp, r7
 8008be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bea:	4770      	bx	lr

08008bec <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008bec:	b580      	push	{r7, lr}
 8008bee:	b084      	sub	sp, #16
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	60f8      	str	r0, [r7, #12]
 8008bf4:	60b9      	str	r1, [r7, #8]
 8008bf6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	2202      	movs	r2, #2
 8008bfc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	687a      	ldr	r2, [r7, #4]
 8008c04:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	687a      	ldr	r2, [r7, #4]
 8008c0a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	68ba      	ldr	r2, [r7, #8]
 8008c10:	2100      	movs	r1, #0
 8008c12:	68f8      	ldr	r0, [r7, #12]
 8008c14:	f000 fd45 	bl	80096a2 <USBD_LL_Transmit>

  return USBD_OK;
 8008c18:	2300      	movs	r3, #0
}
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	3710      	adds	r7, #16
 8008c1e:	46bd      	mov	sp, r7
 8008c20:	bd80      	pop	{r7, pc}

08008c22 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008c22:	b580      	push	{r7, lr}
 8008c24:	b084      	sub	sp, #16
 8008c26:	af00      	add	r7, sp, #0
 8008c28:	60f8      	str	r0, [r7, #12]
 8008c2a:	60b9      	str	r1, [r7, #8]
 8008c2c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	68ba      	ldr	r2, [r7, #8]
 8008c32:	2100      	movs	r1, #0
 8008c34:	68f8      	ldr	r0, [r7, #12]
 8008c36:	f000 fd34 	bl	80096a2 <USBD_LL_Transmit>

  return USBD_OK;
 8008c3a:	2300      	movs	r3, #0
}
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	3710      	adds	r7, #16
 8008c40:	46bd      	mov	sp, r7
 8008c42:	bd80      	pop	{r7, pc}

08008c44 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008c44:	b580      	push	{r7, lr}
 8008c46:	b084      	sub	sp, #16
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	60f8      	str	r0, [r7, #12]
 8008c4c:	60b9      	str	r1, [r7, #8]
 8008c4e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	2203      	movs	r2, #3
 8008c54:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	687a      	ldr	r2, [r7, #4]
 8008c5c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	687a      	ldr	r2, [r7, #4]
 8008c64:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	68ba      	ldr	r2, [r7, #8]
 8008c6c:	2100      	movs	r1, #0
 8008c6e:	68f8      	ldr	r0, [r7, #12]
 8008c70:	f000 fd38 	bl	80096e4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008c74:	2300      	movs	r3, #0
}
 8008c76:	4618      	mov	r0, r3
 8008c78:	3710      	adds	r7, #16
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	bd80      	pop	{r7, pc}

08008c7e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008c7e:	b580      	push	{r7, lr}
 8008c80:	b084      	sub	sp, #16
 8008c82:	af00      	add	r7, sp, #0
 8008c84:	60f8      	str	r0, [r7, #12]
 8008c86:	60b9      	str	r1, [r7, #8]
 8008c88:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	68ba      	ldr	r2, [r7, #8]
 8008c8e:	2100      	movs	r1, #0
 8008c90:	68f8      	ldr	r0, [r7, #12]
 8008c92:	f000 fd27 	bl	80096e4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008c96:	2300      	movs	r3, #0
}
 8008c98:	4618      	mov	r0, r3
 8008c9a:	3710      	adds	r7, #16
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	bd80      	pop	{r7, pc}

08008ca0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b082      	sub	sp, #8
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	2204      	movs	r2, #4
 8008cac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	2200      	movs	r2, #0
 8008cb4:	2100      	movs	r1, #0
 8008cb6:	6878      	ldr	r0, [r7, #4]
 8008cb8:	f000 fcf3 	bl	80096a2 <USBD_LL_Transmit>

  return USBD_OK;
 8008cbc:	2300      	movs	r3, #0
}
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	3708      	adds	r7, #8
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	bd80      	pop	{r7, pc}

08008cc6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008cc6:	b580      	push	{r7, lr}
 8008cc8:	b082      	sub	sp, #8
 8008cca:	af00      	add	r7, sp, #0
 8008ccc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	2205      	movs	r2, #5
 8008cd2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	2200      	movs	r2, #0
 8008cda:	2100      	movs	r1, #0
 8008cdc:	6878      	ldr	r0, [r7, #4]
 8008cde:	f000 fd01 	bl	80096e4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008ce2:	2300      	movs	r3, #0
}
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	3708      	adds	r7, #8
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	bd80      	pop	{r7, pc}

08008cec <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008cec:	b580      	push	{r7, lr}
 8008cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008cf0:	2200      	movs	r2, #0
 8008cf2:	4912      	ldr	r1, [pc, #72]	; (8008d3c <MX_USB_DEVICE_Init+0x50>)
 8008cf4:	4812      	ldr	r0, [pc, #72]	; (8008d40 <MX_USB_DEVICE_Init+0x54>)
 8008cf6:	f7fe fd07 	bl	8007708 <USBD_Init>
 8008cfa:	4603      	mov	r3, r0
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d001      	beq.n	8008d04 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008d00:	f7f8 f9de 	bl	80010c0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008d04:	490f      	ldr	r1, [pc, #60]	; (8008d44 <MX_USB_DEVICE_Init+0x58>)
 8008d06:	480e      	ldr	r0, [pc, #56]	; (8008d40 <MX_USB_DEVICE_Init+0x54>)
 8008d08:	f7fe fd2e 	bl	8007768 <USBD_RegisterClass>
 8008d0c:	4603      	mov	r3, r0
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d001      	beq.n	8008d16 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008d12:	f7f8 f9d5 	bl	80010c0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008d16:	490c      	ldr	r1, [pc, #48]	; (8008d48 <MX_USB_DEVICE_Init+0x5c>)
 8008d18:	4809      	ldr	r0, [pc, #36]	; (8008d40 <MX_USB_DEVICE_Init+0x54>)
 8008d1a:	f7fe fc1f 	bl	800755c <USBD_CDC_RegisterInterface>
 8008d1e:	4603      	mov	r3, r0
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d001      	beq.n	8008d28 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008d24:	f7f8 f9cc 	bl	80010c0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008d28:	4805      	ldr	r0, [pc, #20]	; (8008d40 <MX_USB_DEVICE_Init+0x54>)
 8008d2a:	f7fe fd53 	bl	80077d4 <USBD_Start>
 8008d2e:	4603      	mov	r3, r0
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d001      	beq.n	8008d38 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008d34:	f7f8 f9c4 	bl	80010c0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008d38:	bf00      	nop
 8008d3a:	bd80      	pop	{r7, pc}
 8008d3c:	20000118 	.word	0x20000118
 8008d40:	200003b4 	.word	0x200003b4
 8008d44:	20000084 	.word	0x20000084
 8008d48:	20000104 	.word	0x20000104

08008d4c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008d4c:	b580      	push	{r7, lr}
 8008d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008d50:	2200      	movs	r2, #0
 8008d52:	4905      	ldr	r1, [pc, #20]	; (8008d68 <CDC_Init_FS+0x1c>)
 8008d54:	4805      	ldr	r0, [pc, #20]	; (8008d6c <CDC_Init_FS+0x20>)
 8008d56:	f7fe fc1b 	bl	8007590 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008d5a:	4905      	ldr	r1, [pc, #20]	; (8008d70 <CDC_Init_FS+0x24>)
 8008d5c:	4803      	ldr	r0, [pc, #12]	; (8008d6c <CDC_Init_FS+0x20>)
 8008d5e:	f7fe fc39 	bl	80075d4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008d62:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008d64:	4618      	mov	r0, r3
 8008d66:	bd80      	pop	{r7, pc}
 8008d68:	20000e90 	.word	0x20000e90
 8008d6c:	200003b4 	.word	0x200003b4
 8008d70:	20000690 	.word	0x20000690

08008d74 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008d74:	b480      	push	{r7}
 8008d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008d78:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d82:	4770      	bx	lr

08008d84 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008d84:	b480      	push	{r7}
 8008d86:	b083      	sub	sp, #12
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	4603      	mov	r3, r0
 8008d8c:	6039      	str	r1, [r7, #0]
 8008d8e:	71fb      	strb	r3, [r7, #7]
 8008d90:	4613      	mov	r3, r2
 8008d92:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008d94:	79fb      	ldrb	r3, [r7, #7]
 8008d96:	2b23      	cmp	r3, #35	; 0x23
 8008d98:	f200 808c 	bhi.w	8008eb4 <CDC_Control_FS+0x130>
 8008d9c:	a201      	add	r2, pc, #4	; (adr r2, 8008da4 <CDC_Control_FS+0x20>)
 8008d9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008da2:	bf00      	nop
 8008da4:	08008eb5 	.word	0x08008eb5
 8008da8:	08008eb5 	.word	0x08008eb5
 8008dac:	08008eb5 	.word	0x08008eb5
 8008db0:	08008eb5 	.word	0x08008eb5
 8008db4:	08008eb5 	.word	0x08008eb5
 8008db8:	08008eb5 	.word	0x08008eb5
 8008dbc:	08008eb5 	.word	0x08008eb5
 8008dc0:	08008eb5 	.word	0x08008eb5
 8008dc4:	08008eb5 	.word	0x08008eb5
 8008dc8:	08008eb5 	.word	0x08008eb5
 8008dcc:	08008eb5 	.word	0x08008eb5
 8008dd0:	08008eb5 	.word	0x08008eb5
 8008dd4:	08008eb5 	.word	0x08008eb5
 8008dd8:	08008eb5 	.word	0x08008eb5
 8008ddc:	08008eb5 	.word	0x08008eb5
 8008de0:	08008eb5 	.word	0x08008eb5
 8008de4:	08008eb5 	.word	0x08008eb5
 8008de8:	08008eb5 	.word	0x08008eb5
 8008dec:	08008eb5 	.word	0x08008eb5
 8008df0:	08008eb5 	.word	0x08008eb5
 8008df4:	08008eb5 	.word	0x08008eb5
 8008df8:	08008eb5 	.word	0x08008eb5
 8008dfc:	08008eb5 	.word	0x08008eb5
 8008e00:	08008eb5 	.word	0x08008eb5
 8008e04:	08008eb5 	.word	0x08008eb5
 8008e08:	08008eb5 	.word	0x08008eb5
 8008e0c:	08008eb5 	.word	0x08008eb5
 8008e10:	08008eb5 	.word	0x08008eb5
 8008e14:	08008eb5 	.word	0x08008eb5
 8008e18:	08008eb5 	.word	0x08008eb5
 8008e1c:	08008eb5 	.word	0x08008eb5
 8008e20:	08008eb5 	.word	0x08008eb5
 8008e24:	08008e35 	.word	0x08008e35
 8008e28:	08008e6f 	.word	0x08008e6f
 8008e2c:	08008eb5 	.word	0x08008eb5
 8008e30:	08008eb5 	.word	0x08008eb5
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	temp[0] = pbuf[0];
 8008e34:	683b      	ldr	r3, [r7, #0]
 8008e36:	781a      	ldrb	r2, [r3, #0]
 8008e38:	4b22      	ldr	r3, [pc, #136]	; (8008ec4 <CDC_Control_FS+0x140>)
 8008e3a:	701a      	strb	r2, [r3, #0]
    	temp[1] = pbuf[1];
 8008e3c:	683b      	ldr	r3, [r7, #0]
 8008e3e:	785a      	ldrb	r2, [r3, #1]
 8008e40:	4b20      	ldr	r3, [pc, #128]	; (8008ec4 <CDC_Control_FS+0x140>)
 8008e42:	705a      	strb	r2, [r3, #1]
    	temp[2] = pbuf[2];
 8008e44:	683b      	ldr	r3, [r7, #0]
 8008e46:	789a      	ldrb	r2, [r3, #2]
 8008e48:	4b1e      	ldr	r3, [pc, #120]	; (8008ec4 <CDC_Control_FS+0x140>)
 8008e4a:	709a      	strb	r2, [r3, #2]
    	temp[3] = pbuf[3];
 8008e4c:	683b      	ldr	r3, [r7, #0]
 8008e4e:	78da      	ldrb	r2, [r3, #3]
 8008e50:	4b1c      	ldr	r3, [pc, #112]	; (8008ec4 <CDC_Control_FS+0x140>)
 8008e52:	70da      	strb	r2, [r3, #3]
    	temp[4] = pbuf[4];
 8008e54:	683b      	ldr	r3, [r7, #0]
 8008e56:	791a      	ldrb	r2, [r3, #4]
 8008e58:	4b1a      	ldr	r3, [pc, #104]	; (8008ec4 <CDC_Control_FS+0x140>)
 8008e5a:	711a      	strb	r2, [r3, #4]
    	temp[5] = pbuf[5];
 8008e5c:	683b      	ldr	r3, [r7, #0]
 8008e5e:	795a      	ldrb	r2, [r3, #5]
 8008e60:	4b18      	ldr	r3, [pc, #96]	; (8008ec4 <CDC_Control_FS+0x140>)
 8008e62:	715a      	strb	r2, [r3, #5]
    	temp[6] = pbuf[6];
 8008e64:	683b      	ldr	r3, [r7, #0]
 8008e66:	799a      	ldrb	r2, [r3, #6]
 8008e68:	4b16      	ldr	r3, [pc, #88]	; (8008ec4 <CDC_Control_FS+0x140>)
 8008e6a:	719a      	strb	r2, [r3, #6]
    break;
 8008e6c:	e023      	b.n	8008eb6 <CDC_Control_FS+0x132>

    case CDC_GET_LINE_CODING:
    	pbuf[0] = temp[0];
 8008e6e:	4b15      	ldr	r3, [pc, #84]	; (8008ec4 <CDC_Control_FS+0x140>)
 8008e70:	781a      	ldrb	r2, [r3, #0]
 8008e72:	683b      	ldr	r3, [r7, #0]
 8008e74:	701a      	strb	r2, [r3, #0]
    	pbuf[1] = temp[1];
 8008e76:	683b      	ldr	r3, [r7, #0]
 8008e78:	3301      	adds	r3, #1
 8008e7a:	4a12      	ldr	r2, [pc, #72]	; (8008ec4 <CDC_Control_FS+0x140>)
 8008e7c:	7852      	ldrb	r2, [r2, #1]
 8008e7e:	701a      	strb	r2, [r3, #0]
    	pbuf[2] = temp[2];
 8008e80:	683b      	ldr	r3, [r7, #0]
 8008e82:	3302      	adds	r3, #2
 8008e84:	4a0f      	ldr	r2, [pc, #60]	; (8008ec4 <CDC_Control_FS+0x140>)
 8008e86:	7892      	ldrb	r2, [r2, #2]
 8008e88:	701a      	strb	r2, [r3, #0]
    	pbuf[3] = temp[3];
 8008e8a:	683b      	ldr	r3, [r7, #0]
 8008e8c:	3303      	adds	r3, #3
 8008e8e:	4a0d      	ldr	r2, [pc, #52]	; (8008ec4 <CDC_Control_FS+0x140>)
 8008e90:	78d2      	ldrb	r2, [r2, #3]
 8008e92:	701a      	strb	r2, [r3, #0]
    	pbuf[4] = temp[4];
 8008e94:	683b      	ldr	r3, [r7, #0]
 8008e96:	3304      	adds	r3, #4
 8008e98:	4a0a      	ldr	r2, [pc, #40]	; (8008ec4 <CDC_Control_FS+0x140>)
 8008e9a:	7912      	ldrb	r2, [r2, #4]
 8008e9c:	701a      	strb	r2, [r3, #0]
    	pbuf[5] = temp[5];
 8008e9e:	683b      	ldr	r3, [r7, #0]
 8008ea0:	3305      	adds	r3, #5
 8008ea2:	4a08      	ldr	r2, [pc, #32]	; (8008ec4 <CDC_Control_FS+0x140>)
 8008ea4:	7952      	ldrb	r2, [r2, #5]
 8008ea6:	701a      	strb	r2, [r3, #0]
    	pbuf[6] = temp[6];
 8008ea8:	683b      	ldr	r3, [r7, #0]
 8008eaa:	3306      	adds	r3, #6
 8008eac:	4a05      	ldr	r2, [pc, #20]	; (8008ec4 <CDC_Control_FS+0x140>)
 8008eae:	7992      	ldrb	r2, [r2, #6]
 8008eb0:	701a      	strb	r2, [r3, #0]

    break;
 8008eb2:	e000      	b.n	8008eb6 <CDC_Control_FS+0x132>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008eb4:	bf00      	nop
  }

  return (USBD_OK);
 8008eb6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008eb8:	4618      	mov	r0, r3
 8008eba:	370c      	adds	r7, #12
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec2:	4770      	bx	lr
 8008ec4:	20001690 	.word	0x20001690

08008ec8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	b082      	sub	sp, #8
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]
 8008ed0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008ed2:	6879      	ldr	r1, [r7, #4]
 8008ed4:	4808      	ldr	r0, [pc, #32]	; (8008ef8 <CDC_Receive_FS+0x30>)
 8008ed6:	f7fe fb7d 	bl	80075d4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008eda:	4807      	ldr	r0, [pc, #28]	; (8008ef8 <CDC_Receive_FS+0x30>)
 8008edc:	f7fe fbde 	bl	800769c <USBD_CDC_ReceivePacket>
  USBRxHandler(UserRxBufferFS, *Len);
 8008ee0:	683b      	ldr	r3, [r7, #0]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	b29b      	uxth	r3, r3
 8008ee6:	4619      	mov	r1, r3
 8008ee8:	4804      	ldr	r0, [pc, #16]	; (8008efc <CDC_Receive_FS+0x34>)
 8008eea:	f7f7 fe73 	bl	8000bd4 <USBRxHandler>
  return (USBD_OK);
 8008eee:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	3708      	adds	r7, #8
 8008ef4:	46bd      	mov	sp, r7
 8008ef6:	bd80      	pop	{r7, pc}
 8008ef8:	200003b4 	.word	0x200003b4
 8008efc:	20000690 	.word	0x20000690

08008f00 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b084      	sub	sp, #16
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
 8008f08:	460b      	mov	r3, r1
 8008f0a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008f10:	4b0d      	ldr	r3, [pc, #52]	; (8008f48 <CDC_Transmit_FS+0x48>)
 8008f12:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008f16:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008f18:	68bb      	ldr	r3, [r7, #8]
 8008f1a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d001      	beq.n	8008f26 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008f22:	2301      	movs	r3, #1
 8008f24:	e00b      	b.n	8008f3e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008f26:	887b      	ldrh	r3, [r7, #2]
 8008f28:	461a      	mov	r2, r3
 8008f2a:	6879      	ldr	r1, [r7, #4]
 8008f2c:	4806      	ldr	r0, [pc, #24]	; (8008f48 <CDC_Transmit_FS+0x48>)
 8008f2e:	f7fe fb2f 	bl	8007590 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008f32:	4805      	ldr	r0, [pc, #20]	; (8008f48 <CDC_Transmit_FS+0x48>)
 8008f34:	f7fe fb6c 	bl	8007610 <USBD_CDC_TransmitPacket>
 8008f38:	4603      	mov	r3, r0
 8008f3a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008f3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f3e:	4618      	mov	r0, r3
 8008f40:	3710      	adds	r7, #16
 8008f42:	46bd      	mov	sp, r7
 8008f44:	bd80      	pop	{r7, pc}
 8008f46:	bf00      	nop
 8008f48:	200003b4 	.word	0x200003b4

08008f4c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008f4c:	b480      	push	{r7}
 8008f4e:	b087      	sub	sp, #28
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	60f8      	str	r0, [r7, #12]
 8008f54:	60b9      	str	r1, [r7, #8]
 8008f56:	4613      	mov	r3, r2
 8008f58:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008f5e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008f62:	4618      	mov	r0, r3
 8008f64:	371c      	adds	r7, #28
 8008f66:	46bd      	mov	sp, r7
 8008f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6c:	4770      	bx	lr
	...

08008f70 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f70:	b480      	push	{r7}
 8008f72:	b083      	sub	sp, #12
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	4603      	mov	r3, r0
 8008f78:	6039      	str	r1, [r7, #0]
 8008f7a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008f7c:	683b      	ldr	r3, [r7, #0]
 8008f7e:	2212      	movs	r2, #18
 8008f80:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008f82:	4b03      	ldr	r3, [pc, #12]	; (8008f90 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008f84:	4618      	mov	r0, r3
 8008f86:	370c      	adds	r7, #12
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8e:	4770      	bx	lr
 8008f90:	20000134 	.word	0x20000134

08008f94 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f94:	b480      	push	{r7}
 8008f96:	b083      	sub	sp, #12
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	4603      	mov	r3, r0
 8008f9c:	6039      	str	r1, [r7, #0]
 8008f9e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008fa0:	683b      	ldr	r3, [r7, #0]
 8008fa2:	2204      	movs	r2, #4
 8008fa4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008fa6:	4b03      	ldr	r3, [pc, #12]	; (8008fb4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008fa8:	4618      	mov	r0, r3
 8008faa:	370c      	adds	r7, #12
 8008fac:	46bd      	mov	sp, r7
 8008fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb2:	4770      	bx	lr
 8008fb4:	20000148 	.word	0x20000148

08008fb8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	b082      	sub	sp, #8
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	4603      	mov	r3, r0
 8008fc0:	6039      	str	r1, [r7, #0]
 8008fc2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008fc4:	79fb      	ldrb	r3, [r7, #7]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d105      	bne.n	8008fd6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008fca:	683a      	ldr	r2, [r7, #0]
 8008fcc:	4907      	ldr	r1, [pc, #28]	; (8008fec <USBD_FS_ProductStrDescriptor+0x34>)
 8008fce:	4808      	ldr	r0, [pc, #32]	; (8008ff0 <USBD_FS_ProductStrDescriptor+0x38>)
 8008fd0:	f7ff fdac 	bl	8008b2c <USBD_GetString>
 8008fd4:	e004      	b.n	8008fe0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008fd6:	683a      	ldr	r2, [r7, #0]
 8008fd8:	4904      	ldr	r1, [pc, #16]	; (8008fec <USBD_FS_ProductStrDescriptor+0x34>)
 8008fda:	4805      	ldr	r0, [pc, #20]	; (8008ff0 <USBD_FS_ProductStrDescriptor+0x38>)
 8008fdc:	f7ff fda6 	bl	8008b2c <USBD_GetString>
  }
  return USBD_StrDesc;
 8008fe0:	4b02      	ldr	r3, [pc, #8]	; (8008fec <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	3708      	adds	r7, #8
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	bd80      	pop	{r7, pc}
 8008fea:	bf00      	nop
 8008fec:	20001698 	.word	0x20001698
 8008ff0:	0800a188 	.word	0x0800a188

08008ff4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b082      	sub	sp, #8
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	4603      	mov	r3, r0
 8008ffc:	6039      	str	r1, [r7, #0]
 8008ffe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009000:	683a      	ldr	r2, [r7, #0]
 8009002:	4904      	ldr	r1, [pc, #16]	; (8009014 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009004:	4804      	ldr	r0, [pc, #16]	; (8009018 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009006:	f7ff fd91 	bl	8008b2c <USBD_GetString>
  return USBD_StrDesc;
 800900a:	4b02      	ldr	r3, [pc, #8]	; (8009014 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800900c:	4618      	mov	r0, r3
 800900e:	3708      	adds	r7, #8
 8009010:	46bd      	mov	sp, r7
 8009012:	bd80      	pop	{r7, pc}
 8009014:	20001698 	.word	0x20001698
 8009018:	0800a1a0 	.word	0x0800a1a0

0800901c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800901c:	b580      	push	{r7, lr}
 800901e:	b082      	sub	sp, #8
 8009020:	af00      	add	r7, sp, #0
 8009022:	4603      	mov	r3, r0
 8009024:	6039      	str	r1, [r7, #0]
 8009026:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009028:	683b      	ldr	r3, [r7, #0]
 800902a:	221a      	movs	r2, #26
 800902c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800902e:	f000 f843 	bl	80090b8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009032:	4b02      	ldr	r3, [pc, #8]	; (800903c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009034:	4618      	mov	r0, r3
 8009036:	3708      	adds	r7, #8
 8009038:	46bd      	mov	sp, r7
 800903a:	bd80      	pop	{r7, pc}
 800903c:	2000014c 	.word	0x2000014c

08009040 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009040:	b580      	push	{r7, lr}
 8009042:	b082      	sub	sp, #8
 8009044:	af00      	add	r7, sp, #0
 8009046:	4603      	mov	r3, r0
 8009048:	6039      	str	r1, [r7, #0]
 800904a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800904c:	79fb      	ldrb	r3, [r7, #7]
 800904e:	2b00      	cmp	r3, #0
 8009050:	d105      	bne.n	800905e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009052:	683a      	ldr	r2, [r7, #0]
 8009054:	4907      	ldr	r1, [pc, #28]	; (8009074 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009056:	4808      	ldr	r0, [pc, #32]	; (8009078 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009058:	f7ff fd68 	bl	8008b2c <USBD_GetString>
 800905c:	e004      	b.n	8009068 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800905e:	683a      	ldr	r2, [r7, #0]
 8009060:	4904      	ldr	r1, [pc, #16]	; (8009074 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009062:	4805      	ldr	r0, [pc, #20]	; (8009078 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009064:	f7ff fd62 	bl	8008b2c <USBD_GetString>
  }
  return USBD_StrDesc;
 8009068:	4b02      	ldr	r3, [pc, #8]	; (8009074 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800906a:	4618      	mov	r0, r3
 800906c:	3708      	adds	r7, #8
 800906e:	46bd      	mov	sp, r7
 8009070:	bd80      	pop	{r7, pc}
 8009072:	bf00      	nop
 8009074:	20001698 	.word	0x20001698
 8009078:	0800a1b4 	.word	0x0800a1b4

0800907c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b082      	sub	sp, #8
 8009080:	af00      	add	r7, sp, #0
 8009082:	4603      	mov	r3, r0
 8009084:	6039      	str	r1, [r7, #0]
 8009086:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009088:	79fb      	ldrb	r3, [r7, #7]
 800908a:	2b00      	cmp	r3, #0
 800908c:	d105      	bne.n	800909a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800908e:	683a      	ldr	r2, [r7, #0]
 8009090:	4907      	ldr	r1, [pc, #28]	; (80090b0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009092:	4808      	ldr	r0, [pc, #32]	; (80090b4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009094:	f7ff fd4a 	bl	8008b2c <USBD_GetString>
 8009098:	e004      	b.n	80090a4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800909a:	683a      	ldr	r2, [r7, #0]
 800909c:	4904      	ldr	r1, [pc, #16]	; (80090b0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800909e:	4805      	ldr	r0, [pc, #20]	; (80090b4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80090a0:	f7ff fd44 	bl	8008b2c <USBD_GetString>
  }
  return USBD_StrDesc;
 80090a4:	4b02      	ldr	r3, [pc, #8]	; (80090b0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80090a6:	4618      	mov	r0, r3
 80090a8:	3708      	adds	r7, #8
 80090aa:	46bd      	mov	sp, r7
 80090ac:	bd80      	pop	{r7, pc}
 80090ae:	bf00      	nop
 80090b0:	20001698 	.word	0x20001698
 80090b4:	0800a1c0 	.word	0x0800a1c0

080090b8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80090b8:	b580      	push	{r7, lr}
 80090ba:	b084      	sub	sp, #16
 80090bc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80090be:	4b0f      	ldr	r3, [pc, #60]	; (80090fc <Get_SerialNum+0x44>)
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80090c4:	4b0e      	ldr	r3, [pc, #56]	; (8009100 <Get_SerialNum+0x48>)
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80090ca:	4b0e      	ldr	r3, [pc, #56]	; (8009104 <Get_SerialNum+0x4c>)
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80090d0:	68fa      	ldr	r2, [r7, #12]
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	4413      	add	r3, r2
 80090d6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d009      	beq.n	80090f2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80090de:	2208      	movs	r2, #8
 80090e0:	4909      	ldr	r1, [pc, #36]	; (8009108 <Get_SerialNum+0x50>)
 80090e2:	68f8      	ldr	r0, [r7, #12]
 80090e4:	f000 f814 	bl	8009110 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80090e8:	2204      	movs	r2, #4
 80090ea:	4908      	ldr	r1, [pc, #32]	; (800910c <Get_SerialNum+0x54>)
 80090ec:	68b8      	ldr	r0, [r7, #8]
 80090ee:	f000 f80f 	bl	8009110 <IntToUnicode>
  }
}
 80090f2:	bf00      	nop
 80090f4:	3710      	adds	r7, #16
 80090f6:	46bd      	mov	sp, r7
 80090f8:	bd80      	pop	{r7, pc}
 80090fa:	bf00      	nop
 80090fc:	1fff7a10 	.word	0x1fff7a10
 8009100:	1fff7a14 	.word	0x1fff7a14
 8009104:	1fff7a18 	.word	0x1fff7a18
 8009108:	2000014e 	.word	0x2000014e
 800910c:	2000015e 	.word	0x2000015e

08009110 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009110:	b480      	push	{r7}
 8009112:	b087      	sub	sp, #28
 8009114:	af00      	add	r7, sp, #0
 8009116:	60f8      	str	r0, [r7, #12]
 8009118:	60b9      	str	r1, [r7, #8]
 800911a:	4613      	mov	r3, r2
 800911c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800911e:	2300      	movs	r3, #0
 8009120:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009122:	2300      	movs	r3, #0
 8009124:	75fb      	strb	r3, [r7, #23]
 8009126:	e027      	b.n	8009178 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	0f1b      	lsrs	r3, r3, #28
 800912c:	2b09      	cmp	r3, #9
 800912e:	d80b      	bhi.n	8009148 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	0f1b      	lsrs	r3, r3, #28
 8009134:	b2da      	uxtb	r2, r3
 8009136:	7dfb      	ldrb	r3, [r7, #23]
 8009138:	005b      	lsls	r3, r3, #1
 800913a:	4619      	mov	r1, r3
 800913c:	68bb      	ldr	r3, [r7, #8]
 800913e:	440b      	add	r3, r1
 8009140:	3230      	adds	r2, #48	; 0x30
 8009142:	b2d2      	uxtb	r2, r2
 8009144:	701a      	strb	r2, [r3, #0]
 8009146:	e00a      	b.n	800915e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	0f1b      	lsrs	r3, r3, #28
 800914c:	b2da      	uxtb	r2, r3
 800914e:	7dfb      	ldrb	r3, [r7, #23]
 8009150:	005b      	lsls	r3, r3, #1
 8009152:	4619      	mov	r1, r3
 8009154:	68bb      	ldr	r3, [r7, #8]
 8009156:	440b      	add	r3, r1
 8009158:	3237      	adds	r2, #55	; 0x37
 800915a:	b2d2      	uxtb	r2, r2
 800915c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	011b      	lsls	r3, r3, #4
 8009162:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009164:	7dfb      	ldrb	r3, [r7, #23]
 8009166:	005b      	lsls	r3, r3, #1
 8009168:	3301      	adds	r3, #1
 800916a:	68ba      	ldr	r2, [r7, #8]
 800916c:	4413      	add	r3, r2
 800916e:	2200      	movs	r2, #0
 8009170:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009172:	7dfb      	ldrb	r3, [r7, #23]
 8009174:	3301      	adds	r3, #1
 8009176:	75fb      	strb	r3, [r7, #23]
 8009178:	7dfa      	ldrb	r2, [r7, #23]
 800917a:	79fb      	ldrb	r3, [r7, #7]
 800917c:	429a      	cmp	r2, r3
 800917e:	d3d3      	bcc.n	8009128 <IntToUnicode+0x18>
  }
}
 8009180:	bf00      	nop
 8009182:	bf00      	nop
 8009184:	371c      	adds	r7, #28
 8009186:	46bd      	mov	sp, r7
 8009188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918c:	4770      	bx	lr
	...

08009190 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009190:	b580      	push	{r7, lr}
 8009192:	b08a      	sub	sp, #40	; 0x28
 8009194:	af00      	add	r7, sp, #0
 8009196:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009198:	f107 0314 	add.w	r3, r7, #20
 800919c:	2200      	movs	r2, #0
 800919e:	601a      	str	r2, [r3, #0]
 80091a0:	605a      	str	r2, [r3, #4]
 80091a2:	609a      	str	r2, [r3, #8]
 80091a4:	60da      	str	r2, [r3, #12]
 80091a6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80091b0:	d147      	bne.n	8009242 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80091b2:	2300      	movs	r3, #0
 80091b4:	613b      	str	r3, [r7, #16]
 80091b6:	4b25      	ldr	r3, [pc, #148]	; (800924c <HAL_PCD_MspInit+0xbc>)
 80091b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091ba:	4a24      	ldr	r2, [pc, #144]	; (800924c <HAL_PCD_MspInit+0xbc>)
 80091bc:	f043 0301 	orr.w	r3, r3, #1
 80091c0:	6313      	str	r3, [r2, #48]	; 0x30
 80091c2:	4b22      	ldr	r3, [pc, #136]	; (800924c <HAL_PCD_MspInit+0xbc>)
 80091c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091c6:	f003 0301 	and.w	r3, r3, #1
 80091ca:	613b      	str	r3, [r7, #16]
 80091cc:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80091ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80091d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80091d4:	2300      	movs	r3, #0
 80091d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80091d8:	2300      	movs	r3, #0
 80091da:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80091dc:	f107 0314 	add.w	r3, r7, #20
 80091e0:	4619      	mov	r1, r3
 80091e2:	481b      	ldr	r0, [pc, #108]	; (8009250 <HAL_PCD_MspInit+0xc0>)
 80091e4:	f7f8 fd36 	bl	8001c54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80091e8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80091ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80091ee:	2302      	movs	r3, #2
 80091f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80091f2:	2300      	movs	r3, #0
 80091f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80091f6:	2300      	movs	r3, #0
 80091f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80091fa:	230a      	movs	r3, #10
 80091fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80091fe:	f107 0314 	add.w	r3, r7, #20
 8009202:	4619      	mov	r1, r3
 8009204:	4812      	ldr	r0, [pc, #72]	; (8009250 <HAL_PCD_MspInit+0xc0>)
 8009206:	f7f8 fd25 	bl	8001c54 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800920a:	4b10      	ldr	r3, [pc, #64]	; (800924c <HAL_PCD_MspInit+0xbc>)
 800920c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800920e:	4a0f      	ldr	r2, [pc, #60]	; (800924c <HAL_PCD_MspInit+0xbc>)
 8009210:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009214:	6353      	str	r3, [r2, #52]	; 0x34
 8009216:	2300      	movs	r3, #0
 8009218:	60fb      	str	r3, [r7, #12]
 800921a:	4b0c      	ldr	r3, [pc, #48]	; (800924c <HAL_PCD_MspInit+0xbc>)
 800921c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800921e:	4a0b      	ldr	r2, [pc, #44]	; (800924c <HAL_PCD_MspInit+0xbc>)
 8009220:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009224:	6453      	str	r3, [r2, #68]	; 0x44
 8009226:	4b09      	ldr	r3, [pc, #36]	; (800924c <HAL_PCD_MspInit+0xbc>)
 8009228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800922a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800922e:	60fb      	str	r3, [r7, #12]
 8009230:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009232:	2200      	movs	r2, #0
 8009234:	2100      	movs	r1, #0
 8009236:	2043      	movs	r0, #67	; 0x43
 8009238:	f7f8 fcd5 	bl	8001be6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800923c:	2043      	movs	r0, #67	; 0x43
 800923e:	f7f8 fcee 	bl	8001c1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009242:	bf00      	nop
 8009244:	3728      	adds	r7, #40	; 0x28
 8009246:	46bd      	mov	sp, r7
 8009248:	bd80      	pop	{r7, pc}
 800924a:	bf00      	nop
 800924c:	40023800 	.word	0x40023800
 8009250:	40020000 	.word	0x40020000

08009254 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009254:	b580      	push	{r7, lr}
 8009256:	b082      	sub	sp, #8
 8009258:	af00      	add	r7, sp, #0
 800925a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009268:	4619      	mov	r1, r3
 800926a:	4610      	mov	r0, r2
 800926c:	f7fe faff 	bl	800786e <USBD_LL_SetupStage>
}
 8009270:	bf00      	nop
 8009272:	3708      	adds	r7, #8
 8009274:	46bd      	mov	sp, r7
 8009276:	bd80      	pop	{r7, pc}

08009278 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009278:	b580      	push	{r7, lr}
 800927a:	b082      	sub	sp, #8
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
 8009280:	460b      	mov	r3, r1
 8009282:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800928a:	78fa      	ldrb	r2, [r7, #3]
 800928c:	6879      	ldr	r1, [r7, #4]
 800928e:	4613      	mov	r3, r2
 8009290:	00db      	lsls	r3, r3, #3
 8009292:	4413      	add	r3, r2
 8009294:	009b      	lsls	r3, r3, #2
 8009296:	440b      	add	r3, r1
 8009298:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800929c:	681a      	ldr	r2, [r3, #0]
 800929e:	78fb      	ldrb	r3, [r7, #3]
 80092a0:	4619      	mov	r1, r3
 80092a2:	f7fe fb39 	bl	8007918 <USBD_LL_DataOutStage>
}
 80092a6:	bf00      	nop
 80092a8:	3708      	adds	r7, #8
 80092aa:	46bd      	mov	sp, r7
 80092ac:	bd80      	pop	{r7, pc}

080092ae <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092ae:	b580      	push	{r7, lr}
 80092b0:	b082      	sub	sp, #8
 80092b2:	af00      	add	r7, sp, #0
 80092b4:	6078      	str	r0, [r7, #4]
 80092b6:	460b      	mov	r3, r1
 80092b8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80092c0:	78fa      	ldrb	r2, [r7, #3]
 80092c2:	6879      	ldr	r1, [r7, #4]
 80092c4:	4613      	mov	r3, r2
 80092c6:	00db      	lsls	r3, r3, #3
 80092c8:	4413      	add	r3, r2
 80092ca:	009b      	lsls	r3, r3, #2
 80092cc:	440b      	add	r3, r1
 80092ce:	334c      	adds	r3, #76	; 0x4c
 80092d0:	681a      	ldr	r2, [r3, #0]
 80092d2:	78fb      	ldrb	r3, [r7, #3]
 80092d4:	4619      	mov	r1, r3
 80092d6:	f7fe fbd2 	bl	8007a7e <USBD_LL_DataInStage>
}
 80092da:	bf00      	nop
 80092dc:	3708      	adds	r7, #8
 80092de:	46bd      	mov	sp, r7
 80092e0:	bd80      	pop	{r7, pc}

080092e2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092e2:	b580      	push	{r7, lr}
 80092e4:	b082      	sub	sp, #8
 80092e6:	af00      	add	r7, sp, #0
 80092e8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80092f0:	4618      	mov	r0, r3
 80092f2:	f7fe fd06 	bl	8007d02 <USBD_LL_SOF>
}
 80092f6:	bf00      	nop
 80092f8:	3708      	adds	r7, #8
 80092fa:	46bd      	mov	sp, r7
 80092fc:	bd80      	pop	{r7, pc}

080092fe <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092fe:	b580      	push	{r7, lr}
 8009300:	b084      	sub	sp, #16
 8009302:	af00      	add	r7, sp, #0
 8009304:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009306:	2301      	movs	r3, #1
 8009308:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	68db      	ldr	r3, [r3, #12]
 800930e:	2b00      	cmp	r3, #0
 8009310:	d102      	bne.n	8009318 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8009312:	2300      	movs	r3, #0
 8009314:	73fb      	strb	r3, [r7, #15]
 8009316:	e008      	b.n	800932a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	68db      	ldr	r3, [r3, #12]
 800931c:	2b02      	cmp	r3, #2
 800931e:	d102      	bne.n	8009326 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8009320:	2301      	movs	r3, #1
 8009322:	73fb      	strb	r3, [r7, #15]
 8009324:	e001      	b.n	800932a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8009326:	f7f7 fecb 	bl	80010c0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009330:	7bfa      	ldrb	r2, [r7, #15]
 8009332:	4611      	mov	r1, r2
 8009334:	4618      	mov	r0, r3
 8009336:	f7fe fca6 	bl	8007c86 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009340:	4618      	mov	r0, r3
 8009342:	f7fe fc4e 	bl	8007be2 <USBD_LL_Reset>
}
 8009346:	bf00      	nop
 8009348:	3710      	adds	r7, #16
 800934a:	46bd      	mov	sp, r7
 800934c:	bd80      	pop	{r7, pc}
	...

08009350 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009350:	b580      	push	{r7, lr}
 8009352:	b082      	sub	sp, #8
 8009354:	af00      	add	r7, sp, #0
 8009356:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800935e:	4618      	mov	r0, r3
 8009360:	f7fe fca1 	bl	8007ca6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	687a      	ldr	r2, [r7, #4]
 8009370:	6812      	ldr	r2, [r2, #0]
 8009372:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009376:	f043 0301 	orr.w	r3, r3, #1
 800937a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	6a1b      	ldr	r3, [r3, #32]
 8009380:	2b00      	cmp	r3, #0
 8009382:	d005      	beq.n	8009390 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009384:	4b04      	ldr	r3, [pc, #16]	; (8009398 <HAL_PCD_SuspendCallback+0x48>)
 8009386:	691b      	ldr	r3, [r3, #16]
 8009388:	4a03      	ldr	r2, [pc, #12]	; (8009398 <HAL_PCD_SuspendCallback+0x48>)
 800938a:	f043 0306 	orr.w	r3, r3, #6
 800938e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009390:	bf00      	nop
 8009392:	3708      	adds	r7, #8
 8009394:	46bd      	mov	sp, r7
 8009396:	bd80      	pop	{r7, pc}
 8009398:	e000ed00 	.word	0xe000ed00

0800939c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800939c:	b580      	push	{r7, lr}
 800939e:	b082      	sub	sp, #8
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80093aa:	4618      	mov	r0, r3
 80093ac:	f7fe fc91 	bl	8007cd2 <USBD_LL_Resume>
}
 80093b0:	bf00      	nop
 80093b2:	3708      	adds	r7, #8
 80093b4:	46bd      	mov	sp, r7
 80093b6:	bd80      	pop	{r7, pc}

080093b8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093b8:	b580      	push	{r7, lr}
 80093ba:	b082      	sub	sp, #8
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
 80093c0:	460b      	mov	r3, r1
 80093c2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80093ca:	78fa      	ldrb	r2, [r7, #3]
 80093cc:	4611      	mov	r1, r2
 80093ce:	4618      	mov	r0, r3
 80093d0:	f7fe fce9 	bl	8007da6 <USBD_LL_IsoOUTIncomplete>
}
 80093d4:	bf00      	nop
 80093d6:	3708      	adds	r7, #8
 80093d8:	46bd      	mov	sp, r7
 80093da:	bd80      	pop	{r7, pc}

080093dc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093dc:	b580      	push	{r7, lr}
 80093de:	b082      	sub	sp, #8
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	6078      	str	r0, [r7, #4]
 80093e4:	460b      	mov	r3, r1
 80093e6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80093ee:	78fa      	ldrb	r2, [r7, #3]
 80093f0:	4611      	mov	r1, r2
 80093f2:	4618      	mov	r0, r3
 80093f4:	f7fe fca5 	bl	8007d42 <USBD_LL_IsoINIncomplete>
}
 80093f8:	bf00      	nop
 80093fa:	3708      	adds	r7, #8
 80093fc:	46bd      	mov	sp, r7
 80093fe:	bd80      	pop	{r7, pc}

08009400 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009400:	b580      	push	{r7, lr}
 8009402:	b082      	sub	sp, #8
 8009404:	af00      	add	r7, sp, #0
 8009406:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800940e:	4618      	mov	r0, r3
 8009410:	f7fe fcfb 	bl	8007e0a <USBD_LL_DevConnected>
}
 8009414:	bf00      	nop
 8009416:	3708      	adds	r7, #8
 8009418:	46bd      	mov	sp, r7
 800941a:	bd80      	pop	{r7, pc}

0800941c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800941c:	b580      	push	{r7, lr}
 800941e:	b082      	sub	sp, #8
 8009420:	af00      	add	r7, sp, #0
 8009422:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800942a:	4618      	mov	r0, r3
 800942c:	f7fe fcf8 	bl	8007e20 <USBD_LL_DevDisconnected>
}
 8009430:	bf00      	nop
 8009432:	3708      	adds	r7, #8
 8009434:	46bd      	mov	sp, r7
 8009436:	bd80      	pop	{r7, pc}

08009438 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009438:	b580      	push	{r7, lr}
 800943a:	b082      	sub	sp, #8
 800943c:	af00      	add	r7, sp, #0
 800943e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	781b      	ldrb	r3, [r3, #0]
 8009444:	2b00      	cmp	r3, #0
 8009446:	d13c      	bne.n	80094c2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009448:	4a20      	ldr	r2, [pc, #128]	; (80094cc <USBD_LL_Init+0x94>)
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	4a1e      	ldr	r2, [pc, #120]	; (80094cc <USBD_LL_Init+0x94>)
 8009454:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009458:	4b1c      	ldr	r3, [pc, #112]	; (80094cc <USBD_LL_Init+0x94>)
 800945a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800945e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009460:	4b1a      	ldr	r3, [pc, #104]	; (80094cc <USBD_LL_Init+0x94>)
 8009462:	2204      	movs	r2, #4
 8009464:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009466:	4b19      	ldr	r3, [pc, #100]	; (80094cc <USBD_LL_Init+0x94>)
 8009468:	2202      	movs	r2, #2
 800946a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800946c:	4b17      	ldr	r3, [pc, #92]	; (80094cc <USBD_LL_Init+0x94>)
 800946e:	2200      	movs	r2, #0
 8009470:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009472:	4b16      	ldr	r3, [pc, #88]	; (80094cc <USBD_LL_Init+0x94>)
 8009474:	2202      	movs	r2, #2
 8009476:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009478:	4b14      	ldr	r3, [pc, #80]	; (80094cc <USBD_LL_Init+0x94>)
 800947a:	2200      	movs	r2, #0
 800947c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800947e:	4b13      	ldr	r3, [pc, #76]	; (80094cc <USBD_LL_Init+0x94>)
 8009480:	2200      	movs	r2, #0
 8009482:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009484:	4b11      	ldr	r3, [pc, #68]	; (80094cc <USBD_LL_Init+0x94>)
 8009486:	2200      	movs	r2, #0
 8009488:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800948a:	4b10      	ldr	r3, [pc, #64]	; (80094cc <USBD_LL_Init+0x94>)
 800948c:	2201      	movs	r2, #1
 800948e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009490:	4b0e      	ldr	r3, [pc, #56]	; (80094cc <USBD_LL_Init+0x94>)
 8009492:	2200      	movs	r2, #0
 8009494:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009496:	480d      	ldr	r0, [pc, #52]	; (80094cc <USBD_LL_Init+0x94>)
 8009498:	f7f9 fca4 	bl	8002de4 <HAL_PCD_Init>
 800949c:	4603      	mov	r3, r0
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d001      	beq.n	80094a6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80094a2:	f7f7 fe0d 	bl	80010c0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80094a6:	2180      	movs	r1, #128	; 0x80
 80094a8:	4808      	ldr	r0, [pc, #32]	; (80094cc <USBD_LL_Init+0x94>)
 80094aa:	f7fa fefc 	bl	80042a6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80094ae:	2240      	movs	r2, #64	; 0x40
 80094b0:	2100      	movs	r1, #0
 80094b2:	4806      	ldr	r0, [pc, #24]	; (80094cc <USBD_LL_Init+0x94>)
 80094b4:	f7fa feb0 	bl	8004218 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80094b8:	2280      	movs	r2, #128	; 0x80
 80094ba:	2101      	movs	r1, #1
 80094bc:	4803      	ldr	r0, [pc, #12]	; (80094cc <USBD_LL_Init+0x94>)
 80094be:	f7fa feab 	bl	8004218 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80094c2:	2300      	movs	r3, #0
}
 80094c4:	4618      	mov	r0, r3
 80094c6:	3708      	adds	r7, #8
 80094c8:	46bd      	mov	sp, r7
 80094ca:	bd80      	pop	{r7, pc}
 80094cc:	20001898 	.word	0x20001898

080094d0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80094d0:	b580      	push	{r7, lr}
 80094d2:	b084      	sub	sp, #16
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094d8:	2300      	movs	r3, #0
 80094da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094dc:	2300      	movs	r3, #0
 80094de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80094e6:	4618      	mov	r0, r3
 80094e8:	f7f9 fd99 	bl	800301e <HAL_PCD_Start>
 80094ec:	4603      	mov	r3, r0
 80094ee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80094f0:	7bfb      	ldrb	r3, [r7, #15]
 80094f2:	4618      	mov	r0, r3
 80094f4:	f000 f942 	bl	800977c <USBD_Get_USB_Status>
 80094f8:	4603      	mov	r3, r0
 80094fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80094fc:	7bbb      	ldrb	r3, [r7, #14]
}
 80094fe:	4618      	mov	r0, r3
 8009500:	3710      	adds	r7, #16
 8009502:	46bd      	mov	sp, r7
 8009504:	bd80      	pop	{r7, pc}

08009506 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009506:	b580      	push	{r7, lr}
 8009508:	b084      	sub	sp, #16
 800950a:	af00      	add	r7, sp, #0
 800950c:	6078      	str	r0, [r7, #4]
 800950e:	4608      	mov	r0, r1
 8009510:	4611      	mov	r1, r2
 8009512:	461a      	mov	r2, r3
 8009514:	4603      	mov	r3, r0
 8009516:	70fb      	strb	r3, [r7, #3]
 8009518:	460b      	mov	r3, r1
 800951a:	70bb      	strb	r3, [r7, #2]
 800951c:	4613      	mov	r3, r2
 800951e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009520:	2300      	movs	r3, #0
 8009522:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009524:	2300      	movs	r3, #0
 8009526:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800952e:	78bb      	ldrb	r3, [r7, #2]
 8009530:	883a      	ldrh	r2, [r7, #0]
 8009532:	78f9      	ldrb	r1, [r7, #3]
 8009534:	f7fa fa6a 	bl	8003a0c <HAL_PCD_EP_Open>
 8009538:	4603      	mov	r3, r0
 800953a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800953c:	7bfb      	ldrb	r3, [r7, #15]
 800953e:	4618      	mov	r0, r3
 8009540:	f000 f91c 	bl	800977c <USBD_Get_USB_Status>
 8009544:	4603      	mov	r3, r0
 8009546:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009548:	7bbb      	ldrb	r3, [r7, #14]
}
 800954a:	4618      	mov	r0, r3
 800954c:	3710      	adds	r7, #16
 800954e:	46bd      	mov	sp, r7
 8009550:	bd80      	pop	{r7, pc}

08009552 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009552:	b580      	push	{r7, lr}
 8009554:	b084      	sub	sp, #16
 8009556:	af00      	add	r7, sp, #0
 8009558:	6078      	str	r0, [r7, #4]
 800955a:	460b      	mov	r3, r1
 800955c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800955e:	2300      	movs	r3, #0
 8009560:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009562:	2300      	movs	r3, #0
 8009564:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800956c:	78fa      	ldrb	r2, [r7, #3]
 800956e:	4611      	mov	r1, r2
 8009570:	4618      	mov	r0, r3
 8009572:	f7fa fab3 	bl	8003adc <HAL_PCD_EP_Close>
 8009576:	4603      	mov	r3, r0
 8009578:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800957a:	7bfb      	ldrb	r3, [r7, #15]
 800957c:	4618      	mov	r0, r3
 800957e:	f000 f8fd 	bl	800977c <USBD_Get_USB_Status>
 8009582:	4603      	mov	r3, r0
 8009584:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009586:	7bbb      	ldrb	r3, [r7, #14]
}
 8009588:	4618      	mov	r0, r3
 800958a:	3710      	adds	r7, #16
 800958c:	46bd      	mov	sp, r7
 800958e:	bd80      	pop	{r7, pc}

08009590 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009590:	b580      	push	{r7, lr}
 8009592:	b084      	sub	sp, #16
 8009594:	af00      	add	r7, sp, #0
 8009596:	6078      	str	r0, [r7, #4]
 8009598:	460b      	mov	r3, r1
 800959a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800959c:	2300      	movs	r3, #0
 800959e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80095a0:	2300      	movs	r3, #0
 80095a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80095aa:	78fa      	ldrb	r2, [r7, #3]
 80095ac:	4611      	mov	r1, r2
 80095ae:	4618      	mov	r0, r3
 80095b0:	f7fa fb8b 	bl	8003cca <HAL_PCD_EP_SetStall>
 80095b4:	4603      	mov	r3, r0
 80095b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80095b8:	7bfb      	ldrb	r3, [r7, #15]
 80095ba:	4618      	mov	r0, r3
 80095bc:	f000 f8de 	bl	800977c <USBD_Get_USB_Status>
 80095c0:	4603      	mov	r3, r0
 80095c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80095c4:	7bbb      	ldrb	r3, [r7, #14]
}
 80095c6:	4618      	mov	r0, r3
 80095c8:	3710      	adds	r7, #16
 80095ca:	46bd      	mov	sp, r7
 80095cc:	bd80      	pop	{r7, pc}

080095ce <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80095ce:	b580      	push	{r7, lr}
 80095d0:	b084      	sub	sp, #16
 80095d2:	af00      	add	r7, sp, #0
 80095d4:	6078      	str	r0, [r7, #4]
 80095d6:	460b      	mov	r3, r1
 80095d8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095da:	2300      	movs	r3, #0
 80095dc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80095de:	2300      	movs	r3, #0
 80095e0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80095e8:	78fa      	ldrb	r2, [r7, #3]
 80095ea:	4611      	mov	r1, r2
 80095ec:	4618      	mov	r0, r3
 80095ee:	f7fa fbd0 	bl	8003d92 <HAL_PCD_EP_ClrStall>
 80095f2:	4603      	mov	r3, r0
 80095f4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80095f6:	7bfb      	ldrb	r3, [r7, #15]
 80095f8:	4618      	mov	r0, r3
 80095fa:	f000 f8bf 	bl	800977c <USBD_Get_USB_Status>
 80095fe:	4603      	mov	r3, r0
 8009600:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009602:	7bbb      	ldrb	r3, [r7, #14]
}
 8009604:	4618      	mov	r0, r3
 8009606:	3710      	adds	r7, #16
 8009608:	46bd      	mov	sp, r7
 800960a:	bd80      	pop	{r7, pc}

0800960c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800960c:	b480      	push	{r7}
 800960e:	b085      	sub	sp, #20
 8009610:	af00      	add	r7, sp, #0
 8009612:	6078      	str	r0, [r7, #4]
 8009614:	460b      	mov	r3, r1
 8009616:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800961e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009620:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009624:	2b00      	cmp	r3, #0
 8009626:	da0b      	bge.n	8009640 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009628:	78fb      	ldrb	r3, [r7, #3]
 800962a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800962e:	68f9      	ldr	r1, [r7, #12]
 8009630:	4613      	mov	r3, r2
 8009632:	00db      	lsls	r3, r3, #3
 8009634:	4413      	add	r3, r2
 8009636:	009b      	lsls	r3, r3, #2
 8009638:	440b      	add	r3, r1
 800963a:	333e      	adds	r3, #62	; 0x3e
 800963c:	781b      	ldrb	r3, [r3, #0]
 800963e:	e00b      	b.n	8009658 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009640:	78fb      	ldrb	r3, [r7, #3]
 8009642:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009646:	68f9      	ldr	r1, [r7, #12]
 8009648:	4613      	mov	r3, r2
 800964a:	00db      	lsls	r3, r3, #3
 800964c:	4413      	add	r3, r2
 800964e:	009b      	lsls	r3, r3, #2
 8009650:	440b      	add	r3, r1
 8009652:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8009656:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009658:	4618      	mov	r0, r3
 800965a:	3714      	adds	r7, #20
 800965c:	46bd      	mov	sp, r7
 800965e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009662:	4770      	bx	lr

08009664 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009664:	b580      	push	{r7, lr}
 8009666:	b084      	sub	sp, #16
 8009668:	af00      	add	r7, sp, #0
 800966a:	6078      	str	r0, [r7, #4]
 800966c:	460b      	mov	r3, r1
 800966e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009670:	2300      	movs	r3, #0
 8009672:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009674:	2300      	movs	r3, #0
 8009676:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800967e:	78fa      	ldrb	r2, [r7, #3]
 8009680:	4611      	mov	r1, r2
 8009682:	4618      	mov	r0, r3
 8009684:	f7fa f99d 	bl	80039c2 <HAL_PCD_SetAddress>
 8009688:	4603      	mov	r3, r0
 800968a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800968c:	7bfb      	ldrb	r3, [r7, #15]
 800968e:	4618      	mov	r0, r3
 8009690:	f000 f874 	bl	800977c <USBD_Get_USB_Status>
 8009694:	4603      	mov	r3, r0
 8009696:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009698:	7bbb      	ldrb	r3, [r7, #14]
}
 800969a:	4618      	mov	r0, r3
 800969c:	3710      	adds	r7, #16
 800969e:	46bd      	mov	sp, r7
 80096a0:	bd80      	pop	{r7, pc}

080096a2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80096a2:	b580      	push	{r7, lr}
 80096a4:	b086      	sub	sp, #24
 80096a6:	af00      	add	r7, sp, #0
 80096a8:	60f8      	str	r0, [r7, #12]
 80096aa:	607a      	str	r2, [r7, #4]
 80096ac:	603b      	str	r3, [r7, #0]
 80096ae:	460b      	mov	r3, r1
 80096b0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096b2:	2300      	movs	r3, #0
 80096b4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096b6:	2300      	movs	r3, #0
 80096b8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80096c0:	7af9      	ldrb	r1, [r7, #11]
 80096c2:	683b      	ldr	r3, [r7, #0]
 80096c4:	687a      	ldr	r2, [r7, #4]
 80096c6:	f7fa fab6 	bl	8003c36 <HAL_PCD_EP_Transmit>
 80096ca:	4603      	mov	r3, r0
 80096cc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80096ce:	7dfb      	ldrb	r3, [r7, #23]
 80096d0:	4618      	mov	r0, r3
 80096d2:	f000 f853 	bl	800977c <USBD_Get_USB_Status>
 80096d6:	4603      	mov	r3, r0
 80096d8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80096da:	7dbb      	ldrb	r3, [r7, #22]
}
 80096dc:	4618      	mov	r0, r3
 80096de:	3718      	adds	r7, #24
 80096e0:	46bd      	mov	sp, r7
 80096e2:	bd80      	pop	{r7, pc}

080096e4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80096e4:	b580      	push	{r7, lr}
 80096e6:	b086      	sub	sp, #24
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	60f8      	str	r0, [r7, #12]
 80096ec:	607a      	str	r2, [r7, #4]
 80096ee:	603b      	str	r3, [r7, #0]
 80096f0:	460b      	mov	r3, r1
 80096f2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096f4:	2300      	movs	r3, #0
 80096f6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096f8:	2300      	movs	r3, #0
 80096fa:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009702:	7af9      	ldrb	r1, [r7, #11]
 8009704:	683b      	ldr	r3, [r7, #0]
 8009706:	687a      	ldr	r2, [r7, #4]
 8009708:	f7fa fa32 	bl	8003b70 <HAL_PCD_EP_Receive>
 800970c:	4603      	mov	r3, r0
 800970e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009710:	7dfb      	ldrb	r3, [r7, #23]
 8009712:	4618      	mov	r0, r3
 8009714:	f000 f832 	bl	800977c <USBD_Get_USB_Status>
 8009718:	4603      	mov	r3, r0
 800971a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800971c:	7dbb      	ldrb	r3, [r7, #22]
}
 800971e:	4618      	mov	r0, r3
 8009720:	3718      	adds	r7, #24
 8009722:	46bd      	mov	sp, r7
 8009724:	bd80      	pop	{r7, pc}

08009726 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009726:	b580      	push	{r7, lr}
 8009728:	b082      	sub	sp, #8
 800972a:	af00      	add	r7, sp, #0
 800972c:	6078      	str	r0, [r7, #4]
 800972e:	460b      	mov	r3, r1
 8009730:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009738:	78fa      	ldrb	r2, [r7, #3]
 800973a:	4611      	mov	r1, r2
 800973c:	4618      	mov	r0, r3
 800973e:	f7fa fa62 	bl	8003c06 <HAL_PCD_EP_GetRxCount>
 8009742:	4603      	mov	r3, r0
}
 8009744:	4618      	mov	r0, r3
 8009746:	3708      	adds	r7, #8
 8009748:	46bd      	mov	sp, r7
 800974a:	bd80      	pop	{r7, pc}

0800974c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800974c:	b480      	push	{r7}
 800974e:	b083      	sub	sp, #12
 8009750:	af00      	add	r7, sp, #0
 8009752:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009754:	4b03      	ldr	r3, [pc, #12]	; (8009764 <USBD_static_malloc+0x18>)
}
 8009756:	4618      	mov	r0, r3
 8009758:	370c      	adds	r7, #12
 800975a:	46bd      	mov	sp, r7
 800975c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009760:	4770      	bx	lr
 8009762:	bf00      	nop
 8009764:	20001da4 	.word	0x20001da4

08009768 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009768:	b480      	push	{r7}
 800976a:	b083      	sub	sp, #12
 800976c:	af00      	add	r7, sp, #0
 800976e:	6078      	str	r0, [r7, #4]

}
 8009770:	bf00      	nop
 8009772:	370c      	adds	r7, #12
 8009774:	46bd      	mov	sp, r7
 8009776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977a:	4770      	bx	lr

0800977c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800977c:	b480      	push	{r7}
 800977e:	b085      	sub	sp, #20
 8009780:	af00      	add	r7, sp, #0
 8009782:	4603      	mov	r3, r0
 8009784:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009786:	2300      	movs	r3, #0
 8009788:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800978a:	79fb      	ldrb	r3, [r7, #7]
 800978c:	2b03      	cmp	r3, #3
 800978e:	d817      	bhi.n	80097c0 <USBD_Get_USB_Status+0x44>
 8009790:	a201      	add	r2, pc, #4	; (adr r2, 8009798 <USBD_Get_USB_Status+0x1c>)
 8009792:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009796:	bf00      	nop
 8009798:	080097a9 	.word	0x080097a9
 800979c:	080097af 	.word	0x080097af
 80097a0:	080097b5 	.word	0x080097b5
 80097a4:	080097bb 	.word	0x080097bb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80097a8:	2300      	movs	r3, #0
 80097aa:	73fb      	strb	r3, [r7, #15]
    break;
 80097ac:	e00b      	b.n	80097c6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80097ae:	2303      	movs	r3, #3
 80097b0:	73fb      	strb	r3, [r7, #15]
    break;
 80097b2:	e008      	b.n	80097c6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80097b4:	2301      	movs	r3, #1
 80097b6:	73fb      	strb	r3, [r7, #15]
    break;
 80097b8:	e005      	b.n	80097c6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80097ba:	2303      	movs	r3, #3
 80097bc:	73fb      	strb	r3, [r7, #15]
    break;
 80097be:	e002      	b.n	80097c6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80097c0:	2303      	movs	r3, #3
 80097c2:	73fb      	strb	r3, [r7, #15]
    break;
 80097c4:	bf00      	nop
  }
  return usb_status;
 80097c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80097c8:	4618      	mov	r0, r3
 80097ca:	3714      	adds	r7, #20
 80097cc:	46bd      	mov	sp, r7
 80097ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d2:	4770      	bx	lr

080097d4 <__errno>:
 80097d4:	4b01      	ldr	r3, [pc, #4]	; (80097dc <__errno+0x8>)
 80097d6:	6818      	ldr	r0, [r3, #0]
 80097d8:	4770      	bx	lr
 80097da:	bf00      	nop
 80097dc:	20000168 	.word	0x20000168

080097e0 <__libc_init_array>:
 80097e0:	b570      	push	{r4, r5, r6, lr}
 80097e2:	4d0d      	ldr	r5, [pc, #52]	; (8009818 <__libc_init_array+0x38>)
 80097e4:	4c0d      	ldr	r4, [pc, #52]	; (800981c <__libc_init_array+0x3c>)
 80097e6:	1b64      	subs	r4, r4, r5
 80097e8:	10a4      	asrs	r4, r4, #2
 80097ea:	2600      	movs	r6, #0
 80097ec:	42a6      	cmp	r6, r4
 80097ee:	d109      	bne.n	8009804 <__libc_init_array+0x24>
 80097f0:	4d0b      	ldr	r5, [pc, #44]	; (8009820 <__libc_init_array+0x40>)
 80097f2:	4c0c      	ldr	r4, [pc, #48]	; (8009824 <__libc_init_array+0x44>)
 80097f4:	f000 fca2 	bl	800a13c <_init>
 80097f8:	1b64      	subs	r4, r4, r5
 80097fa:	10a4      	asrs	r4, r4, #2
 80097fc:	2600      	movs	r6, #0
 80097fe:	42a6      	cmp	r6, r4
 8009800:	d105      	bne.n	800980e <__libc_init_array+0x2e>
 8009802:	bd70      	pop	{r4, r5, r6, pc}
 8009804:	f855 3b04 	ldr.w	r3, [r5], #4
 8009808:	4798      	blx	r3
 800980a:	3601      	adds	r6, #1
 800980c:	e7ee      	b.n	80097ec <__libc_init_array+0xc>
 800980e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009812:	4798      	blx	r3
 8009814:	3601      	adds	r6, #1
 8009816:	e7f2      	b.n	80097fe <__libc_init_array+0x1e>
 8009818:	0800a224 	.word	0x0800a224
 800981c:	0800a224 	.word	0x0800a224
 8009820:	0800a224 	.word	0x0800a224
 8009824:	0800a228 	.word	0x0800a228

08009828 <memset>:
 8009828:	4402      	add	r2, r0
 800982a:	4603      	mov	r3, r0
 800982c:	4293      	cmp	r3, r2
 800982e:	d100      	bne.n	8009832 <memset+0xa>
 8009830:	4770      	bx	lr
 8009832:	f803 1b01 	strb.w	r1, [r3], #1
 8009836:	e7f9      	b.n	800982c <memset+0x4>

08009838 <siprintf>:
 8009838:	b40e      	push	{r1, r2, r3}
 800983a:	b500      	push	{lr}
 800983c:	b09c      	sub	sp, #112	; 0x70
 800983e:	ab1d      	add	r3, sp, #116	; 0x74
 8009840:	9002      	str	r0, [sp, #8]
 8009842:	9006      	str	r0, [sp, #24]
 8009844:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009848:	4809      	ldr	r0, [pc, #36]	; (8009870 <siprintf+0x38>)
 800984a:	9107      	str	r1, [sp, #28]
 800984c:	9104      	str	r1, [sp, #16]
 800984e:	4909      	ldr	r1, [pc, #36]	; (8009874 <siprintf+0x3c>)
 8009850:	f853 2b04 	ldr.w	r2, [r3], #4
 8009854:	9105      	str	r1, [sp, #20]
 8009856:	6800      	ldr	r0, [r0, #0]
 8009858:	9301      	str	r3, [sp, #4]
 800985a:	a902      	add	r1, sp, #8
 800985c:	f000 f87c 	bl	8009958 <_svfiprintf_r>
 8009860:	9b02      	ldr	r3, [sp, #8]
 8009862:	2200      	movs	r2, #0
 8009864:	701a      	strb	r2, [r3, #0]
 8009866:	b01c      	add	sp, #112	; 0x70
 8009868:	f85d eb04 	ldr.w	lr, [sp], #4
 800986c:	b003      	add	sp, #12
 800986e:	4770      	bx	lr
 8009870:	20000168 	.word	0x20000168
 8009874:	ffff0208 	.word	0xffff0208

08009878 <strncmp>:
 8009878:	b510      	push	{r4, lr}
 800987a:	b17a      	cbz	r2, 800989c <strncmp+0x24>
 800987c:	4603      	mov	r3, r0
 800987e:	3901      	subs	r1, #1
 8009880:	1884      	adds	r4, r0, r2
 8009882:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009886:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800988a:	4290      	cmp	r0, r2
 800988c:	d101      	bne.n	8009892 <strncmp+0x1a>
 800988e:	42a3      	cmp	r3, r4
 8009890:	d101      	bne.n	8009896 <strncmp+0x1e>
 8009892:	1a80      	subs	r0, r0, r2
 8009894:	bd10      	pop	{r4, pc}
 8009896:	2800      	cmp	r0, #0
 8009898:	d1f3      	bne.n	8009882 <strncmp+0xa>
 800989a:	e7fa      	b.n	8009892 <strncmp+0x1a>
 800989c:	4610      	mov	r0, r2
 800989e:	e7f9      	b.n	8009894 <strncmp+0x1c>

080098a0 <__ssputs_r>:
 80098a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80098a4:	688e      	ldr	r6, [r1, #8]
 80098a6:	429e      	cmp	r6, r3
 80098a8:	4682      	mov	sl, r0
 80098aa:	460c      	mov	r4, r1
 80098ac:	4690      	mov	r8, r2
 80098ae:	461f      	mov	r7, r3
 80098b0:	d838      	bhi.n	8009924 <__ssputs_r+0x84>
 80098b2:	898a      	ldrh	r2, [r1, #12]
 80098b4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80098b8:	d032      	beq.n	8009920 <__ssputs_r+0x80>
 80098ba:	6825      	ldr	r5, [r4, #0]
 80098bc:	6909      	ldr	r1, [r1, #16]
 80098be:	eba5 0901 	sub.w	r9, r5, r1
 80098c2:	6965      	ldr	r5, [r4, #20]
 80098c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80098c8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80098cc:	3301      	adds	r3, #1
 80098ce:	444b      	add	r3, r9
 80098d0:	106d      	asrs	r5, r5, #1
 80098d2:	429d      	cmp	r5, r3
 80098d4:	bf38      	it	cc
 80098d6:	461d      	movcc	r5, r3
 80098d8:	0553      	lsls	r3, r2, #21
 80098da:	d531      	bpl.n	8009940 <__ssputs_r+0xa0>
 80098dc:	4629      	mov	r1, r5
 80098de:	f000 fb63 	bl	8009fa8 <_malloc_r>
 80098e2:	4606      	mov	r6, r0
 80098e4:	b950      	cbnz	r0, 80098fc <__ssputs_r+0x5c>
 80098e6:	230c      	movs	r3, #12
 80098e8:	f8ca 3000 	str.w	r3, [sl]
 80098ec:	89a3      	ldrh	r3, [r4, #12]
 80098ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80098f2:	81a3      	strh	r3, [r4, #12]
 80098f4:	f04f 30ff 	mov.w	r0, #4294967295
 80098f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098fc:	6921      	ldr	r1, [r4, #16]
 80098fe:	464a      	mov	r2, r9
 8009900:	f000 fabe 	bl	8009e80 <memcpy>
 8009904:	89a3      	ldrh	r3, [r4, #12]
 8009906:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800990a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800990e:	81a3      	strh	r3, [r4, #12]
 8009910:	6126      	str	r6, [r4, #16]
 8009912:	6165      	str	r5, [r4, #20]
 8009914:	444e      	add	r6, r9
 8009916:	eba5 0509 	sub.w	r5, r5, r9
 800991a:	6026      	str	r6, [r4, #0]
 800991c:	60a5      	str	r5, [r4, #8]
 800991e:	463e      	mov	r6, r7
 8009920:	42be      	cmp	r6, r7
 8009922:	d900      	bls.n	8009926 <__ssputs_r+0x86>
 8009924:	463e      	mov	r6, r7
 8009926:	6820      	ldr	r0, [r4, #0]
 8009928:	4632      	mov	r2, r6
 800992a:	4641      	mov	r1, r8
 800992c:	f000 fab6 	bl	8009e9c <memmove>
 8009930:	68a3      	ldr	r3, [r4, #8]
 8009932:	1b9b      	subs	r3, r3, r6
 8009934:	60a3      	str	r3, [r4, #8]
 8009936:	6823      	ldr	r3, [r4, #0]
 8009938:	4433      	add	r3, r6
 800993a:	6023      	str	r3, [r4, #0]
 800993c:	2000      	movs	r0, #0
 800993e:	e7db      	b.n	80098f8 <__ssputs_r+0x58>
 8009940:	462a      	mov	r2, r5
 8009942:	f000 fba5 	bl	800a090 <_realloc_r>
 8009946:	4606      	mov	r6, r0
 8009948:	2800      	cmp	r0, #0
 800994a:	d1e1      	bne.n	8009910 <__ssputs_r+0x70>
 800994c:	6921      	ldr	r1, [r4, #16]
 800994e:	4650      	mov	r0, sl
 8009950:	f000 fabe 	bl	8009ed0 <_free_r>
 8009954:	e7c7      	b.n	80098e6 <__ssputs_r+0x46>
	...

08009958 <_svfiprintf_r>:
 8009958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800995c:	4698      	mov	r8, r3
 800995e:	898b      	ldrh	r3, [r1, #12]
 8009960:	061b      	lsls	r3, r3, #24
 8009962:	b09d      	sub	sp, #116	; 0x74
 8009964:	4607      	mov	r7, r0
 8009966:	460d      	mov	r5, r1
 8009968:	4614      	mov	r4, r2
 800996a:	d50e      	bpl.n	800998a <_svfiprintf_r+0x32>
 800996c:	690b      	ldr	r3, [r1, #16]
 800996e:	b963      	cbnz	r3, 800998a <_svfiprintf_r+0x32>
 8009970:	2140      	movs	r1, #64	; 0x40
 8009972:	f000 fb19 	bl	8009fa8 <_malloc_r>
 8009976:	6028      	str	r0, [r5, #0]
 8009978:	6128      	str	r0, [r5, #16]
 800997a:	b920      	cbnz	r0, 8009986 <_svfiprintf_r+0x2e>
 800997c:	230c      	movs	r3, #12
 800997e:	603b      	str	r3, [r7, #0]
 8009980:	f04f 30ff 	mov.w	r0, #4294967295
 8009984:	e0d1      	b.n	8009b2a <_svfiprintf_r+0x1d2>
 8009986:	2340      	movs	r3, #64	; 0x40
 8009988:	616b      	str	r3, [r5, #20]
 800998a:	2300      	movs	r3, #0
 800998c:	9309      	str	r3, [sp, #36]	; 0x24
 800998e:	2320      	movs	r3, #32
 8009990:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009994:	f8cd 800c 	str.w	r8, [sp, #12]
 8009998:	2330      	movs	r3, #48	; 0x30
 800999a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009b44 <_svfiprintf_r+0x1ec>
 800999e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80099a2:	f04f 0901 	mov.w	r9, #1
 80099a6:	4623      	mov	r3, r4
 80099a8:	469a      	mov	sl, r3
 80099aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80099ae:	b10a      	cbz	r2, 80099b4 <_svfiprintf_r+0x5c>
 80099b0:	2a25      	cmp	r2, #37	; 0x25
 80099b2:	d1f9      	bne.n	80099a8 <_svfiprintf_r+0x50>
 80099b4:	ebba 0b04 	subs.w	fp, sl, r4
 80099b8:	d00b      	beq.n	80099d2 <_svfiprintf_r+0x7a>
 80099ba:	465b      	mov	r3, fp
 80099bc:	4622      	mov	r2, r4
 80099be:	4629      	mov	r1, r5
 80099c0:	4638      	mov	r0, r7
 80099c2:	f7ff ff6d 	bl	80098a0 <__ssputs_r>
 80099c6:	3001      	adds	r0, #1
 80099c8:	f000 80aa 	beq.w	8009b20 <_svfiprintf_r+0x1c8>
 80099cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80099ce:	445a      	add	r2, fp
 80099d0:	9209      	str	r2, [sp, #36]	; 0x24
 80099d2:	f89a 3000 	ldrb.w	r3, [sl]
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	f000 80a2 	beq.w	8009b20 <_svfiprintf_r+0x1c8>
 80099dc:	2300      	movs	r3, #0
 80099de:	f04f 32ff 	mov.w	r2, #4294967295
 80099e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80099e6:	f10a 0a01 	add.w	sl, sl, #1
 80099ea:	9304      	str	r3, [sp, #16]
 80099ec:	9307      	str	r3, [sp, #28]
 80099ee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80099f2:	931a      	str	r3, [sp, #104]	; 0x68
 80099f4:	4654      	mov	r4, sl
 80099f6:	2205      	movs	r2, #5
 80099f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80099fc:	4851      	ldr	r0, [pc, #324]	; (8009b44 <_svfiprintf_r+0x1ec>)
 80099fe:	f7f6 fbef 	bl	80001e0 <memchr>
 8009a02:	9a04      	ldr	r2, [sp, #16]
 8009a04:	b9d8      	cbnz	r0, 8009a3e <_svfiprintf_r+0xe6>
 8009a06:	06d0      	lsls	r0, r2, #27
 8009a08:	bf44      	itt	mi
 8009a0a:	2320      	movmi	r3, #32
 8009a0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009a10:	0711      	lsls	r1, r2, #28
 8009a12:	bf44      	itt	mi
 8009a14:	232b      	movmi	r3, #43	; 0x2b
 8009a16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009a1a:	f89a 3000 	ldrb.w	r3, [sl]
 8009a1e:	2b2a      	cmp	r3, #42	; 0x2a
 8009a20:	d015      	beq.n	8009a4e <_svfiprintf_r+0xf6>
 8009a22:	9a07      	ldr	r2, [sp, #28]
 8009a24:	4654      	mov	r4, sl
 8009a26:	2000      	movs	r0, #0
 8009a28:	f04f 0c0a 	mov.w	ip, #10
 8009a2c:	4621      	mov	r1, r4
 8009a2e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009a32:	3b30      	subs	r3, #48	; 0x30
 8009a34:	2b09      	cmp	r3, #9
 8009a36:	d94e      	bls.n	8009ad6 <_svfiprintf_r+0x17e>
 8009a38:	b1b0      	cbz	r0, 8009a68 <_svfiprintf_r+0x110>
 8009a3a:	9207      	str	r2, [sp, #28]
 8009a3c:	e014      	b.n	8009a68 <_svfiprintf_r+0x110>
 8009a3e:	eba0 0308 	sub.w	r3, r0, r8
 8009a42:	fa09 f303 	lsl.w	r3, r9, r3
 8009a46:	4313      	orrs	r3, r2
 8009a48:	9304      	str	r3, [sp, #16]
 8009a4a:	46a2      	mov	sl, r4
 8009a4c:	e7d2      	b.n	80099f4 <_svfiprintf_r+0x9c>
 8009a4e:	9b03      	ldr	r3, [sp, #12]
 8009a50:	1d19      	adds	r1, r3, #4
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	9103      	str	r1, [sp, #12]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	bfbb      	ittet	lt
 8009a5a:	425b      	neglt	r3, r3
 8009a5c:	f042 0202 	orrlt.w	r2, r2, #2
 8009a60:	9307      	strge	r3, [sp, #28]
 8009a62:	9307      	strlt	r3, [sp, #28]
 8009a64:	bfb8      	it	lt
 8009a66:	9204      	strlt	r2, [sp, #16]
 8009a68:	7823      	ldrb	r3, [r4, #0]
 8009a6a:	2b2e      	cmp	r3, #46	; 0x2e
 8009a6c:	d10c      	bne.n	8009a88 <_svfiprintf_r+0x130>
 8009a6e:	7863      	ldrb	r3, [r4, #1]
 8009a70:	2b2a      	cmp	r3, #42	; 0x2a
 8009a72:	d135      	bne.n	8009ae0 <_svfiprintf_r+0x188>
 8009a74:	9b03      	ldr	r3, [sp, #12]
 8009a76:	1d1a      	adds	r2, r3, #4
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	9203      	str	r2, [sp, #12]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	bfb8      	it	lt
 8009a80:	f04f 33ff 	movlt.w	r3, #4294967295
 8009a84:	3402      	adds	r4, #2
 8009a86:	9305      	str	r3, [sp, #20]
 8009a88:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009b54 <_svfiprintf_r+0x1fc>
 8009a8c:	7821      	ldrb	r1, [r4, #0]
 8009a8e:	2203      	movs	r2, #3
 8009a90:	4650      	mov	r0, sl
 8009a92:	f7f6 fba5 	bl	80001e0 <memchr>
 8009a96:	b140      	cbz	r0, 8009aaa <_svfiprintf_r+0x152>
 8009a98:	2340      	movs	r3, #64	; 0x40
 8009a9a:	eba0 000a 	sub.w	r0, r0, sl
 8009a9e:	fa03 f000 	lsl.w	r0, r3, r0
 8009aa2:	9b04      	ldr	r3, [sp, #16]
 8009aa4:	4303      	orrs	r3, r0
 8009aa6:	3401      	adds	r4, #1
 8009aa8:	9304      	str	r3, [sp, #16]
 8009aaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009aae:	4826      	ldr	r0, [pc, #152]	; (8009b48 <_svfiprintf_r+0x1f0>)
 8009ab0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009ab4:	2206      	movs	r2, #6
 8009ab6:	f7f6 fb93 	bl	80001e0 <memchr>
 8009aba:	2800      	cmp	r0, #0
 8009abc:	d038      	beq.n	8009b30 <_svfiprintf_r+0x1d8>
 8009abe:	4b23      	ldr	r3, [pc, #140]	; (8009b4c <_svfiprintf_r+0x1f4>)
 8009ac0:	bb1b      	cbnz	r3, 8009b0a <_svfiprintf_r+0x1b2>
 8009ac2:	9b03      	ldr	r3, [sp, #12]
 8009ac4:	3307      	adds	r3, #7
 8009ac6:	f023 0307 	bic.w	r3, r3, #7
 8009aca:	3308      	adds	r3, #8
 8009acc:	9303      	str	r3, [sp, #12]
 8009ace:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ad0:	4433      	add	r3, r6
 8009ad2:	9309      	str	r3, [sp, #36]	; 0x24
 8009ad4:	e767      	b.n	80099a6 <_svfiprintf_r+0x4e>
 8009ad6:	fb0c 3202 	mla	r2, ip, r2, r3
 8009ada:	460c      	mov	r4, r1
 8009adc:	2001      	movs	r0, #1
 8009ade:	e7a5      	b.n	8009a2c <_svfiprintf_r+0xd4>
 8009ae0:	2300      	movs	r3, #0
 8009ae2:	3401      	adds	r4, #1
 8009ae4:	9305      	str	r3, [sp, #20]
 8009ae6:	4619      	mov	r1, r3
 8009ae8:	f04f 0c0a 	mov.w	ip, #10
 8009aec:	4620      	mov	r0, r4
 8009aee:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009af2:	3a30      	subs	r2, #48	; 0x30
 8009af4:	2a09      	cmp	r2, #9
 8009af6:	d903      	bls.n	8009b00 <_svfiprintf_r+0x1a8>
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d0c5      	beq.n	8009a88 <_svfiprintf_r+0x130>
 8009afc:	9105      	str	r1, [sp, #20]
 8009afe:	e7c3      	b.n	8009a88 <_svfiprintf_r+0x130>
 8009b00:	fb0c 2101 	mla	r1, ip, r1, r2
 8009b04:	4604      	mov	r4, r0
 8009b06:	2301      	movs	r3, #1
 8009b08:	e7f0      	b.n	8009aec <_svfiprintf_r+0x194>
 8009b0a:	ab03      	add	r3, sp, #12
 8009b0c:	9300      	str	r3, [sp, #0]
 8009b0e:	462a      	mov	r2, r5
 8009b10:	4b0f      	ldr	r3, [pc, #60]	; (8009b50 <_svfiprintf_r+0x1f8>)
 8009b12:	a904      	add	r1, sp, #16
 8009b14:	4638      	mov	r0, r7
 8009b16:	f3af 8000 	nop.w
 8009b1a:	1c42      	adds	r2, r0, #1
 8009b1c:	4606      	mov	r6, r0
 8009b1e:	d1d6      	bne.n	8009ace <_svfiprintf_r+0x176>
 8009b20:	89ab      	ldrh	r3, [r5, #12]
 8009b22:	065b      	lsls	r3, r3, #25
 8009b24:	f53f af2c 	bmi.w	8009980 <_svfiprintf_r+0x28>
 8009b28:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009b2a:	b01d      	add	sp, #116	; 0x74
 8009b2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b30:	ab03      	add	r3, sp, #12
 8009b32:	9300      	str	r3, [sp, #0]
 8009b34:	462a      	mov	r2, r5
 8009b36:	4b06      	ldr	r3, [pc, #24]	; (8009b50 <_svfiprintf_r+0x1f8>)
 8009b38:	a904      	add	r1, sp, #16
 8009b3a:	4638      	mov	r0, r7
 8009b3c:	f000 f87a 	bl	8009c34 <_printf_i>
 8009b40:	e7eb      	b.n	8009b1a <_svfiprintf_r+0x1c2>
 8009b42:	bf00      	nop
 8009b44:	0800a1e8 	.word	0x0800a1e8
 8009b48:	0800a1f2 	.word	0x0800a1f2
 8009b4c:	00000000 	.word	0x00000000
 8009b50:	080098a1 	.word	0x080098a1
 8009b54:	0800a1ee 	.word	0x0800a1ee

08009b58 <_printf_common>:
 8009b58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b5c:	4616      	mov	r6, r2
 8009b5e:	4699      	mov	r9, r3
 8009b60:	688a      	ldr	r2, [r1, #8]
 8009b62:	690b      	ldr	r3, [r1, #16]
 8009b64:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009b68:	4293      	cmp	r3, r2
 8009b6a:	bfb8      	it	lt
 8009b6c:	4613      	movlt	r3, r2
 8009b6e:	6033      	str	r3, [r6, #0]
 8009b70:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009b74:	4607      	mov	r7, r0
 8009b76:	460c      	mov	r4, r1
 8009b78:	b10a      	cbz	r2, 8009b7e <_printf_common+0x26>
 8009b7a:	3301      	adds	r3, #1
 8009b7c:	6033      	str	r3, [r6, #0]
 8009b7e:	6823      	ldr	r3, [r4, #0]
 8009b80:	0699      	lsls	r1, r3, #26
 8009b82:	bf42      	ittt	mi
 8009b84:	6833      	ldrmi	r3, [r6, #0]
 8009b86:	3302      	addmi	r3, #2
 8009b88:	6033      	strmi	r3, [r6, #0]
 8009b8a:	6825      	ldr	r5, [r4, #0]
 8009b8c:	f015 0506 	ands.w	r5, r5, #6
 8009b90:	d106      	bne.n	8009ba0 <_printf_common+0x48>
 8009b92:	f104 0a19 	add.w	sl, r4, #25
 8009b96:	68e3      	ldr	r3, [r4, #12]
 8009b98:	6832      	ldr	r2, [r6, #0]
 8009b9a:	1a9b      	subs	r3, r3, r2
 8009b9c:	42ab      	cmp	r3, r5
 8009b9e:	dc26      	bgt.n	8009bee <_printf_common+0x96>
 8009ba0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009ba4:	1e13      	subs	r3, r2, #0
 8009ba6:	6822      	ldr	r2, [r4, #0]
 8009ba8:	bf18      	it	ne
 8009baa:	2301      	movne	r3, #1
 8009bac:	0692      	lsls	r2, r2, #26
 8009bae:	d42b      	bmi.n	8009c08 <_printf_common+0xb0>
 8009bb0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009bb4:	4649      	mov	r1, r9
 8009bb6:	4638      	mov	r0, r7
 8009bb8:	47c0      	blx	r8
 8009bba:	3001      	adds	r0, #1
 8009bbc:	d01e      	beq.n	8009bfc <_printf_common+0xa4>
 8009bbe:	6823      	ldr	r3, [r4, #0]
 8009bc0:	68e5      	ldr	r5, [r4, #12]
 8009bc2:	6832      	ldr	r2, [r6, #0]
 8009bc4:	f003 0306 	and.w	r3, r3, #6
 8009bc8:	2b04      	cmp	r3, #4
 8009bca:	bf08      	it	eq
 8009bcc:	1aad      	subeq	r5, r5, r2
 8009bce:	68a3      	ldr	r3, [r4, #8]
 8009bd0:	6922      	ldr	r2, [r4, #16]
 8009bd2:	bf0c      	ite	eq
 8009bd4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009bd8:	2500      	movne	r5, #0
 8009bda:	4293      	cmp	r3, r2
 8009bdc:	bfc4      	itt	gt
 8009bde:	1a9b      	subgt	r3, r3, r2
 8009be0:	18ed      	addgt	r5, r5, r3
 8009be2:	2600      	movs	r6, #0
 8009be4:	341a      	adds	r4, #26
 8009be6:	42b5      	cmp	r5, r6
 8009be8:	d11a      	bne.n	8009c20 <_printf_common+0xc8>
 8009bea:	2000      	movs	r0, #0
 8009bec:	e008      	b.n	8009c00 <_printf_common+0xa8>
 8009bee:	2301      	movs	r3, #1
 8009bf0:	4652      	mov	r2, sl
 8009bf2:	4649      	mov	r1, r9
 8009bf4:	4638      	mov	r0, r7
 8009bf6:	47c0      	blx	r8
 8009bf8:	3001      	adds	r0, #1
 8009bfa:	d103      	bne.n	8009c04 <_printf_common+0xac>
 8009bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8009c00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c04:	3501      	adds	r5, #1
 8009c06:	e7c6      	b.n	8009b96 <_printf_common+0x3e>
 8009c08:	18e1      	adds	r1, r4, r3
 8009c0a:	1c5a      	adds	r2, r3, #1
 8009c0c:	2030      	movs	r0, #48	; 0x30
 8009c0e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009c12:	4422      	add	r2, r4
 8009c14:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009c18:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009c1c:	3302      	adds	r3, #2
 8009c1e:	e7c7      	b.n	8009bb0 <_printf_common+0x58>
 8009c20:	2301      	movs	r3, #1
 8009c22:	4622      	mov	r2, r4
 8009c24:	4649      	mov	r1, r9
 8009c26:	4638      	mov	r0, r7
 8009c28:	47c0      	blx	r8
 8009c2a:	3001      	adds	r0, #1
 8009c2c:	d0e6      	beq.n	8009bfc <_printf_common+0xa4>
 8009c2e:	3601      	adds	r6, #1
 8009c30:	e7d9      	b.n	8009be6 <_printf_common+0x8e>
	...

08009c34 <_printf_i>:
 8009c34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009c38:	7e0f      	ldrb	r7, [r1, #24]
 8009c3a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009c3c:	2f78      	cmp	r7, #120	; 0x78
 8009c3e:	4691      	mov	r9, r2
 8009c40:	4680      	mov	r8, r0
 8009c42:	460c      	mov	r4, r1
 8009c44:	469a      	mov	sl, r3
 8009c46:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009c4a:	d807      	bhi.n	8009c5c <_printf_i+0x28>
 8009c4c:	2f62      	cmp	r7, #98	; 0x62
 8009c4e:	d80a      	bhi.n	8009c66 <_printf_i+0x32>
 8009c50:	2f00      	cmp	r7, #0
 8009c52:	f000 80d8 	beq.w	8009e06 <_printf_i+0x1d2>
 8009c56:	2f58      	cmp	r7, #88	; 0x58
 8009c58:	f000 80a3 	beq.w	8009da2 <_printf_i+0x16e>
 8009c5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009c60:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009c64:	e03a      	b.n	8009cdc <_printf_i+0xa8>
 8009c66:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009c6a:	2b15      	cmp	r3, #21
 8009c6c:	d8f6      	bhi.n	8009c5c <_printf_i+0x28>
 8009c6e:	a101      	add	r1, pc, #4	; (adr r1, 8009c74 <_printf_i+0x40>)
 8009c70:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009c74:	08009ccd 	.word	0x08009ccd
 8009c78:	08009ce1 	.word	0x08009ce1
 8009c7c:	08009c5d 	.word	0x08009c5d
 8009c80:	08009c5d 	.word	0x08009c5d
 8009c84:	08009c5d 	.word	0x08009c5d
 8009c88:	08009c5d 	.word	0x08009c5d
 8009c8c:	08009ce1 	.word	0x08009ce1
 8009c90:	08009c5d 	.word	0x08009c5d
 8009c94:	08009c5d 	.word	0x08009c5d
 8009c98:	08009c5d 	.word	0x08009c5d
 8009c9c:	08009c5d 	.word	0x08009c5d
 8009ca0:	08009ded 	.word	0x08009ded
 8009ca4:	08009d11 	.word	0x08009d11
 8009ca8:	08009dcf 	.word	0x08009dcf
 8009cac:	08009c5d 	.word	0x08009c5d
 8009cb0:	08009c5d 	.word	0x08009c5d
 8009cb4:	08009e0f 	.word	0x08009e0f
 8009cb8:	08009c5d 	.word	0x08009c5d
 8009cbc:	08009d11 	.word	0x08009d11
 8009cc0:	08009c5d 	.word	0x08009c5d
 8009cc4:	08009c5d 	.word	0x08009c5d
 8009cc8:	08009dd7 	.word	0x08009dd7
 8009ccc:	682b      	ldr	r3, [r5, #0]
 8009cce:	1d1a      	adds	r2, r3, #4
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	602a      	str	r2, [r5, #0]
 8009cd4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009cd8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009cdc:	2301      	movs	r3, #1
 8009cde:	e0a3      	b.n	8009e28 <_printf_i+0x1f4>
 8009ce0:	6820      	ldr	r0, [r4, #0]
 8009ce2:	6829      	ldr	r1, [r5, #0]
 8009ce4:	0606      	lsls	r6, r0, #24
 8009ce6:	f101 0304 	add.w	r3, r1, #4
 8009cea:	d50a      	bpl.n	8009d02 <_printf_i+0xce>
 8009cec:	680e      	ldr	r6, [r1, #0]
 8009cee:	602b      	str	r3, [r5, #0]
 8009cf0:	2e00      	cmp	r6, #0
 8009cf2:	da03      	bge.n	8009cfc <_printf_i+0xc8>
 8009cf4:	232d      	movs	r3, #45	; 0x2d
 8009cf6:	4276      	negs	r6, r6
 8009cf8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009cfc:	485e      	ldr	r0, [pc, #376]	; (8009e78 <_printf_i+0x244>)
 8009cfe:	230a      	movs	r3, #10
 8009d00:	e019      	b.n	8009d36 <_printf_i+0x102>
 8009d02:	680e      	ldr	r6, [r1, #0]
 8009d04:	602b      	str	r3, [r5, #0]
 8009d06:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009d0a:	bf18      	it	ne
 8009d0c:	b236      	sxthne	r6, r6
 8009d0e:	e7ef      	b.n	8009cf0 <_printf_i+0xbc>
 8009d10:	682b      	ldr	r3, [r5, #0]
 8009d12:	6820      	ldr	r0, [r4, #0]
 8009d14:	1d19      	adds	r1, r3, #4
 8009d16:	6029      	str	r1, [r5, #0]
 8009d18:	0601      	lsls	r1, r0, #24
 8009d1a:	d501      	bpl.n	8009d20 <_printf_i+0xec>
 8009d1c:	681e      	ldr	r6, [r3, #0]
 8009d1e:	e002      	b.n	8009d26 <_printf_i+0xf2>
 8009d20:	0646      	lsls	r6, r0, #25
 8009d22:	d5fb      	bpl.n	8009d1c <_printf_i+0xe8>
 8009d24:	881e      	ldrh	r6, [r3, #0]
 8009d26:	4854      	ldr	r0, [pc, #336]	; (8009e78 <_printf_i+0x244>)
 8009d28:	2f6f      	cmp	r7, #111	; 0x6f
 8009d2a:	bf0c      	ite	eq
 8009d2c:	2308      	moveq	r3, #8
 8009d2e:	230a      	movne	r3, #10
 8009d30:	2100      	movs	r1, #0
 8009d32:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009d36:	6865      	ldr	r5, [r4, #4]
 8009d38:	60a5      	str	r5, [r4, #8]
 8009d3a:	2d00      	cmp	r5, #0
 8009d3c:	bfa2      	ittt	ge
 8009d3e:	6821      	ldrge	r1, [r4, #0]
 8009d40:	f021 0104 	bicge.w	r1, r1, #4
 8009d44:	6021      	strge	r1, [r4, #0]
 8009d46:	b90e      	cbnz	r6, 8009d4c <_printf_i+0x118>
 8009d48:	2d00      	cmp	r5, #0
 8009d4a:	d04d      	beq.n	8009de8 <_printf_i+0x1b4>
 8009d4c:	4615      	mov	r5, r2
 8009d4e:	fbb6 f1f3 	udiv	r1, r6, r3
 8009d52:	fb03 6711 	mls	r7, r3, r1, r6
 8009d56:	5dc7      	ldrb	r7, [r0, r7]
 8009d58:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009d5c:	4637      	mov	r7, r6
 8009d5e:	42bb      	cmp	r3, r7
 8009d60:	460e      	mov	r6, r1
 8009d62:	d9f4      	bls.n	8009d4e <_printf_i+0x11a>
 8009d64:	2b08      	cmp	r3, #8
 8009d66:	d10b      	bne.n	8009d80 <_printf_i+0x14c>
 8009d68:	6823      	ldr	r3, [r4, #0]
 8009d6a:	07de      	lsls	r6, r3, #31
 8009d6c:	d508      	bpl.n	8009d80 <_printf_i+0x14c>
 8009d6e:	6923      	ldr	r3, [r4, #16]
 8009d70:	6861      	ldr	r1, [r4, #4]
 8009d72:	4299      	cmp	r1, r3
 8009d74:	bfde      	ittt	le
 8009d76:	2330      	movle	r3, #48	; 0x30
 8009d78:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009d7c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009d80:	1b52      	subs	r2, r2, r5
 8009d82:	6122      	str	r2, [r4, #16]
 8009d84:	f8cd a000 	str.w	sl, [sp]
 8009d88:	464b      	mov	r3, r9
 8009d8a:	aa03      	add	r2, sp, #12
 8009d8c:	4621      	mov	r1, r4
 8009d8e:	4640      	mov	r0, r8
 8009d90:	f7ff fee2 	bl	8009b58 <_printf_common>
 8009d94:	3001      	adds	r0, #1
 8009d96:	d14c      	bne.n	8009e32 <_printf_i+0x1fe>
 8009d98:	f04f 30ff 	mov.w	r0, #4294967295
 8009d9c:	b004      	add	sp, #16
 8009d9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009da2:	4835      	ldr	r0, [pc, #212]	; (8009e78 <_printf_i+0x244>)
 8009da4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009da8:	6829      	ldr	r1, [r5, #0]
 8009daa:	6823      	ldr	r3, [r4, #0]
 8009dac:	f851 6b04 	ldr.w	r6, [r1], #4
 8009db0:	6029      	str	r1, [r5, #0]
 8009db2:	061d      	lsls	r5, r3, #24
 8009db4:	d514      	bpl.n	8009de0 <_printf_i+0x1ac>
 8009db6:	07df      	lsls	r7, r3, #31
 8009db8:	bf44      	itt	mi
 8009dba:	f043 0320 	orrmi.w	r3, r3, #32
 8009dbe:	6023      	strmi	r3, [r4, #0]
 8009dc0:	b91e      	cbnz	r6, 8009dca <_printf_i+0x196>
 8009dc2:	6823      	ldr	r3, [r4, #0]
 8009dc4:	f023 0320 	bic.w	r3, r3, #32
 8009dc8:	6023      	str	r3, [r4, #0]
 8009dca:	2310      	movs	r3, #16
 8009dcc:	e7b0      	b.n	8009d30 <_printf_i+0xfc>
 8009dce:	6823      	ldr	r3, [r4, #0]
 8009dd0:	f043 0320 	orr.w	r3, r3, #32
 8009dd4:	6023      	str	r3, [r4, #0]
 8009dd6:	2378      	movs	r3, #120	; 0x78
 8009dd8:	4828      	ldr	r0, [pc, #160]	; (8009e7c <_printf_i+0x248>)
 8009dda:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009dde:	e7e3      	b.n	8009da8 <_printf_i+0x174>
 8009de0:	0659      	lsls	r1, r3, #25
 8009de2:	bf48      	it	mi
 8009de4:	b2b6      	uxthmi	r6, r6
 8009de6:	e7e6      	b.n	8009db6 <_printf_i+0x182>
 8009de8:	4615      	mov	r5, r2
 8009dea:	e7bb      	b.n	8009d64 <_printf_i+0x130>
 8009dec:	682b      	ldr	r3, [r5, #0]
 8009dee:	6826      	ldr	r6, [r4, #0]
 8009df0:	6961      	ldr	r1, [r4, #20]
 8009df2:	1d18      	adds	r0, r3, #4
 8009df4:	6028      	str	r0, [r5, #0]
 8009df6:	0635      	lsls	r5, r6, #24
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	d501      	bpl.n	8009e00 <_printf_i+0x1cc>
 8009dfc:	6019      	str	r1, [r3, #0]
 8009dfe:	e002      	b.n	8009e06 <_printf_i+0x1d2>
 8009e00:	0670      	lsls	r0, r6, #25
 8009e02:	d5fb      	bpl.n	8009dfc <_printf_i+0x1c8>
 8009e04:	8019      	strh	r1, [r3, #0]
 8009e06:	2300      	movs	r3, #0
 8009e08:	6123      	str	r3, [r4, #16]
 8009e0a:	4615      	mov	r5, r2
 8009e0c:	e7ba      	b.n	8009d84 <_printf_i+0x150>
 8009e0e:	682b      	ldr	r3, [r5, #0]
 8009e10:	1d1a      	adds	r2, r3, #4
 8009e12:	602a      	str	r2, [r5, #0]
 8009e14:	681d      	ldr	r5, [r3, #0]
 8009e16:	6862      	ldr	r2, [r4, #4]
 8009e18:	2100      	movs	r1, #0
 8009e1a:	4628      	mov	r0, r5
 8009e1c:	f7f6 f9e0 	bl	80001e0 <memchr>
 8009e20:	b108      	cbz	r0, 8009e26 <_printf_i+0x1f2>
 8009e22:	1b40      	subs	r0, r0, r5
 8009e24:	6060      	str	r0, [r4, #4]
 8009e26:	6863      	ldr	r3, [r4, #4]
 8009e28:	6123      	str	r3, [r4, #16]
 8009e2a:	2300      	movs	r3, #0
 8009e2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009e30:	e7a8      	b.n	8009d84 <_printf_i+0x150>
 8009e32:	6923      	ldr	r3, [r4, #16]
 8009e34:	462a      	mov	r2, r5
 8009e36:	4649      	mov	r1, r9
 8009e38:	4640      	mov	r0, r8
 8009e3a:	47d0      	blx	sl
 8009e3c:	3001      	adds	r0, #1
 8009e3e:	d0ab      	beq.n	8009d98 <_printf_i+0x164>
 8009e40:	6823      	ldr	r3, [r4, #0]
 8009e42:	079b      	lsls	r3, r3, #30
 8009e44:	d413      	bmi.n	8009e6e <_printf_i+0x23a>
 8009e46:	68e0      	ldr	r0, [r4, #12]
 8009e48:	9b03      	ldr	r3, [sp, #12]
 8009e4a:	4298      	cmp	r0, r3
 8009e4c:	bfb8      	it	lt
 8009e4e:	4618      	movlt	r0, r3
 8009e50:	e7a4      	b.n	8009d9c <_printf_i+0x168>
 8009e52:	2301      	movs	r3, #1
 8009e54:	4632      	mov	r2, r6
 8009e56:	4649      	mov	r1, r9
 8009e58:	4640      	mov	r0, r8
 8009e5a:	47d0      	blx	sl
 8009e5c:	3001      	adds	r0, #1
 8009e5e:	d09b      	beq.n	8009d98 <_printf_i+0x164>
 8009e60:	3501      	adds	r5, #1
 8009e62:	68e3      	ldr	r3, [r4, #12]
 8009e64:	9903      	ldr	r1, [sp, #12]
 8009e66:	1a5b      	subs	r3, r3, r1
 8009e68:	42ab      	cmp	r3, r5
 8009e6a:	dcf2      	bgt.n	8009e52 <_printf_i+0x21e>
 8009e6c:	e7eb      	b.n	8009e46 <_printf_i+0x212>
 8009e6e:	2500      	movs	r5, #0
 8009e70:	f104 0619 	add.w	r6, r4, #25
 8009e74:	e7f5      	b.n	8009e62 <_printf_i+0x22e>
 8009e76:	bf00      	nop
 8009e78:	0800a1f9 	.word	0x0800a1f9
 8009e7c:	0800a20a 	.word	0x0800a20a

08009e80 <memcpy>:
 8009e80:	440a      	add	r2, r1
 8009e82:	4291      	cmp	r1, r2
 8009e84:	f100 33ff 	add.w	r3, r0, #4294967295
 8009e88:	d100      	bne.n	8009e8c <memcpy+0xc>
 8009e8a:	4770      	bx	lr
 8009e8c:	b510      	push	{r4, lr}
 8009e8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009e92:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009e96:	4291      	cmp	r1, r2
 8009e98:	d1f9      	bne.n	8009e8e <memcpy+0xe>
 8009e9a:	bd10      	pop	{r4, pc}

08009e9c <memmove>:
 8009e9c:	4288      	cmp	r0, r1
 8009e9e:	b510      	push	{r4, lr}
 8009ea0:	eb01 0402 	add.w	r4, r1, r2
 8009ea4:	d902      	bls.n	8009eac <memmove+0x10>
 8009ea6:	4284      	cmp	r4, r0
 8009ea8:	4623      	mov	r3, r4
 8009eaa:	d807      	bhi.n	8009ebc <memmove+0x20>
 8009eac:	1e43      	subs	r3, r0, #1
 8009eae:	42a1      	cmp	r1, r4
 8009eb0:	d008      	beq.n	8009ec4 <memmove+0x28>
 8009eb2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009eb6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009eba:	e7f8      	b.n	8009eae <memmove+0x12>
 8009ebc:	4402      	add	r2, r0
 8009ebe:	4601      	mov	r1, r0
 8009ec0:	428a      	cmp	r2, r1
 8009ec2:	d100      	bne.n	8009ec6 <memmove+0x2a>
 8009ec4:	bd10      	pop	{r4, pc}
 8009ec6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009eca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009ece:	e7f7      	b.n	8009ec0 <memmove+0x24>

08009ed0 <_free_r>:
 8009ed0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009ed2:	2900      	cmp	r1, #0
 8009ed4:	d044      	beq.n	8009f60 <_free_r+0x90>
 8009ed6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009eda:	9001      	str	r0, [sp, #4]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	f1a1 0404 	sub.w	r4, r1, #4
 8009ee2:	bfb8      	it	lt
 8009ee4:	18e4      	addlt	r4, r4, r3
 8009ee6:	f000 f913 	bl	800a110 <__malloc_lock>
 8009eea:	4a1e      	ldr	r2, [pc, #120]	; (8009f64 <_free_r+0x94>)
 8009eec:	9801      	ldr	r0, [sp, #4]
 8009eee:	6813      	ldr	r3, [r2, #0]
 8009ef0:	b933      	cbnz	r3, 8009f00 <_free_r+0x30>
 8009ef2:	6063      	str	r3, [r4, #4]
 8009ef4:	6014      	str	r4, [r2, #0]
 8009ef6:	b003      	add	sp, #12
 8009ef8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009efc:	f000 b90e 	b.w	800a11c <__malloc_unlock>
 8009f00:	42a3      	cmp	r3, r4
 8009f02:	d908      	bls.n	8009f16 <_free_r+0x46>
 8009f04:	6825      	ldr	r5, [r4, #0]
 8009f06:	1961      	adds	r1, r4, r5
 8009f08:	428b      	cmp	r3, r1
 8009f0a:	bf01      	itttt	eq
 8009f0c:	6819      	ldreq	r1, [r3, #0]
 8009f0e:	685b      	ldreq	r3, [r3, #4]
 8009f10:	1949      	addeq	r1, r1, r5
 8009f12:	6021      	streq	r1, [r4, #0]
 8009f14:	e7ed      	b.n	8009ef2 <_free_r+0x22>
 8009f16:	461a      	mov	r2, r3
 8009f18:	685b      	ldr	r3, [r3, #4]
 8009f1a:	b10b      	cbz	r3, 8009f20 <_free_r+0x50>
 8009f1c:	42a3      	cmp	r3, r4
 8009f1e:	d9fa      	bls.n	8009f16 <_free_r+0x46>
 8009f20:	6811      	ldr	r1, [r2, #0]
 8009f22:	1855      	adds	r5, r2, r1
 8009f24:	42a5      	cmp	r5, r4
 8009f26:	d10b      	bne.n	8009f40 <_free_r+0x70>
 8009f28:	6824      	ldr	r4, [r4, #0]
 8009f2a:	4421      	add	r1, r4
 8009f2c:	1854      	adds	r4, r2, r1
 8009f2e:	42a3      	cmp	r3, r4
 8009f30:	6011      	str	r1, [r2, #0]
 8009f32:	d1e0      	bne.n	8009ef6 <_free_r+0x26>
 8009f34:	681c      	ldr	r4, [r3, #0]
 8009f36:	685b      	ldr	r3, [r3, #4]
 8009f38:	6053      	str	r3, [r2, #4]
 8009f3a:	4421      	add	r1, r4
 8009f3c:	6011      	str	r1, [r2, #0]
 8009f3e:	e7da      	b.n	8009ef6 <_free_r+0x26>
 8009f40:	d902      	bls.n	8009f48 <_free_r+0x78>
 8009f42:	230c      	movs	r3, #12
 8009f44:	6003      	str	r3, [r0, #0]
 8009f46:	e7d6      	b.n	8009ef6 <_free_r+0x26>
 8009f48:	6825      	ldr	r5, [r4, #0]
 8009f4a:	1961      	adds	r1, r4, r5
 8009f4c:	428b      	cmp	r3, r1
 8009f4e:	bf04      	itt	eq
 8009f50:	6819      	ldreq	r1, [r3, #0]
 8009f52:	685b      	ldreq	r3, [r3, #4]
 8009f54:	6063      	str	r3, [r4, #4]
 8009f56:	bf04      	itt	eq
 8009f58:	1949      	addeq	r1, r1, r5
 8009f5a:	6021      	streq	r1, [r4, #0]
 8009f5c:	6054      	str	r4, [r2, #4]
 8009f5e:	e7ca      	b.n	8009ef6 <_free_r+0x26>
 8009f60:	b003      	add	sp, #12
 8009f62:	bd30      	pop	{r4, r5, pc}
 8009f64:	20001fc4 	.word	0x20001fc4

08009f68 <sbrk_aligned>:
 8009f68:	b570      	push	{r4, r5, r6, lr}
 8009f6a:	4e0e      	ldr	r6, [pc, #56]	; (8009fa4 <sbrk_aligned+0x3c>)
 8009f6c:	460c      	mov	r4, r1
 8009f6e:	6831      	ldr	r1, [r6, #0]
 8009f70:	4605      	mov	r5, r0
 8009f72:	b911      	cbnz	r1, 8009f7a <sbrk_aligned+0x12>
 8009f74:	f000 f8bc 	bl	800a0f0 <_sbrk_r>
 8009f78:	6030      	str	r0, [r6, #0]
 8009f7a:	4621      	mov	r1, r4
 8009f7c:	4628      	mov	r0, r5
 8009f7e:	f000 f8b7 	bl	800a0f0 <_sbrk_r>
 8009f82:	1c43      	adds	r3, r0, #1
 8009f84:	d00a      	beq.n	8009f9c <sbrk_aligned+0x34>
 8009f86:	1cc4      	adds	r4, r0, #3
 8009f88:	f024 0403 	bic.w	r4, r4, #3
 8009f8c:	42a0      	cmp	r0, r4
 8009f8e:	d007      	beq.n	8009fa0 <sbrk_aligned+0x38>
 8009f90:	1a21      	subs	r1, r4, r0
 8009f92:	4628      	mov	r0, r5
 8009f94:	f000 f8ac 	bl	800a0f0 <_sbrk_r>
 8009f98:	3001      	adds	r0, #1
 8009f9a:	d101      	bne.n	8009fa0 <sbrk_aligned+0x38>
 8009f9c:	f04f 34ff 	mov.w	r4, #4294967295
 8009fa0:	4620      	mov	r0, r4
 8009fa2:	bd70      	pop	{r4, r5, r6, pc}
 8009fa4:	20001fc8 	.word	0x20001fc8

08009fa8 <_malloc_r>:
 8009fa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009fac:	1ccd      	adds	r5, r1, #3
 8009fae:	f025 0503 	bic.w	r5, r5, #3
 8009fb2:	3508      	adds	r5, #8
 8009fb4:	2d0c      	cmp	r5, #12
 8009fb6:	bf38      	it	cc
 8009fb8:	250c      	movcc	r5, #12
 8009fba:	2d00      	cmp	r5, #0
 8009fbc:	4607      	mov	r7, r0
 8009fbe:	db01      	blt.n	8009fc4 <_malloc_r+0x1c>
 8009fc0:	42a9      	cmp	r1, r5
 8009fc2:	d905      	bls.n	8009fd0 <_malloc_r+0x28>
 8009fc4:	230c      	movs	r3, #12
 8009fc6:	603b      	str	r3, [r7, #0]
 8009fc8:	2600      	movs	r6, #0
 8009fca:	4630      	mov	r0, r6
 8009fcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009fd0:	4e2e      	ldr	r6, [pc, #184]	; (800a08c <_malloc_r+0xe4>)
 8009fd2:	f000 f89d 	bl	800a110 <__malloc_lock>
 8009fd6:	6833      	ldr	r3, [r6, #0]
 8009fd8:	461c      	mov	r4, r3
 8009fda:	bb34      	cbnz	r4, 800a02a <_malloc_r+0x82>
 8009fdc:	4629      	mov	r1, r5
 8009fde:	4638      	mov	r0, r7
 8009fe0:	f7ff ffc2 	bl	8009f68 <sbrk_aligned>
 8009fe4:	1c43      	adds	r3, r0, #1
 8009fe6:	4604      	mov	r4, r0
 8009fe8:	d14d      	bne.n	800a086 <_malloc_r+0xde>
 8009fea:	6834      	ldr	r4, [r6, #0]
 8009fec:	4626      	mov	r6, r4
 8009fee:	2e00      	cmp	r6, #0
 8009ff0:	d140      	bne.n	800a074 <_malloc_r+0xcc>
 8009ff2:	6823      	ldr	r3, [r4, #0]
 8009ff4:	4631      	mov	r1, r6
 8009ff6:	4638      	mov	r0, r7
 8009ff8:	eb04 0803 	add.w	r8, r4, r3
 8009ffc:	f000 f878 	bl	800a0f0 <_sbrk_r>
 800a000:	4580      	cmp	r8, r0
 800a002:	d13a      	bne.n	800a07a <_malloc_r+0xd2>
 800a004:	6821      	ldr	r1, [r4, #0]
 800a006:	3503      	adds	r5, #3
 800a008:	1a6d      	subs	r5, r5, r1
 800a00a:	f025 0503 	bic.w	r5, r5, #3
 800a00e:	3508      	adds	r5, #8
 800a010:	2d0c      	cmp	r5, #12
 800a012:	bf38      	it	cc
 800a014:	250c      	movcc	r5, #12
 800a016:	4629      	mov	r1, r5
 800a018:	4638      	mov	r0, r7
 800a01a:	f7ff ffa5 	bl	8009f68 <sbrk_aligned>
 800a01e:	3001      	adds	r0, #1
 800a020:	d02b      	beq.n	800a07a <_malloc_r+0xd2>
 800a022:	6823      	ldr	r3, [r4, #0]
 800a024:	442b      	add	r3, r5
 800a026:	6023      	str	r3, [r4, #0]
 800a028:	e00e      	b.n	800a048 <_malloc_r+0xa0>
 800a02a:	6822      	ldr	r2, [r4, #0]
 800a02c:	1b52      	subs	r2, r2, r5
 800a02e:	d41e      	bmi.n	800a06e <_malloc_r+0xc6>
 800a030:	2a0b      	cmp	r2, #11
 800a032:	d916      	bls.n	800a062 <_malloc_r+0xba>
 800a034:	1961      	adds	r1, r4, r5
 800a036:	42a3      	cmp	r3, r4
 800a038:	6025      	str	r5, [r4, #0]
 800a03a:	bf18      	it	ne
 800a03c:	6059      	strne	r1, [r3, #4]
 800a03e:	6863      	ldr	r3, [r4, #4]
 800a040:	bf08      	it	eq
 800a042:	6031      	streq	r1, [r6, #0]
 800a044:	5162      	str	r2, [r4, r5]
 800a046:	604b      	str	r3, [r1, #4]
 800a048:	4638      	mov	r0, r7
 800a04a:	f104 060b 	add.w	r6, r4, #11
 800a04e:	f000 f865 	bl	800a11c <__malloc_unlock>
 800a052:	f026 0607 	bic.w	r6, r6, #7
 800a056:	1d23      	adds	r3, r4, #4
 800a058:	1af2      	subs	r2, r6, r3
 800a05a:	d0b6      	beq.n	8009fca <_malloc_r+0x22>
 800a05c:	1b9b      	subs	r3, r3, r6
 800a05e:	50a3      	str	r3, [r4, r2]
 800a060:	e7b3      	b.n	8009fca <_malloc_r+0x22>
 800a062:	6862      	ldr	r2, [r4, #4]
 800a064:	42a3      	cmp	r3, r4
 800a066:	bf0c      	ite	eq
 800a068:	6032      	streq	r2, [r6, #0]
 800a06a:	605a      	strne	r2, [r3, #4]
 800a06c:	e7ec      	b.n	800a048 <_malloc_r+0xa0>
 800a06e:	4623      	mov	r3, r4
 800a070:	6864      	ldr	r4, [r4, #4]
 800a072:	e7b2      	b.n	8009fda <_malloc_r+0x32>
 800a074:	4634      	mov	r4, r6
 800a076:	6876      	ldr	r6, [r6, #4]
 800a078:	e7b9      	b.n	8009fee <_malloc_r+0x46>
 800a07a:	230c      	movs	r3, #12
 800a07c:	603b      	str	r3, [r7, #0]
 800a07e:	4638      	mov	r0, r7
 800a080:	f000 f84c 	bl	800a11c <__malloc_unlock>
 800a084:	e7a1      	b.n	8009fca <_malloc_r+0x22>
 800a086:	6025      	str	r5, [r4, #0]
 800a088:	e7de      	b.n	800a048 <_malloc_r+0xa0>
 800a08a:	bf00      	nop
 800a08c:	20001fc4 	.word	0x20001fc4

0800a090 <_realloc_r>:
 800a090:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a094:	4680      	mov	r8, r0
 800a096:	4614      	mov	r4, r2
 800a098:	460e      	mov	r6, r1
 800a09a:	b921      	cbnz	r1, 800a0a6 <_realloc_r+0x16>
 800a09c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a0a0:	4611      	mov	r1, r2
 800a0a2:	f7ff bf81 	b.w	8009fa8 <_malloc_r>
 800a0a6:	b92a      	cbnz	r2, 800a0b4 <_realloc_r+0x24>
 800a0a8:	f7ff ff12 	bl	8009ed0 <_free_r>
 800a0ac:	4625      	mov	r5, r4
 800a0ae:	4628      	mov	r0, r5
 800a0b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a0b4:	f000 f838 	bl	800a128 <_malloc_usable_size_r>
 800a0b8:	4284      	cmp	r4, r0
 800a0ba:	4607      	mov	r7, r0
 800a0bc:	d802      	bhi.n	800a0c4 <_realloc_r+0x34>
 800a0be:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a0c2:	d812      	bhi.n	800a0ea <_realloc_r+0x5a>
 800a0c4:	4621      	mov	r1, r4
 800a0c6:	4640      	mov	r0, r8
 800a0c8:	f7ff ff6e 	bl	8009fa8 <_malloc_r>
 800a0cc:	4605      	mov	r5, r0
 800a0ce:	2800      	cmp	r0, #0
 800a0d0:	d0ed      	beq.n	800a0ae <_realloc_r+0x1e>
 800a0d2:	42bc      	cmp	r4, r7
 800a0d4:	4622      	mov	r2, r4
 800a0d6:	4631      	mov	r1, r6
 800a0d8:	bf28      	it	cs
 800a0da:	463a      	movcs	r2, r7
 800a0dc:	f7ff fed0 	bl	8009e80 <memcpy>
 800a0e0:	4631      	mov	r1, r6
 800a0e2:	4640      	mov	r0, r8
 800a0e4:	f7ff fef4 	bl	8009ed0 <_free_r>
 800a0e8:	e7e1      	b.n	800a0ae <_realloc_r+0x1e>
 800a0ea:	4635      	mov	r5, r6
 800a0ec:	e7df      	b.n	800a0ae <_realloc_r+0x1e>
	...

0800a0f0 <_sbrk_r>:
 800a0f0:	b538      	push	{r3, r4, r5, lr}
 800a0f2:	4d06      	ldr	r5, [pc, #24]	; (800a10c <_sbrk_r+0x1c>)
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	4604      	mov	r4, r0
 800a0f8:	4608      	mov	r0, r1
 800a0fa:	602b      	str	r3, [r5, #0]
 800a0fc:	f7f7 fb90 	bl	8001820 <_sbrk>
 800a100:	1c43      	adds	r3, r0, #1
 800a102:	d102      	bne.n	800a10a <_sbrk_r+0x1a>
 800a104:	682b      	ldr	r3, [r5, #0]
 800a106:	b103      	cbz	r3, 800a10a <_sbrk_r+0x1a>
 800a108:	6023      	str	r3, [r4, #0]
 800a10a:	bd38      	pop	{r3, r4, r5, pc}
 800a10c:	20001fcc 	.word	0x20001fcc

0800a110 <__malloc_lock>:
 800a110:	4801      	ldr	r0, [pc, #4]	; (800a118 <__malloc_lock+0x8>)
 800a112:	f000 b811 	b.w	800a138 <__retarget_lock_acquire_recursive>
 800a116:	bf00      	nop
 800a118:	20001fd0 	.word	0x20001fd0

0800a11c <__malloc_unlock>:
 800a11c:	4801      	ldr	r0, [pc, #4]	; (800a124 <__malloc_unlock+0x8>)
 800a11e:	f000 b80c 	b.w	800a13a <__retarget_lock_release_recursive>
 800a122:	bf00      	nop
 800a124:	20001fd0 	.word	0x20001fd0

0800a128 <_malloc_usable_size_r>:
 800a128:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a12c:	1f18      	subs	r0, r3, #4
 800a12e:	2b00      	cmp	r3, #0
 800a130:	bfbc      	itt	lt
 800a132:	580b      	ldrlt	r3, [r1, r0]
 800a134:	18c0      	addlt	r0, r0, r3
 800a136:	4770      	bx	lr

0800a138 <__retarget_lock_acquire_recursive>:
 800a138:	4770      	bx	lr

0800a13a <__retarget_lock_release_recursive>:
 800a13a:	4770      	bx	lr

0800a13c <_init>:
 800a13c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a13e:	bf00      	nop
 800a140:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a142:	bc08      	pop	{r3}
 800a144:	469e      	mov	lr, r3
 800a146:	4770      	bx	lr

0800a148 <_fini>:
 800a148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a14a:	bf00      	nop
 800a14c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a14e:	bc08      	pop	{r3}
 800a150:	469e      	mov	lr, r3
 800a152:	4770      	bx	lr
